package fr.prisoncore.prisoncore.prisonTycoon.commands;

import fr.prisoncore.prisoncore.prisonTycoon.PrisonTycoon;
import org.bukkit.Bukkit;
import org.bukkit.command.Command;
import org.bukkit.command.CommandExecutor;
import org.bukkit.command.CommandSender;
import org.bukkit.command.TabCompleter;
import org.bukkit.entity.Player;
import org.bukkit.util.StringUtil;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

/**
 * Commandes administratives pour g√©rer le syst√®me de chat et tab
 * Usage: /chatadmin <sous-commande> [arguments]
 */
public class ChatAdminCommand implements CommandExecutor, TabCompleter {

    private final PrisonTycoon plugin;

    public ChatAdminCommand(PrisonTycoon plugin) {
        this.plugin = plugin;
    }

    @Override
    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {
        if (!sender.hasPermission("specialmine.admin.chat")) {
            sender.sendMessage("¬ßc‚ùå Vous n'avez pas la permission d'utiliser cette commande!");
            return true;
        }

        if (args.length == 0) {
            sendHelpMessage(sender);
            return true;
        }

        String subCommand = args[0].toLowerCase();

        switch (subCommand) {
            case "mute" -> handleMuteCommand(sender, args);
            case "unmute" -> handleUnmuteCommand(sender, args);
            case "reload" -> handleReloadCommand(sender);
            case "stats" -> handleStatsCommand(sender);
            case "test" -> handleTestCommand(sender, args);
            case "broadcast" -> handleBroadcastCommand(sender, args);
            case "clear" -> handleClearCommand(sender);
            default -> sendHelpMessage(sender);
        }

        return true;
    }

    /**
     * Mute un joueur
     */
    private void handleMuteCommand(CommandSender sender, String[] args) {
        if (args.length < 2) {
            sender.sendMessage("¬ßc‚ùå Usage: /chatadmin mute <joueur> [raison]");
            return;
        }

        Player target = Bukkit.getPlayer(args[1]);
        if (target == null) {
            sender.sendMessage("¬ßc‚ùå Joueur introuvable: " + args[1]);
            return;
        }

        if (target.hasPermission("specialmine.admin")) {
            sender.sendMessage("¬ßc‚ùå Vous ne pouvez pas muter un administrateur!");
            return;
        }

        // Construit la raison
        String reason = "Aucune raison sp√©cifi√©e";
        if (args.length > 2) {
            StringBuilder reasonBuilder = new StringBuilder();
            for (int i = 2; i < args.length; i++) {
                reasonBuilder.append(args[i]).append(" ");
            }
            reason = reasonBuilder.toString().trim();
        }

        // Mute le joueur
        target.addAttachment(plugin, "specialmine.chat", false);

        // Messages
        target.sendMessage("¬ßcüîá Vous avez √©t√© mut√© par " + sender.getName());
        target.sendMessage("¬ß7Raison: ¬ße" + reason);
        sender.sendMessage("¬ßa‚úÖ Joueur " + target.getName() + " mut√© avec succ√®s.");

        // Annonce aux admins
        for (Player admin : Bukkit.getOnlinePlayers()) {
            if (admin.hasPermission("specialmine.admin") && !admin.equals(sender)) {
                admin.sendMessage("¬ß7[ADMIN] ¬ße" + sender.getName() + " ¬ß7a mut√© ¬ßc" + target.getName() + " ¬ß7(Raison: " + reason + ")");
            }
        }

        plugin.getPluginLogger().info("Joueur mut√©: " + target.getName() + " par " + sender.getName() + " (Raison: " + reason + ")");
    }

    /**
     * Unmute un joueur
     */
    private void handleUnmuteCommand(CommandSender sender, String[] args) {
        if (args.length < 2) {
            sender.sendMessage("¬ßc‚ùå Usage: /chatadmin unmute <joueur>");
            return;
        }

        Player target = Bukkit.getPlayer(args[1]);
        if (target == null) {
            sender.sendMessage("¬ßc‚ùå Joueur introuvable: " + args[1]);
            return;
        }

        // Unmute le joueur
        target.addAttachment(plugin, "specialmine.chat", true);

        // Messages
        target.sendMessage("¬ßaüîä Vous avez √©t√© d√©mut√© par " + sender.getName());
        sender.sendMessage("¬ßa‚úÖ Joueur " + target.getName() + " d√©mut√© avec succ√®s.");

        // Annonce aux admins
        for (Player admin : Bukkit.getOnlinePlayers()) {
            if (admin.hasPermission("specialmine.admin") && !admin.equals(sender)) {
                admin.sendMessage("¬ß7[ADMIN] ¬ße" + sender.getName() + " ¬ß7a d√©mut√© ¬ßa" + target.getName());
            }
        }

        plugin.getPluginLogger().info("Joueur d√©mut√©: " + target.getName() + " par " + sender.getName());
    }

    /**
     * Recharge le syst√®me de chat/tab
     */
    private void handleReloadCommand(CommandSender sender) {
        try {
            // Red√©marre le TabManager
            plugin.getTabManager().stopTabUpdater();
            plugin.getTabManager().startTabUpdater();

            // Met √† jour tous les tabs
            for (Player player : Bukkit.getOnlinePlayers()) {
                plugin.getTabManager().forceUpdatePlayer(player);
            }

            sender.sendMessage("¬ßa‚úÖ Syst√®me de chat et tab recharg√© avec succ√®s!");
            plugin.getPluginLogger().info("Syst√®me de chat/tab recharg√© par " + sender.getName());

        } catch (Exception e) {
            sender.sendMessage("¬ßc‚ùå Erreur lors du rechargement: " + e.getMessage());
            plugin.getPluginLogger().severe("Erreur lors du rechargement chat/tab: " + e.getMessage());
        }
    }

    /**
     * Affiche les statistiques du syst√®me
     */
    private void handleStatsCommand(CommandSender sender) {
        int onlinePlayers = Bukkit.getOnlinePlayers().size();
        int adminCount = 0;
        int vipCount = 0;
        int playerCount = 0;

        for (Player player : Bukkit.getOnlinePlayers()) {
            if (player.hasPermission("specialmine.admin")) {
                adminCount++;
            } else if (player.hasPermission("specialmine.vip")) {
                vipCount++;
            } else {
                playerCount++;
            }
        }

        sender.sendMessage("¬ß8‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨");
        sender.sendMessage("¬ß6¬ßlüìä STATISTIQUES CHAT & TAB");
        sender.sendMessage("¬ß8‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨");
        sender.sendMessage("¬ßeüìà Joueurs connect√©s: ¬ßa" + onlinePlayers);
        sender.sendMessage("¬ßcüîß Administrateurs: ¬ßf" + adminCount);
        sender.sendMessage("¬ß6‚≠ê VIP: ¬ßf" + vipCount);
        sender.sendMessage("¬ß7üë§ Joueurs: ¬ßf" + playerCount);
        sender.sendMessage("¬ß8‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨");
    }

    /**
     * Teste le format de chat avec diff√©rents rangs
     */
    private void handleTestCommand(CommandSender sender, String[] args) {
        if (!(sender instanceof Player player)) {
            sender.sendMessage("¬ßc‚ùå Cette commande ne peut √™tre utilis√©e que par un joueur!");
            return;
        }

        String testMessage = "Message de test du syst√®me de chat!";
        if (args.length > 1) {
            StringBuilder msgBuilder = new StringBuilder();
            for (int i = 1; i < args.length; i++) {
                msgBuilder.append(args[i]).append(" ");
            }
            testMessage = msgBuilder.toString().trim();
        }

        sender.sendMessage("¬ßaüß™ Test des formats de chat:");
        sender.sendMessage("¬ß4[ADMIN] ¬ßc[Z] ¬ßcAdminTest ¬ßf: " + testMessage);
        sender.sendMessage("¬ße[VIP] ¬ß6[M] ¬ß6VipTest ¬ßf: " + testMessage);
        sender.sendMessage("¬ßa[J] ¬ß7JoueurTest ¬ßf: " + testMessage);
        sender.sendMessage("");
        sender.sendMessage("¬ß7Exemple de progression des rangs:");
        sender.sendMessage("¬ßf[A] ¬ß7D√©butant ¬ßf: " + testMessage);
        sender.sendMessage("¬ße[L] ¬ß7Interm√©diaire ¬ßf: " + testMessage);
        sender.sendMessage("¬ßc[P] ¬ß7Avanc√© ¬ßf: " + testMessage);
        sender.sendMessage("¬ß6¬ßl[Z] ¬ß7Maximum ¬ßf: " + testMessage);
    }

    /**
     * Diffuse un message depuis l'administration
     */
    private void handleBroadcastCommand(CommandSender sender, String[] args) {
        if (args.length < 2) {
            sender.sendMessage("¬ßc‚ùå Usage: /chatadmin broadcast <message>");
            return;
        }

        StringBuilder messageBuilder = new StringBuilder();
        for (int i = 1; i < args.length; i++) {
            messageBuilder.append(args[i]).append(" ");
        }
        String message = messageBuilder.toString().trim();

        String broadcastMessage = "¬ß8¬ßl[¬ß6¬ßlANNONCE¬ß8¬ßl] ¬ße" + message;

        for (Player player : Bukkit.getOnlinePlayers()) {
            player.sendMessage(broadcastMessage);
        }

        sender.sendMessage("¬ßa‚úÖ Annonce diffus√©e √† " + Bukkit.getOnlinePlayers().size() + " joueurs.");
        plugin.getPluginLogger().info("Annonce diffus√©e par " + sender.getName() + ": " + message);
    }

    /**
     * Vide le chat de tous les joueurs
     */
    private void handleClearCommand(CommandSender sender) {
        for (Player player : Bukkit.getOnlinePlayers()) {
            for (int i = 0; i < 100; i++) {
                player.sendMessage("");
            }
            player.sendMessage("¬ßa‚úÖ Chat vid√© par un administrateur.");
        }

        sender.sendMessage("¬ßa‚úÖ Chat vid√© pour tous les joueurs connect√©s.");
        plugin.getPluginLogger().info("Chat vid√© par " + sender.getName());
    }

    /**
     * Affiche l'aide de la commande
     */
    private void sendHelpMessage(CommandSender sender) {
        sender.sendMessage("¬ß8‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨");
        sender.sendMessage("¬ß6¬ßl‚öô COMMANDES ADMIN CHAT");
        sender.sendMessage("¬ß8‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨");
        sender.sendMessage("¬ße/chatadmin mute <joueur> [raison] ¬ß7- Mute un joueur");
        sender.sendMessage("¬ße/chatadmin unmute <joueur> ¬ß7- D√©mute un joueur");
        sender.sendMessage("¬ße/chatadmin reload ¬ß7- Recharge le syst√®me");
        sender.sendMessage("¬ße/chatadmin stats ¬ß7- Affiche les statistiques");
        sender.sendMessage("¬ße/chatadmin test [message] ¬ß7- Teste les formats");
        sender.sendMessage("¬ße/chatadmin broadcast <message> ¬ß7- Diffuse une annonce");
        sender.sendMessage("¬ße/chatadmin clear ¬ß7- Vide le chat pour tous");
        sender.sendMessage("¬ß8‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨");
    }

    @Override
    public List<String> onTabComplete(CommandSender sender, Command command, String alias, String[] args) {
        List<String> completions = new ArrayList<>();

        if (args.length == 1) {
            List<String> subCommands = Arrays.asList("mute", "unmute", "reload", "stats", "test", "broadcast", "clear");
            StringUtil.copyPartialMatches(args[0], subCommands, completions);
        } else if (args.length == 2 && (args[0].equalsIgnoreCase("mute") || args[0].equalsIgnoreCase("unmute"))) {
            // Suggestions de noms de joueurs pour mute/unmute
            for (Player player : Bukkit.getOnlinePlayers()) {
                completions.add(player.getName());
            }
        }

        Collections.sort(completions);
        return completions;
    }
}