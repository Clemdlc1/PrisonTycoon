package fr.prisoncore.prisoncore.prisonTycoon.events;

import fr.prisoncore.prisoncore.prisonTycoon.PrisonTycoon;
import fr.prisoncore.prisoncore.prisonTycoon.data.BlockValueData;
import fr.prisoncore.prisoncore.prisonTycoon.data.PlayerData;
import net.md_5.bungee.api.chat.ClickEvent;
import net.md_5.bungee.api.chat.HoverEvent;
import net.md_5.bungee.api.chat.TextComponent;
import net.md_5.bungee.api.chat.hover.content.Text;
import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockBreakEvent;
import org.bukkit.event.block.BlockPlaceEvent;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.Damageable;
import org.bukkit.metadata.FixedMetadataValue;

import java.util.Map;
import java.util.Random;
import java.util.UUID;
import java.util.concurrent.ConcurrentHashMap;

/**
 * UNIFI√â : Listener pour le minage ET la gestion de durabilit√© des pioches l√©gendaires
 * NOUVEAU : Syst√®me de notifications de durabilit√© bas√© sur les blocs cass√©s
 */
public class MiningListener implements Listener {

    private final PrisonTycoon plugin;
    private final Random random = new Random();

    // NOUVEAU : Compteur de blocs cass√©s par joueur pour les notifications de durabilit√©
    private final Map<UUID, Integer> playerBlocksMinedCount = new ConcurrentHashMap<>();

    public MiningListener(PrisonTycoon plugin) {
        this.plugin = plugin;
    }

    @EventHandler(priority = EventPriority.HIGHEST)
    public void onBlockBreak(BlockBreakEvent event) {
        Player player = event.getPlayer();
        Location location = event.getBlock().getLocation();
        Material material = event.getBlock().getType();

        // 1. GESTION DURABILIT√â : Traite d'abord la durabilit√© de TOUTES les pioches
        handlePickaxeDurability(player, event);

        // 2. LOGIQUE MINAGE : Traite ensuite la logique sp√©cifique aux pioches l√©gendaires
        ItemStack playerPickaxe = getPlayerLegendaryPickaxe(player);
        String mineName = plugin.getConfigManager().getPlayerMine(location);

        if (mineName != null) {
            // Dans une mine - pioche l√©gendaire obligatoire
            if (playerPickaxe == null) {
                event.setCancelled(true);
                player.sendMessage("¬ßc‚ùå Seule la pioche l√©gendaire peut miner dans cette zone!");
                return;
            }

            // Emp√™che TOUS les drops (items ET exp)
            event.setDropItems(false);
            event.setExpToDrop(0);

            // Traite le minage dans la mine
            processMiningInMine(player, location, material, mineName);

        } else if (playerPickaxe != null) {
            // Hors mine avec pioche l√©gendaire - restrictions appliqu√©es
            processMiningOutsideMine(player, location, material);
        }
        // Sinon : comportement normal de Minecraft (pas de pioche l√©gendaire)

        // 3. POST-TRAITEMENT : Mise √† jour de la pioche l√©gendaire si utilis√©e
        if (playerPickaxe != null) {
            postProcessLegendaryPickaxe(player, playerPickaxe);

            // NOUVEAU : Incr√©mente le compteur de blocs et v√©rifie les notifications de durabilit√©
            incrementBlockCountAndCheckDurabilityNotification(player, playerPickaxe);
        }
    }

    // ================================
    // SECTION 1: GESTION DURABILIT√â
    // ================================

    /**
     * UNIFI√â : G√®re la durabilit√© de toutes les pioches (l√©gendaires ET normales)
     */
    private void handlePickaxeDurability(Player player, BlockBreakEvent event) {
        ItemStack tool = player.getInventory().getItemInMainHand();

        // V√©rifier si c'est une pioche
        if (!tool.getType().name().contains("PICKAXE")) {
            return;
        }

        // DISTINCTION : Traitement diff√©rent selon le type de pioche
        if (plugin.getPickaxeManager().isLegendaryPickaxe(tool)) {
            handleLegendaryPickaxeDurability(player, tool, event);
        }
    }

    /**
     * G√®re sp√©cifiquement la durabilit√© des pioches l√©gendaires
     */
    private void handleLegendaryPickaxeDurability(Player player, ItemStack tool, BlockBreakEvent event) {
        PlayerData playerData = plugin.getPlayerDataManager().getPlayerData(player.getUniqueId());
        int durabilityLevel = playerData.getEnchantmentLevel("durability");

        // SOLIDIT√â : Chance d'√©viter la perte de durabilit√©
        if (durabilityLevel > 0) {
            double preservationChance = Math.min(95.0, durabilityLevel * 5.0);
            if (random.nextDouble() * 100 < preservationChance) {
                return; // La durabilit√© est pr√©serv√©e
            }
        }

        // APPLIQUER DOMMAGE : Seulement pour les pioches l√©gendaires
        if (tool.getItemMeta() instanceof Damageable) {
            Damageable meta = (Damageable) tool.getItemMeta();
            short maxDurability = tool.getType().getMaxDurability();
            short currentDurability = (short) meta.getDamage();

            // CORRECTION CRITIQUE: Emp√™cher la pioche de d√©passer maxDurability - 1
            if (currentDurability >= maxDurability - 1) {
                plugin.getPluginLogger().debug("Pioche l√©gendaire de " + player.getName() + " d√©j√† au maximum de casse (" + currentDurability + "/" + maxDurability + ")");

                // S'assurer qu'elle reste √† maxDurability - 1 (√©tat "cass√©e" mais pas d√©truite)
                if (currentDurability > maxDurability - 1) {
                    meta.setDamage(maxDurability - 1);
                    tool.setItemMeta(meta);
                }

                // V√©rifier l'√©tat mais ne pas augmenter les d√©g√¢ts
                checkLegendaryPickaxeState(player, tool, (short)(maxDurability - 1), maxDurability);
                return;
            }

            // Augmente les d√©g√¢ts de 1 point SEULEMENT si pas encore cass√©e
            short newDurability = (short) Math.min(currentDurability + 1, maxDurability - 1);
            meta.setDamage(newDurability);
            tool.setItemMeta(meta);

            plugin.getPluginLogger().debug("Durabilit√© pioche l√©gendaire " + player.getName() + ": " + currentDurability + " -> " + newDurability + " (max: " + maxDurability + ")");

            // V√©rifier l'√©tat apr√®s modification
            checkLegendaryPickaxeState(player, tool, newDurability, maxDurability);
        }
    }

    /**
     * V√©rifie l'√©tat de la pioche l√©gendaire et affiche les notifications appropri√©es
     */
    private void checkLegendaryPickaxeState(Player player, ItemStack pickaxe, short currentDurability, short maxDurability) {
        double durabilityPercent = 1.0 - ((double) currentDurability / maxDurability);

        // PIOCHE CASS√âE (100% utilis√©e)
        if (currentDurability >= maxDurability - 1) {
            if (!isPickaxeBroken(player)) {
                activateBrokenPickaxeMode(player);

                // Message sp√©cial pour pioche cass√©e (une seule fois)
                if (!player.hasMetadata("durability_notif_broken")) {
                    TextComponent message = new TextComponent("¬ßcüíÄ PIOCHE CASS√âE! Tous enchantements d√©sactiv√©s! ¬ße[R√âPARER IMM√âDIATEMENT]");
                    message.setClickEvent(new ClickEvent(ClickEvent.Action.RUN_COMMAND, "/repair"));
                    message.setHoverEvent(new HoverEvent(HoverEvent.Action.SHOW_TEXT, new Text("¬ßcR√©paration critique requise!")));
                    player.spigot().sendMessage(message);

                    player.setMetadata("durability_notif_broken", new FixedMetadataValue(plugin, true));
                }
            }
        } else {
            // D√©sactive le mode "pioche cass√©e" si il √©tait actif
            if (isPickaxeBroken(player)) {
                deactivateBrokenPickaxeMode(player);
                player.removeMetadata("durability_notif_broken", plugin);
            }

            // NOTIFICATIONS PAR SEUILS (une seule fois par niveau)
            if (durabilityPercent <= 0.10) { // Moins de 10% restant
                if (!player.hasMetadata("durability_notif_10")) {
                    TextComponent message = new TextComponent("¬ß6‚ö†Ô∏è Votre pioche est tr√®s endommag√©e ! ¬ße[CLIQUEZ POUR R√âPARER]");
                    message.setClickEvent(new ClickEvent(ClickEvent.Action.RUN_COMMAND, "/repair"));
                    message.setHoverEvent(new HoverEvent(HoverEvent.Action.SHOW_TEXT, new Text("¬ßaOuvrir le menu de r√©paration")));
                    player.spigot().sendMessage(message);

                    player.setMetadata("durability_notif_10", new FixedMetadataValue(plugin, true));
                }
            } else if (durabilityPercent <= 0.25) { // Moins de 25% restant
                if (!player.hasMetadata("durability_notif_25")) {
                    TextComponent message = new TextComponent("¬ße‚ö†Ô∏è Votre pioche commence √† √™tre endommag√©e. ¬ße[R√âPARER]");
                    message.setClickEvent(new ClickEvent(ClickEvent.Action.RUN_COMMAND, "/repair"));
                    message.setHoverEvent(new HoverEvent(HoverEvent.Action.SHOW_TEXT, new Text("¬ßaOuvrir le menu de r√©paration")));
                    player.spigot().sendMessage(message);

                    player.setMetadata("durability_notif_25", new FixedMetadataValue(plugin, true));
                }
            }
        }
    }

    /**
     * NOUVEAU : Incr√©mente le compteur de blocs et v√©rifie s'il faut envoyer une notification de durabilit√©
     */
    private void incrementBlockCountAndCheckDurabilityNotification(Player player, ItemStack pickaxe) {
        UUID playerId = player.getUniqueId();

        // Incr√©mente le compteur de blocs cass√©s
        int currentCount = playerBlocksMinedCount.getOrDefault(playerId, 0) + 1;
        playerBlocksMinedCount.put(playerId, currentCount);

        // V√©rifie la durabilit√© de la pioche
        short currentDurability = (short) ((Damageable) pickaxe.getItemMeta()).getDamage();
        short maxDurability = pickaxe.getType().getMaxDurability();
        double durabilityPercent = 1.0 - ((double) currentDurability / maxDurability);

        // Seulement envoyer des notifications quand la durabilit√© est < 25%
        if (durabilityPercent > 0.25) {
            return;
        }

        // Calcule la fr√©quence bas√©e sur le niveau de durabilit√©
        int notificationFrequency = calculateNotificationFrequency(durabilityPercent);

        // V√©rifie s'il faut envoyer une notification
        if (currentCount % notificationFrequency == 0) {
            String notificationMessage = createDurabilityNotificationMessage(durabilityPercent);

            // Envoie une notification temporaire via le NotificationManager (dur√©e: 2 secondes)
            plugin.getNotificationManager().sendTemporaryDurabilityNotification(player, notificationMessage, 2000);

            plugin.getPluginLogger().debug("Notification de durabilit√© envoy√©e √† " + player.getName() +
                    " apr√®s " + currentCount + " blocs (fr√©quence: " + notificationFrequency + ")");
        }
    }

    /**
     * NOUVEAU : Calcule la fr√©quence des notifications bas√©e sur le niveau de durabilit√©
     */
    private int calculateNotificationFrequency(double durabilityPercent) {
        if (durabilityPercent <= 0.05) { // Moins de 5% - tr√®s critique
            return 10; // Toutes les 10 blocs
        } else if (durabilityPercent <= 0.10) { // Moins de 10% - critique
            return 20; // Toutes les 20 blocs
        } else if (durabilityPercent <= 0.15) { // Moins de 15% - urgent
            return 30; // Toutes les 30 blocs
        } else { // 15-25% - attention
            return 50; // Toutes les 50 blocs (fr√©quence de base)
        }
    }

    /**
     * NOUVEAU : Cr√©e le message de notification de durabilit√©
     */
    private String createDurabilityNotificationMessage(double durabilityPercent) {
        String percentageStr = String.format("%.1f%%", durabilityPercent * 100);

        if (durabilityPercent <= 0.05) { // Moins de 5% - tr√®s critique
            return "¬ßcüíÄ URGENT! Pioche CRITIQUE! R√©parez MAINTENANT! (" + percentageStr + ")";
        } else if (durabilityPercent <= 0.10) { // Moins de 10% - critique
            return "¬ßc‚ö†Ô∏è CRITIQUE! Pioche tr√®s endommag√©e! (" + percentageStr + ")";
        } else if (durabilityPercent <= 0.15) { // Moins de 15% - urgent
            return "¬ß6‚ö†Ô∏è URGENT! R√©parez votre pioche! (" + percentageStr + ")";
        } else { // 15-25% - attention
            return "¬ße‚ö†Ô∏è Attention: Pioche endommag√©e (" + percentageStr + ")";
        }
    }

    /**
     * NOUVEAU : R√©initialise le compteur de blocs pour un joueur (utilis√© lors de la r√©paration)
     */
    public void resetBlockCountForPlayer(Player player) {
        playerBlocksMinedCount.remove(player.getUniqueId());
        plugin.getPluginLogger().debug("Compteur de blocs r√©initialis√© pour " + player.getName());
    }

    // ================================
    // SECTION 2: LOGIQUE MINAGE
    // ================================

    /**
     * Traite le minage dans une mine avec pioche l√©gendaire
     */
    private void processMiningInMine(Player player, Location location, Material material, String mineName) {
        plugin.getPluginLogger().debug("Traitement minage dans mine: " + mineName);

        PlayerData playerData = plugin.getPlayerDataManager().getPlayerData(player.getUniqueId());

        // Met √† jour l'activit√© de minage pour l'ActionBar
        playerData.updateMiningActivity();

        // Ajoute le bloc directement √† l'inventaire du joueur
        addBlockToInventory(player, material);

        // R√©cup√®re les gains de base
        BlockValueData baseValue = plugin.getConfigManager().getBlockValue(material);

        // Notifie les gains de base via le nouveau syst√®me
        if (baseValue.getCoins() > 0 || baseValue.getTokens() > 0 || baseValue.getExperience() > 0) {
            plugin.getNotificationManager().queueRegularGains(player,
                    baseValue.getCoins(), baseValue.getTokens(), baseValue.getExperience());
        }

        // Traite ce bloc MIN√â directement par le joueur (avec Greeds, enchants sp√©ciaux, etc.)
        plugin.getEnchantmentManager().processBlockMined(player, location, material, mineName);
    }

    /**
     * Traite le minage hors mine avec pioche l√©gendaire (restrictions appliqu√©es)
     */
    private void processMiningOutsideMine(Player player, Location location, Material material) {
        plugin.getPluginLogger().debug("Traitement minage hors mine (restrictions)");

        PlayerData playerData = plugin.getPlayerDataManager().getPlayerData(player.getUniqueId());

        // Met √† jour l'activit√© de minage pour l'ActionBar
        playerData.updateMiningActivity();

        // Avertissement si premi√®re fois hors mine
        if (!player.hasMetadata("outside_mine_warning_shown")) {
            player.sendMessage("¬ßc‚ö†Ô∏è Hors mine: seuls efficacit√©, solidit√© et mobilit√© actifs!");
            player.setMetadata("outside_mine_warning_shown", new FixedMetadataValue(plugin, true));
        }

        // Traite le bloc MIN√â hors mine (restrictions)
        plugin.getEnchantmentManager().processBlockMinedOutsideMine(player, material);
    }

    // ================================
    // SECTION 3: UTILITAIRES
    // ================================

    /**
     * Ajoute un bloc √† l'inventaire du joueur
     */
    private void addBlockToInventory(Player player, Material material) {
        ItemStack blockStack = new ItemStack(material, 1);
        player.getInventory().addItem(blockStack);
    }

    /**
     * Trouve la pioche l√©gendaire du joueur
     */
    private ItemStack getPlayerLegendaryPickaxe(Player player) {
        return plugin.getPickaxeManager().findPlayerPickaxe(player);
    }

    /**
     * Post-traitement apr√®s utilisation de la pioche l√©gendaire
     */
    private void postProcessLegendaryPickaxe(Player player, ItemStack pickaxe) {
        plugin.getPluginLogger().debug("Post-traitement pioche l√©gendaire pour " + player.getName());

        // 1. Met √† jour la pioche avec ses enchantements
        plugin.getPickaxeManager().updatePlayerPickaxe(player);

        // 2. S'assure que la pioche reste au bon slot
        plugin.getPickaxeManager().enforcePickaxeSlot(player);

        // 3. Marque les donn√©es comme modifi√©es
        plugin.getPlayerDataManager().markDirty(player.getUniqueId());

        plugin.getPluginLogger().debug("Post-traitement pioche termin√© pour " + player.getName());
    }

    /**
     * Active le mode "pioche cass√©e"
     */
    private void activateBrokenPickaxeMode(Player player) {
        player.setMetadata("pickaxe_broken", new FixedMetadataValue(plugin, true));
        player.setMetadata("pickaxe_just_broken", new FixedMetadataValue(plugin, System.currentTimeMillis()));
        plugin.getPluginLogger().debug("Mode pioche cass√©e activ√© pour " + player.getName());
    }

    /**
     * D√©sactive le mode "pioche cass√©e"
     */
    private void deactivateBrokenPickaxeMode(Player player) {
        player.removeMetadata("pickaxe_broken", plugin);
        player.setMetadata("pickaxe_just_repaired", new FixedMetadataValue(plugin, System.currentTimeMillis()));
        plugin.getPluginLogger().debug("Mode pioche cass√©e d√©sactiv√© pour " + player.getName());
    }

    /**
     * V√©rifie si la pioche du joueur est cass√©e
     */
    public static boolean isPlayerPickaxeBroken(Player player) {
        return player.hasMetadata("pickaxe_broken");
    }

    /**
     * Retourne le multiplicateur de p√©nalit√© (90% de malus = 10% d'efficacit√©)
     */
    public static double getPickaxePenaltyMultiplier(Player player) {
        return isPlayerPickaxeBroken(player) ? 0.10 : 1.0;
    }

    /**
     * V√©rifie si la pioche est cass√©e (legacy pour compatibilit√©)
     */
    private boolean isPickaxeBroken(Player player) {
        return isPlayerPickaxeBroken(player);
    }

    /**
     * Nettoie les donn√©es d'un joueur √† la d√©connexion
     */
    public void cleanupPlayerData(UUID playerId) {
        playerBlocksMinedCount.remove(playerId);
    }

    @EventHandler
    public void onBlockPlace(BlockPlaceEvent event) {
        // Emp√™che de placer des blocs dans les mines
        String mineName = plugin.getConfigManager().getPlayerMine(event.getBlock().getLocation());
        if (mineName != null) {
            event.setCancelled(true);
            event.getPlayer().sendMessage("¬ßc‚ùå Impossible de placer des blocs dans une mine!");
        }
    }
}