package fr.prisoncore.prisoncore.prisonTycoon.GUI;

import fr.prisoncore.prisoncore.prisonTycoon.PrisonTycoon;
import fr.prisoncore.prisoncore.prisonTycoon.data.PlayerData;
import fr.prisoncore.prisoncore.prisonTycoon.enchantments.CustomEnchantment;
import fr.prisoncore.prisoncore.prisonTycoon.utils.NumberFormatter;
import org.bukkit.Bukkit;
import org.bukkit.Material;
import org.bukkit.Sound;
import org.bukkit.entity.Player;
import org.bukkit.event.inventory.ClickType;
import org.bukkit.inventory.Inventory;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.ItemMeta;
import org.bukkit.inventory.meta.SkullMeta;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

/**
 * Menu d'am√©lioration d'un enchantement
 * CORRIG√â : Boutons d'am√©lioration FIXES (ne s'adaptent plus au max possible)
 */
public class EnchantmentUpgradeGUI {

    private final PrisonTycoon plugin;

    public EnchantmentUpgradeGUI(PrisonTycoon plugin) {
        this.plugin = plugin;
    }

    /**
     * Ouvre le menu d'am√©lioration d'un enchantement
     */
    public void openEnchantmentUpgradeMenu(Player player, String enchantmentName) {
        CustomEnchantment enchantment = plugin.getEnchantmentManager().getEnchantment(enchantmentName);
        if (enchantment == null) return;

        String title = "¬ß6üîß ¬ßl" + enchantment.getDisplayName() + " ¬ß6üîß";
        Inventory gui = Bukkit.createInventory(null, 27, title);

        // Remplissage d√©coratif
        fillBorders(gui);

        // T√™te du joueur
        gui.setItem(4, createPlayerHead(player));

        // Boutons d'am√©lioration FIXES
        createFixedUpgradeButtons(gui, enchantment, player);

        gui.setItem(18, createBackButton());

        if (plugin.getEnchantmentManager().canUseAutoUpgrade(player)) {
            gui.setItem(26, createAutoUpgradeButton(enchantment, player));
        } else {
            gui.setItem(26, createNoPermissionAutoUpgradeItem());
        }

        player.openInventory(gui);
        player.playSound(player.getLocation(), Sound.UI_BUTTON_CLICK, 0.5f, 1.4f);
    }

    /**
     * G√®re les clics dans le menu d'am√©lioration
     */
    public void handleUpgradeMenuClick(Player player, int slot, ItemStack item, ClickType clickType, String title) {
        if (slot == 18) { // Bouton retour
            String enchantmentName = extractEnchantmentNameFromTitle(title);
            CustomEnchantment enchantment = plugin.getEnchantmentManager().getEnchantment(enchantmentName);
            if (enchantment != null) {
                plugin.getCategoryMenuGUI().openCategoryMenu(player, enchantment.getCategory());
            }
            return;
        }

        if (slot == 26) { // Auto-upgrade
            if (plugin.getEnchantmentManager().canUseAutoUpgrade(player)) {
                toggleAutoUpgrade(player, title);
            } else {
                player.sendMessage("¬ßc‚ùå Vous n'avez pas la permission d'utiliser l'auto-am√©lioration!");
                player.sendMessage("¬ß7Permissions requises: ¬ßespecialmine.vip ¬ß7ou ¬ßespecialmine.admin");
                player.playSound(player.getLocation(), Sound.ENTITY_VILLAGER_NO, 1.0f, 1.0f);
            }
            return;
        }

        if (slot == 22) { // MAX possible
            String enchantmentName = extractEnchantmentNameFromTitle(title);
            upgradeToMax(player, enchantmentName);
            return;
        }

        // Boutons d'am√©lioration fixes
        if (item != null && item.hasItemMeta()) {
            String displayName = item.getItemMeta().getDisplayName();
            String enchantmentName = extractEnchantmentNameFromTitle(title);

            if (displayName.contains("+1")) upgradeEnchantment(player, enchantmentName, 1);
            else if (displayName.contains("+5")) upgradeEnchantment(player, enchantmentName, 5);
            else if (displayName.contains("+10")) upgradeEnchantment(player, enchantmentName, 10);
            else if (displayName.contains("+25")) upgradeEnchantment(player, enchantmentName, 25);
            else if (displayName.contains("+100")) upgradeEnchantment(player, enchantmentName, 100);
            else if (displayName.contains("+250")) upgradeEnchantment(player, enchantmentName, 250);
            else if (displayName.contains("+500")) upgradeEnchantment(player, enchantmentName, 500);
        }
    }

    /**
     * CORRIG√â : Cr√©e les boutons d'am√©lioration FIXES (ne s'adaptent pas)
     */
    private void createFixedUpgradeButtons(Inventory gui, CustomEnchantment enchantment, Player player) {
        PlayerData playerData = plugin.getPlayerDataManager().getPlayerData(player.getUniqueId());
        int currentLevel = playerData.getEnchantmentLevel(enchantment.getName());

        int[] upgradeAmounts = {1, 5, 10, 25, 100, 250, 500};
        int[] slots = {10, 11, 12, 13, 14, 15, 16};

        for (int i = 0; i < upgradeAmounts.length; i++) {
            int amount = upgradeAmounts[i];

            // CORRECTION : Toujours afficher le bouton, mais en rouge si impossible
            gui.setItem(slots[i], createFixedUpgradeButton(enchantment, player, amount));
        }

        // MAX au milieu derni√®re ligne (slot 23)
        if (currentLevel < enchantment.getMaxLevel()) {
            gui.setItem(23, createMaxUpgradeButton(enchantment, player));
        }
    }

    /**
     * NOUVEAU : Cr√©e un bouton d'am√©lioration FIXE qui ne s'adapte jamais
     */
    private ItemStack createFixedUpgradeButton(CustomEnchantment enchantment, Player player, int requestedLevels) {
        PlayerData playerData = plugin.getPlayerDataManager().getPlayerData(player.getUniqueId());
        int currentLevel = playerData.getEnchantmentLevel(enchantment.getName());
        long availableTokens = playerData.getTokens();

        // V√©rifie si on peut acheter exactement ce nombre de niveaux
        boolean canAffordExact = canAffordExactLevels(enchantment, currentLevel, availableTokens, requestedLevels);
        boolean levelMaxReached = currentLevel + requestedLevels > enchantment.getMaxLevel();

        Material material;
        String color;

        if (levelMaxReached) {
            material = Material.BARRIER;
            color = "¬ßc";
        } else if (canAffordExact) {
            material = Material.GREEN_CONCRETE;
            color = "¬ßa";
        } else {
            material = Material.RED_CONCRETE;
            color = "¬ßc";
        }

        ItemStack item = new ItemStack(material);
        ItemMeta meta = item.getItemMeta();

        meta.setDisplayName(color + "+" + requestedLevels + " Niveau" + (requestedLevels > 1 ? "x" : ""));

        List<String> lore = new ArrayList<>();
        lore.add("¬ß8‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨");

        if (levelMaxReached) {
            // D√©passerait le niveau maximum
            lore.add("¬ßc‚ùå ¬ßlNIVEAU MAXIMUM D√âPASS√â");
            lore.add("¬ß7‚ñ∏ Niveaux demand√©s: ¬ßc+" + requestedLevels);
            lore.add("¬ß7‚ñ∏ Niveau actuel: ¬ße" + currentLevel);
            lore.add("¬ß7‚ñ∏ Niveau maximum: ¬ße" + enchantment.getMaxLevel());
            lore.add("¬ß7‚ñ∏ Niveaux possibles: ¬ße" + Math.max(0, enchantment.getMaxLevel() - currentLevel));
            lore.add("");
            lore.add("¬ß7R√©duisez le nombre de niveaux demand√©s!");

        } else if (canAffordExact) {
            // Peut se payer exactement
            long totalCost = calculateExactCost(enchantment, currentLevel, requestedLevels);

            lore.add("¬ßa‚úÖ ¬ßlAM√âLIORATION POSSIBLE");
            lore.add("¬ß7‚ñ∏ Niveaux √† acheter: ¬ßa+" + requestedLevels);
            lore.add("¬ß7‚ñ∏ Co√ªt total: ¬ß6" + NumberFormatter.format(totalCost) + " tokens");
            lore.add("¬ß7‚ñ∏ Tokens disponibles: ¬ßa" + NumberFormatter.format(availableTokens));
            lore.add("¬ß7‚ñ∏ Tokens restants: ¬ße" + NumberFormatter.format(availableTokens - totalCost));
            lore.add("");

            // Section progression
            lore.add("¬ßeüìà ¬ßlPROGRESSION");
            lore.add("¬ß7‚ñ∏ Niveau avant: ¬ße" + currentLevel);
            lore.add("¬ß7‚ñ∏ Niveau apr√®s: ¬ßa" + (currentLevel + requestedLevels));
            lore.add("");

            // Effets avant/apr√®s
            lore.add("¬ßbüîÆ ¬ßlEFFETS AVANT ‚Üí APR√àS");
            addEffectComparison(lore, enchantment, currentLevel, currentLevel + requestedLevels);
            lore.add("");

            lore.add("¬ßa‚ú® Cliquez pour am√©liorer!");

        } else {
            // Ne peut pas se payer
            long totalCost = calculateExactCost(enchantment, currentLevel, requestedLevels);

            lore.add("¬ßc‚ùå ¬ßlTOKENS INSUFFISANTS");
            lore.add("¬ß7‚ñ∏ Niveaux demand√©s: ¬ßc+" + requestedLevels);
            lore.add("¬ß7‚ñ∏ Co√ªt total: ¬ß6" + NumberFormatter.format(totalCost));
            lore.add("¬ß7‚ñ∏ Tokens disponibles: ¬ßc" + NumberFormatter.format(availableTokens));
            lore.add("¬ß7‚ñ∏ Tokens manquants: ¬ßc" + NumberFormatter.format(totalCost - availableTokens));

            // Progression vers cet objectif
            double progressPercent = (double) availableTokens / totalCost * 100;
            lore.add("¬ß7‚ñ∏ Progression: ¬ße" + String.format("%.1f%%", progressPercent));
            lore.add("");

            // Calcule combien on pourrait acheter avec les tokens actuels
            int maxAffordable = calculateMaxAffordableUpgrades(enchantment, currentLevel, availableTokens);
            if (maxAffordable > 0) {
                lore.add("¬ßeüí° ¬ßlALTERNATIVE POSSIBLE");
                lore.add("¬ß7‚ñ∏ Niveaux abordables: ¬ßa+" + maxAffordable);
                lore.add("¬ß7‚ñ∏ Utilisez un bouton plus petit ou MAX");
                lore.add("");
            }

            // Ajoute les effets m√™me si on ne peut pas se payer l'am√©lioration
            lore.add("¬ßbüîÆ ¬ßlEFFETS SI ACHET√â");
            addEffectComparison(lore, enchantment, currentLevel, currentLevel + requestedLevels);
            lore.add("");

            lore.add("¬ß7Continuez √† miner pour obtenir plus de tokens!");
        }

        lore.add("¬ß8‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨");

        meta.setLore(lore);
        item.setItemMeta(meta);

        return item;
    }

    /**
     * NOUVEAU : V√©rifie si on peut se payer exactement le nombre de niveaux demand√©s
     */
    private boolean canAffordExactLevels(CustomEnchantment enchantment, int currentLevel, long availableTokens, int requestedLevels) {
        if (currentLevel + requestedLevels > enchantment.getMaxLevel()) {
            return false;
        }

        long totalCost = calculateExactCost(enchantment, currentLevel, requestedLevels);
        return availableTokens >= totalCost;
    }

    /**
     * NOUVEAU : Calcule le co√ªt exact pour un nombre de niveaux donn√©
     */
    private long calculateExactCost(CustomEnchantment enchantment, int currentLevel, int requestedLevels) {
        long totalCost = 0;
        for (int i = 1; i <= requestedLevels; i++) {
            totalCost += enchantment.getUpgradeCost(currentLevel + i);
        }
        return totalCost;
    }

    /**
     * Ajoute une comparaison des effets avant/apr√®s POUR TOUS LES ENCHANTS
     */
    private void addEffectComparison(List<String> lore, CustomEnchantment enchantment, int fromLevel, int toLevel) {
        switch (enchantment.getName()) {
            case "token_greed" -> {
                long fromTokens = fromLevel * 5;
                long toTokens = toLevel * 5;
                lore.add("¬ß7‚ñ∏ Tokens/Greed: ¬ße" + NumberFormatter.format(fromTokens) +
                        " ¬ß7‚Üí ¬ßa" + NumberFormatter.format(toTokens));
            }
            case "exp_greed" -> {
                long fromExp = fromLevel * 50;
                long toExp = toLevel * 50;
                lore.add("¬ß7‚ñ∏ XP/Greed: ¬ße" + NumberFormatter.format(fromExp) +
                        " ¬ß7‚Üí ¬ßa" + NumberFormatter.format(toExp));
            }
            case "money_greed" -> {
                long fromCoins = fromLevel * 10;
                long toCoins = toLevel * 10;
                lore.add("¬ß7‚ñ∏ Coins/Greed: ¬ße" + NumberFormatter.format(fromCoins) +
                        " ¬ß7‚Üí ¬ßa" + NumberFormatter.format(toCoins));
            }
            case "key_greed" -> {
                double fromChance = fromLevel * 1.0;
                double toChance = toLevel * 1.0;
                lore.add("¬ß7‚ñ∏ Chance cl√©: ¬ße" + String.format("%.1f%%", fromChance) +
                        " ¬ß7‚Üí ¬ßa" + String.format("%.1f%%", toChance));
            }
            case "abundance" -> {
                double fromChance = fromLevel * 0.0001;
                double toChance = toLevel * 0.0001;
                lore.add("¬ß7‚ñ∏ Chance activation: ¬ße" + String.format("%.4f%%", fromChance) +
                        " ¬ß7‚Üí ¬ßa" + String.format("%.4f%%", toChance));
            }
            case "combustion" -> {
                int fromGain = Math.max(1, fromLevel / 10);
                int toGain = Math.max(1, toLevel / 10);
                lore.add("¬ß7‚ñ∏ Gain/bloc: ¬ße+" + fromGain + " ¬ß7‚Üí ¬ßa+" + toGain + " combustion");
            }
            case "pet_xp" -> {
                long fromBonus = fromLevel * 10;
                long toBonus = toLevel * 10;
                lore.add("¬ß7‚ñ∏ Bonus Pet XP: ¬ße+" + NumberFormatter.format(fromBonus) +
                        " ¬ß7‚Üí ¬ßa+" + NumberFormatter.format(toBonus));
            }
            case "efficiency" -> {
                lore.add("¬ß7‚ñ∏ Vitesse minage: ¬ßeFast+" + fromLevel + " ¬ß7‚Üí ¬ßaFast+" + toLevel);
            }
            case "fortune" -> {
                double fromMult = 1.0 + (fromLevel * 0.2);
                double toMult = 1.0 + (toLevel * 0.2);
                lore.add("¬ß7‚ñ∏ Multiplicateur: ¬ßex" + String.format("%.1f", fromMult) +
                        " ¬ß7‚Üí ¬ßax" + String.format("%.1f", toMult));
            }
            case "durability" -> {
                double fromBonus = fromLevel * 10;
                double toBonus = toLevel * 10;
                lore.add("¬ß7‚ñ∏ Durabilit√©: ¬ße+" + String.format("%.0f%%", fromBonus) +
                        " ¬ß7‚Üí ¬ßa+" + String.format("%.0f%%", toBonus));
            }
            case "night_vision" -> {
                if (fromLevel == 0 && toLevel == 1) {
                    lore.add("¬ß7‚ñ∏ Vision nocturne: ¬ßcInactive ¬ß7‚Üí ¬ßaActive");
                } else {
                    lore.add("¬ß7‚ñ∏ Vision nocturne: ¬ßaActive");
                }
            }
            case "speed" -> {
                lore.add("¬ß7‚ñ∏ Vitesse: ¬ßeSpeed " + fromLevel + " ¬ß7‚Üí ¬ßaSpeed " + toLevel);
            }
            case "haste" -> {
                lore.add("¬ß7‚ñ∏ Rapidit√©: ¬ßeHaste " + fromLevel + " ¬ß7‚Üí ¬ßaHaste " + toLevel);
            }
            case "jump_boost" -> {
                lore.add("¬ß7‚ñ∏ Saut: ¬ßeJump " + fromLevel + " ¬ß7‚Üí ¬ßaJump " + toLevel);
            }
            case "escalator" -> {
                if (fromLevel == 0 && toLevel == 1) {
                    lore.add("¬ß7‚ñ∏ T√©l√©portation: ¬ßcInactive ¬ß7‚Üí ¬ßaActive");
                } else {
                    lore.add("¬ß7‚ñ∏ T√©l√©portation: ¬ßaActive");
                }
            }
            case "luck" -> {
                double fromBonus = fromLevel * 0.2;
                double toBonus = toLevel * 0.2;
                lore.add("¬ß7‚ñ∏ Bonus chance: ¬ße+" + String.format("%.1f%%", fromBonus) +
                        " ¬ß7‚Üí ¬ßa+" + String.format("%.1f%%", toBonus));
            }
            case "laser" -> {
                double fromChance = fromLevel * 0.002;
                double toChance = toLevel * 0.002;
                lore.add("¬ß7‚ñ∏ Chance laser: ¬ße" + String.format("%.3f%%", fromChance) +
                        " ¬ß7‚Üí ¬ßa" + String.format("%.3f%%", toChance));
            }
            case "explosion" -> {
                double fromChance = fromLevel * 0.05;
                double toChance = toLevel * 0.05;
                lore.add("¬ß7‚ñ∏ Chance explosion: ¬ße" + String.format("%.2f%%", fromChance) +
                        " ¬ß7‚Üí ¬ßa" + String.format("%.2f%%", toChance));
            }
            default -> {
                lore.add("¬ß7‚ñ∏ Am√©lioration de ¬ß2+" + (toLevel - fromLevel) + " niveau" +
                        (toLevel - fromLevel > 1 ? "x" : ""));
            }
        }
    }

    /**
     * Cr√©e le bouton MAX avec la m√™me logique am√©lior√©e
     */
    private ItemStack createMaxUpgradeButton(CustomEnchantment enchantment, Player player) {
        PlayerData playerData = plugin.getPlayerDataManager().getPlayerData(player.getUniqueId());
        int currentLevel = playerData.getEnchantmentLevel(enchantment.getName());
        long availableTokens = playerData.getTokens();

        int maxAffordableLevels = calculateMaxAffordableUpgrades(enchantment, currentLevel, availableTokens);
        long totalCost = 0;

        if (maxAffordableLevels > 0) {
            totalCost = calculateExactCost(enchantment, currentLevel, maxAffordableLevels);
        }

        boolean canUpgrade = maxAffordableLevels > 0;
        ItemStack item = new ItemStack(canUpgrade ? Material.DIAMOND : Material.BARRIER);
        ItemMeta meta = item.getItemMeta();

        meta.setDisplayName((canUpgrade ? "¬ß6" : "¬ßc") + "MAX Possible");

        List<String> lore = new ArrayList<>();
        lore.add("¬ß8‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨");

        if (canUpgrade) {
            lore.add("¬ß6üíé ¬ßlAM√âLIORATION MAXIMALE");
            lore.add("¬ß7‚ñ∏ Niveaux disponibles: ¬ßa+" + maxAffordableLevels);
            lore.add("¬ß7‚ñ∏ Co√ªt total: ¬ß6" + NumberFormatter.format(totalCost) + " tokens");
            lore.add("¬ß7‚ñ∏ Niveau avant: ¬ße" + currentLevel);
            lore.add("¬ß7‚ñ∏ Niveau apr√®s: ¬ßa" + (currentLevel + maxAffordableLevels));
            lore.add("");

            // Effets max
            lore.add("¬ßbüîÆ ¬ßlEFFETS MAXIMUM POSSIBLES");
            addEffectComparison(lore, enchantment, currentLevel, currentLevel + maxAffordableLevels);
            lore.add("");

            lore.add("¬ße‚ú® Cliquez pour am√©liorer au maximum!");
        } else {
            lore.add("¬ßc‚ùå ¬ßlAM√âLIORATION IMPOSSIBLE");
            if (currentLevel >= enchantment.getMaxLevel()) {
                lore.add("¬ß7‚ñ∏ ¬ßcNiveau maximum d√©j√† atteint!");
            } else {
                long nextCost = enchantment.getUpgradeCost(currentLevel + 1);
                lore.add("¬ß7‚ñ∏ ¬ßcPas assez de tokens");
                lore.add("¬ß7‚ñ∏ Co√ªt prochain niveau: ¬ß6" + NumberFormatter.format(nextCost));
                lore.add("¬ß7‚ñ∏ Tokens disponibles: ¬ßc" + NumberFormatter.format(availableTokens));
                lore.add("¬ß7‚ñ∏ Tokens manquants: ¬ßc" + NumberFormatter.format(nextCost - availableTokens));
                lore.add("");

                // Ajoute les effets m√™me si impossible
                lore.add("¬ßbüîÆ ¬ßlEFFETS SI ACHET√â");
                addEffectComparison(lore, enchantment, currentLevel, currentLevel + 1);
            }
        }

        lore.add("¬ß8‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨");

        meta.setLore(lore);
        item.setItemMeta(meta);

        return item;
    }

    /**
     * Calcule le nombre maximum de niveaux abordables
     */
    private int calculateMaxAffordableUpgrades(CustomEnchantment enchantment, int currentLevel, long availableTokens) {
        if (currentLevel >= enchantment.getMaxLevel()) {
            return 0;
        }

        int maxLevels = 0;
        long remainingTokens = availableTokens;

        for (int level = currentLevel + 1; level <= enchantment.getMaxLevel() && remainingTokens > 0; level++) {
            long cost = enchantment.getUpgradeCost(level);
            if (remainingTokens >= cost) {
                remainingTokens -= cost;
                maxLevels++;
            } else {
                break;
            }
        }

        return maxLevels;
    }

    /**
     * Cr√©e le bouton auto-upgrade avec gestion des permissions
     */
    private ItemStack createAutoUpgradeButton(CustomEnchantment enchantment, Player player) {
        PlayerData playerData = plugin.getPlayerDataManager().getPlayerData(player.getUniqueId());
        boolean autoEnabled = playerData.isAutoUpgradeEnabled(enchantment.getName());

        Material material = autoEnabled ? Material.LIME_DYE : Material.RED_DYE;
        String color = autoEnabled ? "¬ßa" : "¬ßc";
        String icon = autoEnabled ? "‚úÖ" : "‚ùå";

        ItemStack item = new ItemStack(material);
        ItemMeta meta = item.getItemMeta();

        meta.setDisplayName(color + icon + " ¬ßlAuto-am√©lioration");

        List<String> lore = new ArrayList<>();
        lore.add("¬ß8‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨");
        lore.add("¬ß7Am√©liore automatiquement cet enchantement");
        lore.add("¬ß7d√®s que vous avez assez de tokens.");
        lore.add("¬ß7V√©rifie toutes les 10 secondes.");
        lore.add("¬ß8‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨");
        lore.add("");

        lore.add("¬ßeüìä ¬ßlSTATUT");
        lore.add("¬ß7‚ñ∏ Auto-am√©lioration: " + (autoEnabled ? "¬ßaActiv√©e" : "¬ßcD√©sactiv√©e"));

        // V√©rifie s'il y a d√©j√† un autre auto-enchant actif
        Set<String> currentAutoUpgrades = playerData.getAutoUpgradeEnabled();
        boolean hasOtherAutoUpgrade = currentAutoUpgrades.stream()
                .anyMatch(name -> !name.equals(enchantment.getName()));

        if (hasOtherAutoUpgrade && !autoEnabled) {
            String activeAutoUpgrade = currentAutoUpgrades.iterator().next();
            CustomEnchantment activeEnchant = plugin.getEnchantmentManager().getEnchantment(activeAutoUpgrade);
            String activeName = activeEnchant != null ? activeEnchant.getDisplayName() : activeAutoUpgrade;

            lore.add("¬ß7‚ñ∏ Autre auto-am√©lioration: ¬ße" + activeName);
            lore.add("¬ß7‚ñ∏ ¬ßcActiver ici d√©sactivera l'autre");
        } else if (autoEnabled) {
            lore.add("¬ß7‚ñ∏ ¬ßaCet enchantement s'am√©liorera automatiquement");
        }

        lore.add("");
        lore.add("¬ß8‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨");
        lore.add("¬ße‚ú® Cliquez pour " + (autoEnabled ? "d√©sactiver" : "activer"));
        lore.add("¬ß8‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨");

        meta.setLore(lore);
        item.setItemMeta(meta);

        return item;
    }

    /**
     * Item pour les joueurs sans permission auto-upgrade
     */
    private ItemStack createNoPermissionAutoUpgradeItem() {
        ItemStack item = new ItemStack(Material.GRAY_DYE);
        ItemMeta meta = item.getItemMeta();

        meta.setDisplayName("¬ß7üîí ¬ßlAuto-am√©lioration");

        List<String> lore = new ArrayList<>();
        lore.add("¬ß8‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨");
        lore.add("¬ß7Fonctionnalit√© r√©serv√©e aux joueurs VIP+");
        lore.add("¬ß7");
        lore.add("¬ßc‚ùå ¬ßlPERMISSION REQUISE");
        lore.add("¬ß7‚ñ∏ ¬ßespecialmine.vip ¬ß7ou ¬ßespecialmine.admin");
        lore.add("¬ß7");
        lore.add("¬ß7L'auto-am√©lioration permet d'am√©liorer");
        lore.add("¬ß7automatiquement vos enchantements sans");
        lore.add("¬ß7intervention manuelle.");
        lore.add("¬ß8‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨");

        meta.setLore(lore);
        item.setItemMeta(meta);

        return item;
    }

    // Actions et utilitaires...

    /**
     * Version optimis√©e d'upgradeEnchantment avec option de silence
     * @param player Le joueur
     * @param enchantmentName Nom de l'enchantement
     * @param requestedLevels Nombre de niveaux demand√©s
     * @param silent Si true, n'affiche pas les messages d'erreur ni les sons
     * @return true si l'am√©lioration a r√©ussi, false sinon
     */
    private boolean upgradeEnchantment(Player player, String enchantmentName, int requestedLevels, boolean silent) {
        boolean success = plugin.getEnchantmentManager().upgradeEnchantment(player, enchantmentName, requestedLevels);

        if (success) {
            // V√©rifie si niveau max atteint apr√®s am√©lioration
            CustomEnchantment enchantment = plugin.getEnchantmentManager().getEnchantment(enchantmentName);
            PlayerData playerData = plugin.getPlayerDataManager().getPlayerData(player.getUniqueId());
            int newLevel = playerData.getEnchantmentLevel(enchantmentName);

            if (newLevel >= enchantment.getMaxLevel()) {
                playerData.setAutoUpgrade(enchantmentName, false);
                if (!silent) {
                    player.sendMessage("¬ß2üèÜ " + enchantment.getDisplayName() + " ¬ß2niveau maximum atteint!");
                    plugin.getServer().getScheduler().runTaskLater(plugin, () -> {
                        plugin.getCategoryMenuGUI().openCategoryMenu(player, enchantment.getCategory());
                    }, 10L);
                }
            } else if (!silent) {
                openEnchantmentUpgradeMenu(player, enchantmentName);
            }
            plugin.getPickaxeManager().updateMobilityEffects(player);
            return true;
        } else {
            if (!silent) {
                player.playSound(player.getLocation(), Sound.UI_BUTTON_CLICK, 0.5f, 0.5f);
            }
            return false;
        }
    }

    /**
     * Version publique originale (pour compatibilit√©)
     */
    private void upgradeEnchantment(Player player, String enchantmentName, int requestedLevels) {
        upgradeEnchantment(player, enchantmentName, requestedLevels, false);
    }

    /**
     * Version optimis√©e de upgradeToMax avec option de silence
     * @param player Le joueur
     * @param enchantmentName Nom de l'enchantement
     * @param silent Si true, n'affiche pas les messages d'erreur ni les sons
     * @return true si au moins une am√©lioration a √©t√© effectu√©e, false sinon
     */
    public boolean upgradeToMax(Player player, String enchantmentName, boolean silent) {
        CustomEnchantment enchantment = plugin.getEnchantmentManager().getEnchantment(enchantmentName);
        if (enchantment == null) return false;

        PlayerData playerData = plugin.getPlayerDataManager().getPlayerData(player.getUniqueId());
        int currentLevel = playerData.getEnchantmentLevel(enchantmentName);

        // V√©rifie si d√©j√† au niveau max
        if (currentLevel >= enchantment.getMaxLevel()) {
            if (!silent) {
                playerData.setAutoUpgrade(enchantmentName, false);
                player.sendMessage("¬ß2üèÜ " + enchantment.getDisplayName() + " ¬ß2niveau maximum atteint!");
            }
            return false;
        }

        long availableTokens = playerData.getTokens();
        int maxAffordableLevels = calculateMaxAffordableUpgrades(enchantment, currentLevel, availableTokens);

        if (maxAffordableLevels > 0) {
            // Utilise la m√©thode upgradeEnchantment en mode silencieux
            return upgradeEnchantment(player, enchantmentName, maxAffordableLevels, silent);
        } else {
            // Pas assez de tokens - ne fait rien en mode silencieux
            if (!silent) {
                player.sendMessage("¬ßcPas assez de tokens pour am√©liorer cet enchantement!");
                player.playSound(player.getLocation(), Sound.UI_BUTTON_CLICK, 0.5f, 0.5f);
            }
            return false;
        }
    }

    /**
     * Version publique originale (pour compatibilit√©)
     */
    public void upgradeToMax(Player player, String enchantmentName) {
        upgradeToMax(player, enchantmentName, false);
    }

    /**
     * Toggle auto-upgrade avec mise √† jour GUI fonctionnelle
     */
    private void toggleAutoUpgrade(Player player, String title) {
        String enchantmentName = extractEnchantmentNameFromTitle(title);
        PlayerData playerData = plugin.getPlayerDataManager().getPlayerData(player.getUniqueId());

        boolean current = playerData.isAutoUpgradeEnabled(enchantmentName);

        if (!current) {
            Set<String> currentAutoUpgrades = new HashSet<>(playerData.getAutoUpgradeEnabled());
            for (String otherEnchant : currentAutoUpgrades) {
                playerData.setAutoUpgrade(otherEnchant, false);
            }

            playerData.setAutoUpgrade(enchantmentName, true);

            CustomEnchantment enchant = plugin.getEnchantmentManager().getEnchantment(enchantmentName);
            String displayName = enchant != null ? enchant.getDisplayName() : enchantmentName;

            player.sendMessage("¬ßa‚úÖ Auto-am√©lioration activ√©e pour " + displayName);
            if (!currentAutoUpgrades.isEmpty()) {
                player.sendMessage("¬ß7Les autres auto-am√©liorations ont √©t√© d√©sactiv√©es.");
            }

        } else {
            playerData.setAutoUpgrade(enchantmentName, false);

            CustomEnchantment enchant = plugin.getEnchantmentManager().getEnchantment(enchantmentName);
            String displayName = enchant != null ? enchant.getDisplayName() : enchantmentName;

            player.sendMessage("¬ßc‚ùå Auto-am√©lioration d√©sactiv√©e pour " + displayName);
        }

        plugin.getPlayerDataManager().markDirty(player.getUniqueId());

        // Rouvre le menu imm√©diatement
        plugin.getServer().getScheduler().runTaskLater(plugin, () -> {
            openEnchantmentUpgradeMenu(player, enchantmentName);
        }, 1L);
    }

    // Utilitaires...

    private ItemStack createPlayerHead(Player player) {
        ItemStack head = new ItemStack(Material.PLAYER_HEAD);
        SkullMeta meta = (SkullMeta) head.getItemMeta();

        meta.setOwningPlayer(player);
        meta.setDisplayName("¬ß6üìä ¬ßl" + player.getName());

        PlayerData playerData = plugin.getPlayerDataManager().getPlayerData(player.getUniqueId());

        List<String> lore = new ArrayList<>();
        lore.add("¬ß6üí∞ ¬ßl√âCONOMIE ACTUELLE");
        lore.add("¬ß7‚îÇ ¬ß6Coins: ¬ße" + NumberFormatter.format(playerData.getCoins()));
        lore.add("¬ß7‚îÇ ¬ßeTokens: ¬ß6" + NumberFormatter.format(playerData.getTokens()));
        lore.add("¬ß7‚îÇ ¬ßaExp√©rience: ¬ß2" + NumberFormatter.format(playerData.getExperience()));
        lore.add("¬ß7‚îî ¬ß7Enchantements actifs: ¬ßb" + playerData.getEnchantmentLevels().size());

        meta.setLore(lore);
        head.setItemMeta(meta);

        return head;
    }

    private ItemStack createBackButton() {
        ItemStack arrow = new ItemStack(Material.ARROW);
        ItemMeta meta = arrow.getItemMeta();

        meta.setDisplayName("¬ß7‚Üê ¬ßlRetour");
        meta.setLore(List.of("¬ß7Retourner au menu pr√©c√©dent"));

        arrow.setItemMeta(meta);
        return arrow;
    }

    /**
     * Extraction du nom d'enchantement plus robuste
     */
    private String extractEnchantmentNameFromTitle(String title) {
        // Retire les codes couleur et les caract√®res sp√©ciaux pour extraire le nom
        String cleanTitle = title.replaceAll("¬ß[0-9a-fk-or]", "").replace("üîß", "").trim();

        // Mappe les noms d'affichage vers les noms internes
        return switch (cleanTitle.toLowerCase()) {
            case "token greed" -> "token_greed";
            case "exp greed" -> "exp_greed";
            case "money greed" -> "money_greed";
            case "key greed" -> "key_greed";
            case "abondance" -> "abundance";
            case "combustion" -> "combustion";
            case "pet xp" -> "pet_xp";
            case "efficacit√©" -> "efficiency";
            case "fortune" -> "fortune";
            case "solidit√©" -> "durability";
            case "vision nocturne" -> "night_vision";
            case "vitesse" -> "speed";
            case "rapidit√©" -> "haste";
            case "saut" -> "jump_boost";
            case "escalateur" -> "escalator";
            case "chance" -> "luck";
            case "laser" -> "laser";
            case "explosion" -> "explosion";
            default -> cleanTitle.toLowerCase().replace(" ", "_");
        };
    }

    private void fillBorders(Inventory gui) {
        ItemStack filler = new ItemStack(Material.GRAY_STAINED_GLASS_PANE);
        ItemMeta meta = filler.getItemMeta();
        meta.setDisplayName("¬ß7");
        filler.setItemMeta(meta);

        // CORRIG√â: Bordures pour 27 slots
        int[] borderSlots = {0, 1, 2, 3, 5, 6, 7, 8, 9, 17, 19, 20, 21, 22, 24, 25, 26};
        for (int slot : borderSlots) {
            gui.setItem(slot, filler);
        }
    }
}