package fr.prisoncore.prisoncore.prisonTycoon.GUI;

import fr.prisoncore.prisoncore.prisonTycoon.PrisonTycoon;
import fr.prisoncore.prisoncore.prisonTycoon.data.PlayerData;
import fr.prisoncore.prisoncore.prisonTycoon.enchantments.CustomEnchantment;
import fr.prisoncore.prisoncore.prisonTycoon.utils.NumberFormatter;
import org.bukkit.Bukkit;
import org.bukkit.Material;
import org.bukkit.Sound;
import org.bukkit.entity.Player;
import org.bukkit.inventory.Inventory;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.ItemMeta;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

/**
 * CORRIG√â : Menu de r√©paration avec nouveaux co√ªts et sans confirmation
 */
public class PickaxeRepairGUI {

    private final PrisonTycoon plugin;

    // Slots pour la barre de pourcentage de r√©paration (ligne du milieu)
    private static final int[] REPAIR_BAR_SLOTS = {11, 12, 13, 14, 15};
    private static final int PICKAXE_INFO_SLOT = 4;
    private static final int BACK_BUTTON_SLOT = 18;
    // SUPPRIM√â : Plus de bouton de confirmation

    public PickaxeRepairGUI(PrisonTycoon plugin) {
        this.plugin = plugin;
    }

    /**
     * Ouvre le menu de r√©paration de la pioche
     */
    public void openRepairGUI(Player player) {
        Inventory gui = Bukkit.createInventory(null, 27, "¬ßcüî® ¬ßlR√©paration de Pioche ¬ßcüî®");

        // Remplissage d√©coratif
        fillBorders(gui);

        // Informations de la pioche
        gui.setItem(PICKAXE_INFO_SLOT, createPickaxeInfoItem(player));

        // Barre de pourcentage de r√©paration (sans s√©lection, clics directs)
        createRepairPercentageBar(gui, player);

        // Bouton retour
        gui.setItem(BACK_BUTTON_SLOT, createBackButton());

        player.openInventory(gui);
        player.playSound(player.getLocation(), Sound.UI_BUTTON_CLICK, 0.5f, 1.0f);
    }

    /**
     * CORRIG√â : G√®re les clics avec ex√©cution directe
     */
    public void handleRepairMenuClick(Player player, int slot, ItemStack item) {
        if (slot == BACK_BUTTON_SLOT) {
            plugin.getMainMenuGUI().openEnchantmentMenu(player);
            return;
        }

        // CORRIG√â : Clics directs sur la barre de pourcentage = r√©paration imm√©diate
        for (int i = 0; i < REPAIR_BAR_SLOTS.length; i++) {
            if (slot == REPAIR_BAR_SLOTS[i]) {
                int percentage = (i + 1) * 20; // 20%, 40%, 60%, 80%, 100%
                executeRepairDirect(player, percentage);
                return;
            }
        }
    }

    /**
     * CORRIG√â : Barre sans s√©lection, boutons directs
     */
    private void createRepairPercentageBar(Inventory gui, Player player) {
        for (int i = 0; i < REPAIR_BAR_SLOTS.length; i++) {
            int percentage = (i + 1) * 20; // 20%, 40%, 60%, 80%, 100%

            Material material;
            String color;
            if (percentage <= 40) {
                material = Material.YELLOW_STAINED_GLASS;
                color = "¬ße";
            } else if (percentage <= 80) {
                material = Material.ORANGE_STAINED_GLASS;
                color = "¬ß6";
            } else {
                material = Material.RED_STAINED_GLASS;
                color = "¬ßc";
            }

            ItemStack item = new ItemStack(material);
            ItemMeta meta = item.getItemMeta();

            meta.setDisplayName(color + "¬ßl" + percentage + "% ¬ß7de r√©paration");

            List<String> lore = new ArrayList<>();
            lore.add("¬ß8‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨");
            lore.add("¬ß7R√©parer ¬ße" + percentage + "% ¬ß7de la durabilit√©");
            lore.add("¬ß7de votre pioche l√©gendaire");

            // CORRIG√â : Calcul du co√ªt avec nouveau syst√®me (0,01% pour 100%)
            PlayerData playerData = plugin.getPlayerDataManager().getPlayerData(player.getUniqueId());
            long totalInvested = calculateTotalInvestedTokens(playerData);
            long cost = calculateNewRepairCost(totalInvested, percentage);

            lore.add("¬ß7");
            lore.add("¬ß6üí∞ ¬ßlCO√õT DE R√âPARATION");
            lore.add("¬ß7‚îÇ ¬ß6Co√ªt: ¬ße" + NumberFormatter.format(cost) + " tokens");
            lore.add("¬ß7‚îÇ ¬ß7Base: ¬ß6" + NumberFormatter.format(totalInvested) + " tokens investis");
            lore.add("¬ß7‚îÇ ¬ß7Pourcentage: ¬ße" + String.format("%.3f%%", percentage * 0.01) + " du total");
            lore.add("¬ß7‚îî");

            // V√©rification fonds
            if (playerData.getTokens() >= cost) {
                lore.add("¬ßa‚úÖ Cliquez pour r√©parer imm√©diatement!");
            } else {
                lore.add("¬ßc‚ùå Tokens insuffisants");
            }

            lore.add("¬ß8‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨");

            meta.setLore(lore);
            item.setItemMeta(meta);
            gui.setItem(REPAIR_BAR_SLOTS[i], item);
        }
    }

    /**
     * NOUVEAU : Calcul de co√ªt avec 0,01% du total pour 100%
     */
    private long calculateNewRepairCost(long totalInvested, int percentage) {
        // 100% = 0,01% du total
        // Donc : percentage% = (percentage / 100) * 0,01% du total
        double costPercentage = (percentage / 100.0) * 0.0001; // 0,01% = 0.0001
        return Math.max(1, (long)(totalInvested * costPercentage));
    }

    /**
     * CORRIG√â : Ex√©cution directe de la r√©paration
     */
    private void executeRepairDirect(Player player, int percentage) {
        PlayerData playerData = plugin.getPlayerDataManager().getPlayerData(player.getUniqueId());

        // Calcul du co√ªt
        long totalInvested = calculateTotalInvestedTokens(playerData);
        long cost = calculateNewRepairCost(totalInvested, percentage);

        // V√©rification des tokens
        if (playerData.getTokens() < cost) {
            player.sendActionBar("¬ßc‚ùå Tokens insuffisants! " +
                    NumberFormatter.format(cost) + " requis, " +
                    NumberFormatter.format(playerData.getTokens()) + " disponibles");
            player.playSound(player.getLocation(), Sound.ENTITY_VILLAGER_NO, 1.0f, 1.0f);
            return;
        }

        // Trouver la pioche du joueur
        ItemStack pickaxe = plugin.getPickaxeManager().findPlayerPickaxe(player);
        if (pickaxe == null) {
            player.sendActionBar("¬ßc‚ùå Pioche l√©gendaire introuvable!");
            return;
        }

        // CORRIG√â : Calculer avec la durabilit√© de base (pas augment√©e par solidit√©)
        short currentDurability = pickaxe.getDurability();
        short maxDurability = pickaxe.getType().getMaxDurability();

        // Calculer la r√©paration sur la durabilit√© normale
        int currentDamage = currentDurability;
        int repairAmount = (int) (maxDurability * (percentage / 100.0));
        int newDurability = Math.max(0, currentDamage - repairAmount);

        // Appliquer la r√©paration
        pickaxe.setDurability((short) newDurability);

        // D√©duire les tokens
        playerData.removeTokens(cost);

        // Mettre √† jour la pioche
        plugin.getPickaxeManager().updatePlayerPickaxe(player);

        // Messages de succ√®s dans l'action bar
        double repairedPercent = ((double) repairAmount / maxDurability) * 100;
        player.sendActionBar("¬ßa‚úÖ Pioche r√©par√©e: +" + String.format("%.1f%%", repairedPercent) +
                " (-" + NumberFormatter.format(cost) + " tokens)");

        // Son de succ√®s
        player.playSound(player.getLocation(), Sound.BLOCK_ANVIL_USE, 1.0f, 1.2f);

        // Fermer le menu et rouvrir pour mise √† jour
        player.closeInventory();

        // D√©lai petit pour laisser le temps au son
        Bukkit.getScheduler().runTaskLater(plugin, () -> {
            openRepairGUI(player);
        }, 5L);

        plugin.getPluginLogger().info("R√©paration directe effectu√©e pour " + player.getName() +
                ": " + percentage + "% pour " + NumberFormatter.format(cost) + " tokens");
    }

    /**
     * CORRIG√â : Informations de la pioche avec durabilit√© de base
     */
    private ItemStack createPickaxeInfoItem(Player player) {
        ItemStack item = new ItemStack(Material.DIAMOND_PICKAXE);
        ItemMeta meta = item.getItemMeta();

        meta.setDisplayName("¬ß6‚õèÔ∏è ¬ßlINFORMATIONS DE LA PIOCHE");

        List<String> lore = new ArrayList<>();
        lore.add("¬ß8‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨");

        ItemStack pickaxe = plugin.getPickaxeManager().findPlayerPickaxe(player);
        PlayerData playerData = plugin.getPlayerDataManager().getPlayerData(player.getUniqueId());

        if (pickaxe != null) {
            // CORRIG√â : √âtat avec durabilit√© normale (pas augment√©e)
            short currentDurability = pickaxe.getDurability();
            short maxDurability = pickaxe.getType().getMaxDurability();

            double healthPercent = ((double)(maxDurability - currentDurability) / maxDurability) * 100;

            lore.add("¬ße‚õèÔ∏è ¬ßl√âTAT ACTUEL");
            lore.add("¬ß7‚îÇ ¬ßeDurabilit√©: " + getDurabilityColorForButton(healthPercent) + String.format("%.1f%%", healthPercent));
            lore.add("¬ß7‚îÇ ¬ßePoints: ¬ß6" + (maxDurability - currentDurability) + "¬ß7/¬ß6" + maxDurability);

            // Afficher info solidit√© sans bonus de durabilit√©
            int durabilityLevel = playerData.getEnchantmentLevel("durability");
            if (durabilityLevel > 0) {
                double preservationChance = Math.min(95.0, durabilityLevel * 5.0);
                lore.add("¬ß7‚îÇ ¬ßeBonus Solidit√©: ¬ßa" + String.format("%.0f%%", preservationChance) +
                        " ¬ß7chance d'√©viter la perte (Niv." + durabilityLevel + ")");
            }

            // CORRIG√â : Recommandation bas√©e sur l'√©tat r√©el
            if (currentDurability >= maxDurability - 1) {
                lore.add("¬ß7‚îÇ ¬ßcüíÄ PIOCHE CASS√âE! R√©paration URGENTE!");
            } else if (healthPercent < 15) {
                lore.add("¬ß7‚îÇ ¬ßc‚ö†Ô∏è R√©paration critique recommand√©e!");
            } else if (healthPercent < 30) {
                lore.add("¬ß7‚îÇ ¬ße‚ö†Ô∏è R√©paration recommand√©e");
            } else if (healthPercent < 60) {
                lore.add("¬ß7‚îÇ ¬ße‚ö†Ô∏è R√©paration optionnelle");
            } else {
                lore.add("¬ß7‚îÇ ¬ßa‚úì En bon √©tat");
            }

            lore.add("¬ß7‚îî");
            lore.add("");

            // CORRIG√â : Co√ªts avec nouveau syst√®me
            long totalInvested = calculateTotalInvestedTokens(playerData);
            lore.add("¬ß6üí∞ ¬ßlCO√õTS DE R√âPARATION (NOUVEAUX)");
            lore.add("¬ß7‚îÇ ¬ß6Base: ¬ße" + NumberFormatter.format(totalInvested) + " tokens investis");
            lore.add("¬ß7‚îÇ ¬ß7R√©paration 20%: ¬ß6" + NumberFormatter.format(calculateNewRepairCost(totalInvested, 20)) + " tokens");
            lore.add("¬ß7‚îÇ ¬ß7R√©paration 50%: ¬ß6" + NumberFormatter.format(calculateNewRepairCost(totalInvested, 50)) + " tokens");
            lore.add("¬ß7‚îÇ ¬ß7R√©paration 100%: ¬ß6" + NumberFormatter.format(calculateNewRepairCost(totalInvested, 100)) + " tokens");
            lore.add("¬ß7‚îî ¬ß7Nouveau: 0,01% du total pour 100%");

        } else {
            lore.add("¬ßc‚ùå ¬ßlPIOCHE INTROUVABLE");
            lore.add("¬ß7‚îÇ ¬ßcVotre pioche l√©gendaire est introuvable!");
            lore.add("¬ß7‚îÇ ¬ß7Assurez-vous qu'elle est dans votre inventaire.");
            lore.add("¬ß7‚îî");
        }

        lore.add("¬ß8‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨");

        if (pickaxe != null) {
            lore.add("¬ße‚ú® Cliquez directement sur les pourcentages!");
        } else {
            lore.add("¬ß7R√©cup√©rez votre pioche pour acc√©der √† la r√©paration");
        }

        lore.add("¬ß8‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨");

        meta.setLore(lore);
        item.setItemMeta(meta);

        return item;
    }

    /**
     * Bouton retour
     */
    private ItemStack createBackButton() {
        ItemStack item = new ItemStack(Material.ARROW);
        ItemMeta meta = item.getItemMeta();

        meta.setDisplayName("¬ßc‚Ü© ¬ßlRetour");

        List<String> lore = new ArrayList<>();
        lore.add("¬ß7Retourner au menu des enchantements");

        meta.setLore(lore);
        item.setItemMeta(meta);

        return item;
    }

    /**
     * Remplissage d√©coratif des bordures
     */
    private void fillBorders(Inventory gui) {
        ItemStack borderItem = new ItemStack(Material.GRAY_STAINED_GLASS_PANE);
        ItemMeta meta = borderItem.getItemMeta();
        meta.setDisplayName(" ");
        borderItem.setItemMeta(meta);

        // Remplir bordures
        int[] borderSlots = {0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26};
        for (int slot : borderSlots) {
            gui.setItem(slot, borderItem);
        }
    }

    /**
     * Calcule le total des tokens investis
     */
    private long calculateTotalInvestedTokens(PlayerData playerData) {
        long total = 0;

        Map<String, Integer> enchantments = playerData.getEnchantmentLevels();

        for (Map.Entry<String, Integer> entry : enchantments.entrySet()) {
            String enchantName = entry.getKey();
            int currentLevel = entry.getValue();

            CustomEnchantment enchantment = plugin.getEnchantmentManager().getEnchantment(enchantName);
            if (enchantment != null) {
                // Calcule le co√ªt total pour atteindre ce niveau
                for (int level = 1; level <= currentLevel; level++) {
                    total += enchantment.getUpgradeCost(level);
                }
            }
        }
        return total;
    }


    /**
     * Couleur selon la durabilit√©
     */
    private String getDurabilityColorForButton(double healthPercent) {
        if (healthPercent >= 80) return "¬ßa";
        if (healthPercent >= 60) return "¬ße";
        if (healthPercent >= 40) return "¬ß6";
        if (healthPercent >= 20) return "¬ßc";
        return "¬ß4";
    }
}