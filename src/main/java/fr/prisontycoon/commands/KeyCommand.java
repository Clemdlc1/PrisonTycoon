package fr.prisontycoon.commands;

import fr.prisontycoon.PrisonTycoon;
import org.bukkit.Bukkit;
import org.bukkit.Material;
import org.bukkit.Sound;
import org.bukkit.command.Command;
import org.bukkit.command.CommandExecutor;
import org.bukkit.command.CommandSender;
import org.bukkit.command.TabCompleter;
import org.bukkit.entity.Player;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.ItemMeta;
import org.jetbrains.annotations.NotNull;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

/**
 * Commande pour donner des cl√©s de crates aux joueurs
 * Usage: /key <joueur> <type> [quantit√©]
 */
public class KeyCommand implements CommandExecutor, TabCompleter {

    private final PrisonTycoon plugin;

    public KeyCommand(PrisonTycoon plugin) {
        this.plugin = plugin;
    }

    @Override
    public boolean onCommand(@NotNull CommandSender sender, @NotNull Command command, @NotNull String label, String[] args) {
        // V√©rification des permissions
        if (!sender.hasPermission("specialmine.admin")) {
            sender.sendMessage("¬ßc‚ùå Vous n'avez pas la permission d'utiliser cette commande!");
            return true;
        }

        if (args.length < 2) {
            sendHelpMessage(sender);
            return true;
        }

        // Parse les arguments
        String playerName = args[0];
        String keyType = args[1];
        int amount = 1;

        if (args.length >= 3) {
            try {
                amount = Integer.parseInt(args[2]);
                if (amount <= 0 || amount > 64) {
                    sender.sendMessage("¬ßc‚ùå Quantit√© invalide! (1-64)");
                    return true;
                }
            } catch (NumberFormatException e) {
                sender.sendMessage("¬ßc‚ùå Quantit√© invalide! Utilisez un nombre.");
                return true;
            }
        }

        // Trouve le joueur
        Player target = Bukkit.getPlayer(playerName);
        if (target == null) {
            sender.sendMessage("¬ßc‚ùå Joueur non trouv√©: " + playerName);
            return true;
        }

        // V√©rifie l'espace dans l'inventaire
        if (target.getInventory().firstEmpty() == -1) {
            sender.sendMessage("¬ßc‚ùå L'inventaire de " + target.getName() + " est plein!");
            return true;
        }

        // Cr√©e et donne la cl√©
        ItemStack key = createKey(keyType, amount);
        if (key == null) {
            sender.sendMessage("¬ßc‚ùå Type de cl√© invalide: " + keyType);
            sender.sendMessage("¬ß7Types disponibles: Vote, Commune, Peu Commune, Rare, L√©gendaire, Cristal");
            return true;
        }

        target.getInventory().addItem(key);

        // Messages de confirmation
        String keyColor = getKeyColor(keyType);
        target.sendMessage("¬ßaüì• Vous avez re√ßu " + amount + "x " + keyColor + "Cl√© " + keyType + "¬ßa!");
        target.playSound(target.getLocation(), Sound.ENTITY_PLAYER_LEVELUP, 1.0f, 1.2f);

        sender.sendMessage("¬ßa‚úÖ " + amount + "x " + keyColor + "Cl√© " + keyType + " ¬ßadonn√©e √† " + target.getName());

        // Log administratif
        plugin.getPluginLogger().info("¬ß7" + sender.getName() + " a donn√© " + amount + "x Cl√© " + keyType + " √† " + target.getName());

        return true;
    }

    /**
     * Cr√©e une cl√© du type sp√©cifi√©
     */
    private ItemStack createKey(String keyType, int amount) {
        String keyColor = getKeyColor(keyType);
        if (keyColor == null) return null;

        ItemStack key = new ItemStack(Material.TRIPWIRE_HOOK, amount);
        ItemMeta meta = key.getItemMeta();
        meta.setDisplayName(keyColor + "Cl√© " + keyType);
        meta.setLore(Arrays.asList(
                "¬ß7Cl√© de coffre " + keyColor + keyType,
                "¬ß7Utilise cette cl√© pour ouvrir des coffres!"
        ));
        key.setItemMeta(meta);
        return key;
    }

    /**
     * Obtient la couleur d'une cl√© selon son type
     */
    private String getKeyColor(String keyType) {
        return switch (keyType.toLowerCase()) {
            case "vote" -> "¬ßf";
            case "commune" -> "¬ßf";
            case "peu commune" -> "¬ß9";
            case "rare" -> "¬ß5";
            case "l√©gendaire" -> "¬ß6";
            case "cristal" -> "¬ßd";
            default -> null;
        };
    }

    /**
     * Affiche le message d'aide
     */
    private void sendHelpMessage(CommandSender sender) {
        sender.sendMessage("¬ß6=== Commande Key ===");
        sender.sendMessage("¬ß7Usage: ¬ße/key <joueur> <type> [quantit√©]");
        sender.sendMessage("¬ß7Types: ¬ßeVote, Commune, Peu Commune, Rare, L√©gendaire, Cristal");
        sender.sendMessage("¬ß7Quantit√©: ¬ße1-64 (d√©faut: 1)");
        sender.sendMessage("¬ß7Permission: ¬ßespecialmine.admin");
    }

    @Override
    public List<String> onTabComplete(@NotNull CommandSender sender, @NotNull Command command, @NotNull String alias, String[] args) {
        List<String> completions = new ArrayList<>();

        if (args.length == 1) {
            // Compl√©tion des noms de joueurs
            String partialName = args[0].toLowerCase();
            for (Player player : Bukkit.getOnlinePlayers()) {
                if (player.getName().toLowerCase().startsWith(partialName)) {
                    completions.add(player.getName());
                }
            }
        } else if (args.length == 2) {
            // Compl√©tion des types de cl√©s
            String partialType = args[1].toLowerCase();
            List<String> keyTypes = Arrays.asList("Vote", "Commune", "Peu Commune", "Rare", "L√©gendaire", "Cristal");
            for (String type : keyTypes) {
                if (type.toLowerCase().startsWith(partialType)) {
                    completions.add(type);
                }
            }
        } else if (args.length == 3) {
            // Compl√©tion des quantit√©s
            completions.addAll(Arrays.asList("1", "5", "10", "16", "32", "64"));
        }

        return completions;
    }
}
