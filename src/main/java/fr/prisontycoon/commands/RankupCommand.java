package fr.prisontycoon.commands;

import fr.prisontycoon.PrisonTycoon;
import fr.prisontycoon.data.PlayerData;
import fr.prisontycoon.utils.NumberFormatter;
import org.bukkit.command.Command;
import org.bukkit.command.CommandExecutor;
import org.bukkit.command.CommandSender;
import org.bukkit.command.TabCompleter;
import org.bukkit.entity.Player;
import org.bukkit.permissions.PermissionAttachmentInfo;
import org.bukkit.util.StringUtil;
import org.jetbrains.annotations.NotNull;

import java.util.*;
import java.util.stream.Collectors;

/**
 * Commande /rankup - Syst√®me de mont√©e en rang pour les mines A-Z
 * CORRIG√â: Permissions non-cumulatives - seulement le rang le plus √©lev√©
 */
public class RankupCommand implements CommandExecutor, TabCompleter {

    private final PrisonTycoon plugin;

    public RankupCommand(PrisonTycoon plugin) {
        this.plugin = plugin;
    }

    @Override
    public boolean onCommand(@NotNull CommandSender sender, @NotNull Command command, @NotNull String label, String[] args) {
        if (!(sender instanceof Player player)) {
            sender.sendMessage("¬ßcCette commande ne peut √™tre utilis√©e que par un joueur!");
            return true;
        }

        if (args.length == 0) {
            performSingleRankup(player);
            return true;
        }

        String subCommand = args[0].toLowerCase();

        switch (subCommand) {
            case "all", "max" -> performMaxRankup(player);
            case "auto" -> {
                if (!player.hasPermission("specialmine.vip") && !player.hasPermission("specialmine.admin")) {
                    player.sendMessage("¬ßcCette fonctionnalit√© est r√©serv√©e aux VIP!");
                    return true;
                }
                toggleAutoRankup(player);
            }
            case "info" -> showRankupInfo(player);
            case "force" -> {
                if (!player.hasPermission("specialmine.admin")) {
                    player.sendMessage("¬ßcVous n'avez pas la permission!");
                    return true;
                }
                if (args.length != 3) {
                    player.sendMessage("¬ßcUsage: /rankup force <joueur> <a-z>");
                    return true;
                }
                forceRankPlayer(player, args[1], args[2]);
            }
            default -> sendHelpMessage(player);
        }

        return true;
    }

    /**
     * Tente d'effectuer un seul rankup.
     */
    private boolean tryRankup(Player player, boolean silent) {
        PlayerData playerData = plugin.getPlayerDataManager().getPlayerData(player.getUniqueId());
        String currentRank = getCurrentRank(player);
        String nextRank = getNextRank(currentRank);

        if (nextRank == null) {
            if (!silent) player.sendMessage("¬ßcVous √™tes d√©j√† au rang maximum (Z)! Utilisez /prestige pour continuer.");
            return false;
        }

        long price = getRankupPrice(nextRank);
        if (price < 0) {
            if (!silent)
                player.sendMessage("¬ßcErreur: Prix de rankup non configur√© pour le rang " + nextRank.toUpperCase() + "!");
            return false;
        }

        if (playerData.getCoins() < price) {
            if (!silent) {
                player.sendMessage("¬ßcCoins insuffisants!");
                player.sendMessage("¬ß7N√©cessaire: ¬ßc" + NumberFormatter.format(price) + " coins");
                player.sendMessage("¬ß7Actuel: ¬ße" + NumberFormatter.format(playerData.getCoins()) + " coins");
                player.sendMessage("¬ß7Manquant: ¬ßc" + NumberFormatter.format(price - playerData.getCoins()) + " coins");
            }
            return false;
        }

        // Effectuer le rankup
        playerData.removeCoins(price);

        // D√©finit la permission du nouveau rang de mani√®re non-cumulative
        setMinePermissionToRank(player, nextRank);

        if (!silent) {
            player.sendMessage("¬ßa‚úÖ Rankup r√©ussi!");
            player.sendMessage("¬ß7Nouveau rang: ¬ßa" + nextRank.toUpperCase());
            player.sendMessage("¬ß7Co√ªt: ¬ßc-" + NumberFormatter.format(price) + " coins");
            player.sendMessage("¬ß7Coins restants: ¬ße" + NumberFormatter.format(playerData.getCoins()));
            player.sendMessage("¬ß7Vous pouvez maintenant miner dans la mine " + nextRank.toUpperCase() + "!");
            player.playSound(player.getLocation(), org.bukkit.Sound.ENTITY_PLAYER_LEVELUP, 1.0f, 1.0f);

            // Notification sp√©ciale pour le rang F (d√©bloque les m√©tiers)
            if (nextRank.equals("f")) {
                plugin.getProfessionManager().notifyProfessionUnlock(player);
            }

            // Notification sp√©ciale pour le rang Z (permet prestige)
            if (nextRank.equals("z")) {
                player.sendMessage("¬ß6üèÜ F√©licitations! Vous avez atteint le rang maximum!");
                player.sendMessage("¬ß6‚ú® Vous pouvez maintenant effectuer un /prestige pour obtenir des bonus permanents!");
            }
        }

        plugin.getPluginLogger().info("Rankup effectu√©: " + player.getName() + " " +
                currentRank.toUpperCase() + " ‚Üí " + nextRank.toUpperCase() +
                " (co√ªt: " + NumberFormatter.format(price) + " coins)");

        return true;
    }

    /**
     * Obtient le rang actuel via les permissions effectives du joueur.
     */
    public String getCurrentRank(Player player) {
        String highestRank = "a"; // Rang par d√©faut

        Set<String> minePermissions = player.getEffectivePermissions().stream()
                .map(PermissionAttachmentInfo::getPermission)
                .filter(perm -> perm.startsWith("specialmine.mine."))
                .collect(Collectors.toSet());

        for (char c = 'z'; c >= 'a'; c--) {
            String minePermission = "specialmine.mine." + c;
            if (minePermissions.contains(minePermission)) {
                highestRank = String.valueOf(c);
                break;
            }
        }

        return highestRank;
    }

    /**
     * Obtient le rang suivant (A-Z).
     */
    private String getNextRank(String currentRank) {
        if (currentRank == null || currentRank.isEmpty()) {
            return "a";
        }
        if (currentRank.equalsIgnoreCase("z")) {
            return null; // Rang maximum
        }
        char currentChar = currentRank.charAt(0);
        return String.valueOf((char) (currentChar + 1));
    }

    /**
     * CORRIG√â: D√©finit la permission de mine au rang sp√©cifique (non-cumulatif).
     * Retire les anciennes permissions de rang et ajoute la nouvelle.
     */
    public void setMinePermissionToRank(Player player, String targetRank) {
        // Validation du rang
        if (targetRank == null || targetRank.length() != 1) {
            plugin.getPluginLogger().warning("Tentative de d√©finir un rang invalide: " + targetRank);
            return;
        }
        char targetChar = targetRank.charAt(0);
        if (targetChar < 'a' || targetChar > 'z') {
            plugin.getPluginLogger().warning("Tentative de d√©finir un rang invalide: " + targetRank);
            return;
        }

        PlayerData playerData = plugin.getPlayerDataManager().getPlayerData(player.getUniqueId());

        // 1. Obtenir une copie modifiable des permissions custom du joueur.
        Set<String> permissions = playerData.getCustomPermissions();

        // 2. Retirer toutes les permissions de rang de mine existantes pour garantir un √©tat propre.
        permissions.removeIf(perm -> perm.startsWith("specialmine.mine."));

        // 3. Ajouter la nouvelle permission de rang, en utilisant la cha√Æne de permission compl√®te et correcte.
        String newRankPermission = "specialmine.mine." + targetRank.toLowerCase();
        permissions.add(newRankPermission);

        // 4. Mettre √† jour les donn√©es du joueur avec le nouvel ensemble de permissions.
        playerData.setCustomPermissions(permissions);

        // 5. Recharger les permissions en direct du joueur via le PermissionManager pour appliquer les changements.
        plugin.getPermissionManager().reloadPlayerPermissions(player);

        plugin.getPluginLogger().info("Permission de mine d√©finie pour " + player.getName() + ": " + targetRank.toUpperCase() +
                " (les permissions pr√©c√©dentes ont √©t√© supprim√©es)");
    }

    /**
     * Obtient le prix de rankup depuis la configuration.
     */
    private long getRankupPrice(String targetRank) {
        if (targetRank == null) return -1;
        String mineName = "mine-" + targetRank.toLowerCase();
        return plugin.getConfig().getLong("mines." + mineName + ".rankup-price", -1);
    }

    /**
     * Lance un seul rankup et affiche les messages.
     */
    private void performSingleRankup(Player player) {
        tryRankup(player, false);
    }

    /**
     * Effectue le maximum de rankups possibles.
     */
    private void performMaxRankup(Player player) {
        String originalRank = getCurrentRank(player);
        int rankupsCount = 0;
        long totalCost = 0;

        while (true) {
            String currentRankForLoop = getCurrentRank(player);
            String nextRank = getNextRank(currentRankForLoop);

            if (nextRank == null) break;

            long price = getRankupPrice(nextRank);
            if (price < 0 || plugin.getPlayerDataManager().getPlayerData(player.getUniqueId()).getCoins() < price) {
                break;
            }

            // Nous devons manuellement additionner le co√ªt ici car tryRankup le d√©duit.
            totalCost += price;

            if (!tryRankup(player, true)) {
                // Si tryRankup √©choue pour une raison quelconque, nous annulons le dernier co√ªt ajout√© et nous arr√™tons.
                totalCost -= price;
                break;
            }
            rankupsCount++;
        }

        if (rankupsCount > 0) {
            String finalRank = getCurrentRank(player);
            PlayerData playerData = plugin.getPlayerDataManager().getPlayerData(player.getUniqueId());

            player.sendMessage("¬ßa‚úÖ Rankup ALL termin√©!");
            player.sendMessage("¬ß7Progression: ¬ße" + originalRank.toUpperCase() + " ¬ß7‚Üí ¬ßa" + finalRank.toUpperCase());
            player.sendMessage("¬ß7Rankups effectu√©s: ¬ßa" + rankupsCount);
            player.sendMessage("¬ß7Co√ªt total: ¬ßc-" + NumberFormatter.format(totalCost) + " coins");
            player.sendMessage("¬ß7Coins restants: ¬ße" + NumberFormatter.format(playerData.getCoins()));
            player.playSound(player.getLocation(), org.bukkit.Sound.ENTITY_PLAYER_LEVELUP, 1.0f, 1.0f);

            if (finalRank.equals("z")) {
                player.sendMessage("¬ß6üèÜ F√©licitations! Vous avez atteint le rang maximum!");
                player.sendMessage("¬ß6‚ú® Vous pouvez maintenant effectuer un /prestige pour obtenir des bonus permanents!");
            }

            plugin.getPluginLogger().info("Rankup All effectu√©: " + player.getName() + " " +
                    originalRank.toUpperCase() + " ‚Üí " + finalRank.toUpperCase() +
                    " (" + rankupsCount + " rankups, co√ªt: " + totalCost + " coins)");
        } else {
            player.sendMessage("¬ßcVous n'avez pas assez d'argent pour le prochain rang ou vous √™tes d√©j√† au rang maximum.");
        }
    }

    /**
     * Effectue l'auto-rankup pour un joueur.
     */
    public void performAutoRankup(Player player) {
        String originalRank = getCurrentRank(player);
        int rankupsCount = 0;

        while (tryRankup(player, true)) {
            rankupsCount++;
        }

        if (rankupsCount > 0) {
            String finalRank = getCurrentRank(player);
            player.sendMessage("¬ßaüîÑ Auto-rankup: ¬ße" + originalRank.toUpperCase() + " ¬ß7‚Üí ¬ßa" +
                    finalRank.toUpperCase() + " ¬ß7(" + rankupsCount + " niveau" +
                    (rankupsCount > 1 ? "x" : "") + ")");
            plugin.getPluginLogger().info("Auto-rankup effectu√© pour " + player.getName() + ": " + rankupsCount + " niveau(x).");
        }
    }

    /**
     * V√©rifie si un joueur peut effectuer un auto-rankup.
     */
    public boolean canAutoRankup(Player player) {
        if (!player.hasPermission("specialmine.vip") && !player.hasPermission("specialmine.admin")) {
            return false;
        }
        PlayerData playerData = plugin.getPlayerDataManager().getPlayerData(player.getUniqueId());
        return playerData.hasAutoRankup();
    }

    /**
     * Active/d√©sactive l'auto-rankup pour un joueur.
     */
    private void toggleAutoRankup(Player player) {
        PlayerData playerData = plugin.getPlayerDataManager().getPlayerData(player.getUniqueId());
        boolean currentState = playerData.hasAutoRankup();

        playerData.setAutoRankup(!currentState);
        plugin.getPlayerDataManager().markDirty(player.getUniqueId());

        if (currentState) {
            player.sendMessage("¬ßc‚ùå Auto-rankup d√©sactiv√©");
        } else {
            player.sendMessage("¬ßa‚úÖ Auto-rankup activ√©");
        }
    }

    /**
     * Affiche les informations de rankup.
     */
    private void showRankupInfo(Player player) {
        String currentRank = getCurrentRank(player);
        String nextRank = getNextRank(currentRank);
        PlayerData playerData = plugin.getPlayerDataManager().getPlayerData(player.getUniqueId());

        player.sendMessage("¬ß8‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨");
        player.sendMessage("¬ß6‚õè ¬ßlINFORMATIONS RANKUP");
        player.sendMessage("¬ß8‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨");
        player.sendMessage("¬ß7Rang actuel: ¬ßa" + currentRank.toUpperCase());

        if (nextRank != null) {
            long price = getRankupPrice(nextRank);
            player.sendMessage("¬ß7Prochain rang: ¬ße" + nextRank.toUpperCase());
            player.sendMessage("¬ß7Prix: ¬ßc" + NumberFormatter.format(price) + " coins");
            player.sendMessage("¬ß7Vos coins: ¬ße" + NumberFormatter.format(playerData.getCoins()) + " coins");

            if (playerData.getCoins() >= price) {
                player.sendMessage("¬ßa‚úÖ Vous pouvez rankup!");
            } else {
                long needed = price - playerData.getCoins();
                player.sendMessage("¬ßc‚ùå Il vous manque " + NumberFormatter.format(needed) + " coins");
            }
        } else {
            player.sendMessage("¬ß6‚òÖ Vous √™tes au rang maximum (Z)!");
            player.sendMessage("¬ß7Utilisez ¬ße/prestige ¬ß7pour continuer votre progression.");
        }

        if (player.hasPermission("specialmine.vip") || player.hasPermission("specialmine.admin")) {
            boolean autoRankupEnabled = playerData.hasAutoRankup();
            player.sendMessage("¬ß7Auto-rankup VIP: " +
                    (autoRankupEnabled ? "¬ßa‚úÖ Activ√©" : "¬ßc‚ùå D√©sactiv√©"));
        }

        player.sendMessage("¬ß8‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨");
    }

    /**
     * Envoie le message d'aide.
     */
    private void sendHelpMessage(Player player) {
        player.sendMessage("¬ß8‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨");
        player.sendMessage("¬ß6‚õè ¬ßlCOMMANDES RANKUP");
        player.sendMessage("¬ß8‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨");
        player.sendMessage("¬ße/rankup ¬ß7- Monte d'un rang");
        player.sendMessage("¬ße/rankup all ¬ß7- Monte au maximum possible");
        player.sendMessage("¬ße/rankup info ¬ß7- Informations sur votre progression");

        if (player.hasPermission("specialmine.vip") || player.hasPermission("specialmine.admin")) {
            player.sendMessage("¬ße/rankup auto ¬ß7- Active/d√©sactive l'auto-rankup VIP");
        }

        if (player.hasPermission("specialmine.admin")) {
            player.sendMessage("¬ßc/rankup force <joueur> <rang> ¬ß7- Force un rang (admin)");
        }

        player.sendMessage("¬ß8‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨");
    }

    /**
     * ADMIN: Force le rang d'un joueur.
     */
    private void forceRankPlayer(Player admin, String playerName, String rank) {
        Player target = plugin.getServer().getPlayer(playerName);
        if (target == null) {
            admin.sendMessage("¬ßc‚ùå Joueur introuvable ou hors ligne!");
            return;
        }

        if (rank.length() != 1 || rank.charAt(0) < 'a' || rank.charAt(0) > 'z') {
            admin.sendMessage("¬ßc‚ùå Rang invalide! Utilisez une lettre de a √† z.");
            return;
        }

        setMinePermissionToRank(target, rank);

        admin.sendMessage("¬ßa‚úÖ Rang forc√© pour " + target.getName() + ": " + rank.toUpperCase());
        target.sendMessage("¬ßa‚úÖ Votre rang a √©t√© d√©fini √† " + rank.toUpperCase() + " par un administrateur!");

        plugin.getPluginLogger().info("Rang forc√© par " + admin.getName() + " pour " + target.getName() + ": " + rank.toUpperCase());
    }

    @Override
    public List<String> onTabComplete(CommandSender sender, @NotNull Command command, @NotNull String alias, String[] args) {
        List<String> completions = new ArrayList<>();
        List<String> subCommands = new ArrayList<>(Arrays.asList("all", "max", "info"));

        if (sender.hasPermission("specialmine.vip") || sender.hasPermission("specialmine.admin")) {
            subCommands.add("auto");
        }
        if (sender.hasPermission("specialmine.admin")) {
            subCommands.add("force");
        }

        if (args.length == 1) {
            StringUtil.copyPartialMatches(args[0], subCommands, completions);
        } else if (args.length == 2 && args[0].equalsIgnoreCase("force") && sender.hasPermission("specialmine.admin")) {
            plugin.getServer().getOnlinePlayers().forEach(player -> completions.add(player.getName()));
        } else if (args.length == 3 && args[0].equalsIgnoreCase("force") && sender.hasPermission("specialmine.admin")) {
            for (char c = 'a'; c <= 'z'; c++) {
                completions.add(String.valueOf(c));
            }
        }

        Collections.sort(completions);
        return completions;
    }
}