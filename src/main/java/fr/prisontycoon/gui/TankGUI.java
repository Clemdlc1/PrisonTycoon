package fr.prisontycoon.gui;

import fr.prisontycoon.PrisonTycoon;
import fr.prisontycoon.data.PlayerData;
import fr.prisontycoon.data.TankData;
import fr.prisontycoon.utils.NumberFormatter;
import org.bukkit.Bukkit;
import org.bukkit.ChatColor;
import org.bukkit.Material;
import org.bukkit.Sound;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.inventory.ClickType;
import org.bukkit.event.inventory.InventoryCloseEvent;
import org.bukkit.event.player.AsyncPlayerChatEvent;
import org.bukkit.inventory.Inventory;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.ItemMeta;

import java.util.*;

/**
 * Interface graphique pour configurer les Tanks - Version r√©organis√©e
 */
public class TankGUI implements Listener {

    // Mat√©riaux disponibles pour filtres
    private static final Material[] COMMON_ORES = {
            Material.COAL_ORE, Material.IRON_ORE, Material.GOLD_ORE,
            Material.DIAMOND_ORE, Material.EMERALD_ORE, Material.LAPIS_ORE,
            Material.REDSTONE_ORE, Material.COPPER_ORE
    };
    private static final Material[] DEEPSLATE_ORES = {
            Material.DEEPSLATE_COAL_ORE, Material.DEEPSLATE_IRON_ORE, Material.DEEPSLATE_GOLD_ORE,
            Material.DEEPSLATE_DIAMOND_ORE, Material.DEEPSLATE_EMERALD_ORE, Material.DEEPSLATE_LAPIS_ORE,
            Material.DEEPSLATE_REDSTONE_ORE, Material.DEEPSLATE_COPPER_ORE
    };
    private static final Material[] NETHER_MATERIALS = {
            Material.NETHER_QUARTZ_ORE, Material.NETHER_GOLD_ORE, Material.ANCIENT_DEBRIS,
            Material.NETHERRACK, Material.SOUL_SAND, Material.SOUL_SOIL
    };
    private final PrisonTycoon plugin;
    private final Map<UUID, String> openTankGUIs = new HashMap<>();
    private final Map<UUID, String> awaitingPriceInput = new HashMap<>();
    private final Map<UUID, Material> awaitingPriceMaterial = new HashMap<>();
    private final Map<UUID, String> awaitingNameInput = new HashMap<>();

    public TankGUI(PrisonTycoon plugin) {
        this.plugin = plugin;
        Bukkit.getPluginManager().registerEvents(this, plugin);
    }

    /**
     * Ouvre la GUI principale du Tank - Layout r√©organis√©
     */
    public void openTankGUI(Player player, String tankId) {
        TankData tankData = plugin.getTankManager().getTankCache().get(tankId);

        if (tankData == null) {
            player.sendMessage("¬ßc‚ùå Tank introuvable!");
            return;
        }

        // V√©rifier la propri√©t√©
        if (!tankData.getOwner().equals(player.getUniqueId())) {
            player.sendMessage("¬ßc‚ùå Vous n'√™tes pas le propri√©taire de ce tank!");
            return;
        }

        Inventory gui = plugin.getGUIManager().createInventory(36, "¬ß6‚ö° Tank ¬ß8- ¬ßfMenu");
        plugin.getGUIManager().registerOpenGUI(player, GUIType.TANK_CONFIG, gui, java.util.Map.of("tank_id", tankId));
        plugin.getGUIManager().fillBorders(gui);

        // === LIGNE 1 : INFORMATIONS ===
        gui.setItem(4, createInfoItem(tankData));

        // === LIGNE 2 : GESTION ===
        gui.setItem(11, createCustomNameItem(tankData));
        gui.setItem(13, createSellAllItem());
        gui.setItem(15, createContentsItem(tankData));

        // === LIGNE 3 : ACTIONS ===
        gui.setItem(20, createBillsOverviewItem(tankData));
        gui.setItem(21, createWithdrawAllItem());
        gui.setItem(23, createFiltersMenuButton());
        gui.setItem(24, createPricesOverviewItem(tankData));

        // Boutons navigation/informations suppl√©mentaires
        gui.setItem(31, createCloseButton());

        player.openInventory(gui);
        openTankGUIs.put(player.getUniqueId(), tankId);
    }

    /**
     * Ouvre la GUI de visualisation des prix pour un autre joueur
     */
    public void openPricesViewGUI(Player player, TankData tankData) {
        Inventory gui = plugin.getGUIManager().createInventory(54, "¬ß6üí∞ Prix - Tank de " +
                plugin.getServer().getOfflinePlayer(tankData.getOwner()).getName());
        plugin.getGUIManager().registerOpenGUI(player, GUIType.TANK_PRICES, gui);
        plugin.getGUIManager().fillBorders(gui);

        // Informations
        gui.setItem(4, createPublicInfoItem(tankData));

        if (tankData.getPrices().isEmpty()) {
            // Aucun prix configur√©
            ItemStack noPrice = new ItemStack(Material.BARRIER);
            ItemMeta meta = noPrice.getItemMeta();
            plugin.getGUIManager().applyName(meta, "¬ßc‚ùå Aucun prix configur√©");
            plugin.getGUIManager().applyLore(meta, Arrays.asList(
                    "¬ß7Ce tank n'ach√®te aucun item",
                    "¬ß7pour le moment"
            ));
            noPrice.setItemMeta(meta);
            gui.setItem(22, noPrice);
        } else {
            // Afficher les prix
            int slot = 10;
            for (Map.Entry<Material, Long> entry : tankData.getPrices().entrySet()) {
                if (slot >= 44) break;

                ItemStack priceItem = new ItemStack(entry.getKey());
                ItemMeta meta = priceItem.getItemMeta();
                plugin.getGUIManager().applyName(meta, "¬ßf" + entry.getKey().name().toLowerCase());
                plugin.getGUIManager().applyLore(meta, Arrays.asList(
                        "¬ß7Prix d'achat: ¬ßa" + NumberFormatter.format(entry.getValue()) + "$ ¬ß7par item",
                        "¬ß7Stock actuel: ¬ßb" + NumberFormatter.format(tankData.getContents().getOrDefault(entry.getKey(), 0)),
                        "",
                        "¬ß7Vendez vos " + entry.getKey().name().toLowerCase(),
                        "¬ß7en cliquant sur ce tank!"
                ));
                priceItem.setItemMeta(meta);
                gui.setItem(slot, priceItem);

                slot++;
                if ((slot + 1) % 9 == 0) slot += 2; // Passer √† la ligne suivante
            }
        }

        // Bouton fermer
        gui.setItem(49, createCloseButton());

        player.openInventory(gui);
    }

    /**
     * Ouvre la GUI Filtres & Prix (vue par d√©faut: manage)
     */
    public void openMaterialSelectionGUI(Player player, String tankId, int page) {
        openMaterialSelectionGUI(player, tankId, page, "manage");
    }

    /**
     * Ouvre la GUI Filtres & Prix avec vue (manage/select)
     */
    public void openMaterialSelectionGUI(Player player, String tankId, int page, String view) {
        if ("select".equalsIgnoreCase(view)) {
            // Vue s√©lection des mat√©riaux (ajout)
            List<TankFilter> filters = Arrays.asList(TankFilter.values());
            int itemsPerPage = 45;
            int totalPages = Math.max(1, (int) Math.ceil(filters.size() / (double) itemsPerPage));
            page = Math.max(0, Math.min(page, totalPages - 1));

            String title = "¬ßeüîß Ajouter un filtre ¬ß7(¬ße" + (page + 1) + "¬ß7/¬ße" + totalPages + "¬ß7)";
            Inventory gui = plugin.getGUIManager().createInventory(54, title);

            int start = page * itemsPerPage;
            int end = Math.min(start + itemsPerPage, filters.size());
            int slot = 0;
            for (int i = start; i < end; i++) {
                TankFilter tf = filters.get(i);
                ItemStack it = new ItemStack(tf.material());
                ItemMeta meta = it.getItemMeta();
                plugin.getGUIManager().applyName(meta, tf.displayName());
                plugin.getGUIManager().applyLore(meta, Arrays.asList(
                        "¬ß7Clic pour autoriser ce mat√©riau",
                        "¬ß7dans les filtres du tank"
                ));
                it.setItemMeta(meta);
                gui.setItem(slot++, it);
            }

            // Navigation
            gui.setItem(45, createBackButton());
            if (page > 0) {
                ItemStack prev = new ItemStack(Material.ARROW);
                ItemMeta pMeta = prev.getItemMeta();
                plugin.getGUIManager().applyName(pMeta, "¬ß7‚Üê Page pr√©c√©dente");
                prev.setItemMeta(pMeta);
                gui.setItem(46, prev);
            }
            if (page < totalPages - 1) {
                ItemStack next = new ItemStack(Material.ARROW);
                ItemMeta nMeta = next.getItemMeta();
                plugin.getGUIManager().applyName(nMeta, "¬ß7Page suivante ‚Üí");
                next.setItemMeta(nMeta);
                gui.setItem(52, next);
            }
            gui.setItem(53, createCloseButton());

            plugin.getGUIManager().registerOpenGUI(player, GUIType.TANK_FILTER, gui, java.util.Map.of(
                    "tank_filter_view", "select",
                    "tank_filter_page", String.valueOf(page),
                    "tank_id", tankId
            ));
            player.openInventory(gui);
            return;
        }

        // Vue gestion (manage) - filtres actifs + actions
        TankData tankData = plugin.getTankManager().getTankCache().get(tankId);
        if (tankData == null) return;

        int itemsPerPage = 28;
        java.util.List<Material> active = new java.util.ArrayList<>(tankData.getFilters());
        int totalPages = Math.max(1, (int) Math.ceil(active.size() / (double) itemsPerPage));
        page = Math.max(0, Math.min(page, totalPages - 1));

        Inventory gui = plugin.getGUIManager().createInventory(54, "¬ßeüîß Filtres & Prix ¬ß7(¬ße" + (page + 1) + "¬ß7/¬ße" + totalPages + "¬ß7)");
        plugin.getGUIManager().fillBorders(gui);

        int start = page * itemsPerPage;
        int end = Math.min(start + itemsPerPage, active.size());
        int slot = 10;
        for (int i = start; i < end; i++) {
            gui.setItem(slot++, createMaterialFilterItem(tankData, active.get(i)));
            if ((slot + 1) % 9 == 0) slot += 2;
        }

        // Ajouter un filtre
        ItemStack add = new ItemStack(Material.GREEN_WOOL);
        ItemMeta aMeta = add.getItemMeta();
        plugin.getGUIManager().applyName(aMeta, "¬ßa+ Ajouter un filtre");
        plugin.getGUIManager().applyLore(aMeta, java.util.List.of("¬ß7Ouvre la s√©lection des mat√©riaux"));
        add.setItemMeta(aMeta);
        gui.setItem(48, add);

        // Navigation
        gui.setItem(45, createBackButton());
        if (page > 0) {
            ItemStack prev = new ItemStack(Material.ARROW);
            ItemMeta pMeta = prev.getItemMeta();
            plugin.getGUIManager().applyName(pMeta, "¬ß7‚Üê Page pr√©c√©dente");
            prev.setItemMeta(pMeta);
            gui.setItem(46, prev);
        }
        if (page < totalPages - 1) {
            ItemStack next = new ItemStack(Material.ARROW);
            ItemMeta nMeta = next.getItemMeta();
            plugin.getGUIManager().applyName(nMeta, "¬ß7Page suivante ‚Üí");
            next.setItemMeta(nMeta);
            gui.setItem(52, next);
        }
        gui.setItem(49, createCloseButton());

        plugin.getGUIManager().registerOpenGUI(player, GUIType.TANK_FILTER, gui, java.util.Map.of(
                "tank_filter_view", "manage",
                "tank_filter_page", String.valueOf(page),
                "tank_id", tankId
        ));
        player.openInventory(gui);
    }

    /**
     * Cr√©e l'item d'information du tank
     */
    private ItemStack createInfoItem(TankData tankData) {
        ItemStack item = new ItemStack(Material.BARREL);
        ItemMeta meta = item.getItemMeta();
        plugin.getGUIManager().applyName(meta, "¬ß6‚ö° Informations du Tank");

        List<String> lore = Arrays.asList(
                "¬ß7Propri√©taire: ¬ße" + plugin.getServer().getOfflinePlayer(tankData.getOwner()).getName(),
                "¬ß7Nom personnalis√©: " + (tankData.hasCustomName() ? "¬ßf" + tankData.getCustomName() : "¬ßcAucun"),
                "",
                "¬ß7Capacit√©: ¬ßb" + NumberFormatter.format(tankData.getTotalItems()) + "¬ß7/¬ßb" + NumberFormatter.format(TankData.MAX_CAPACITY),
                "¬ß7Filtres actifs: ¬ße" + tankData.getFilters().size(),
                "¬ß7Prix configur√©s: ¬ße" + tankData.getPrices().size(),
                "¬ß7Position: " + (tankData.isPlaced() ? "¬ßaPlac√©" : "¬ßcNon plac√©"),
                "",
                "¬ß7Ce tank ach√®te automatiquement les items",
                "¬ß7avec de l'argent pr√©lev√© sur votre compte"
        );
        plugin.getGUIManager().applyLore(meta, lore);
        item.setItemMeta(meta);
        return item;
    }

    // === CR√âATION DES ITEMS ===

    /**
     * Cr√©e l'item d'information publique du tank
     */
    private ItemStack createPublicInfoItem(TankData tankData) {
        ItemStack item = new ItemStack(Material.BARREL);
        ItemMeta meta = item.getItemMeta();
        String ownerName = plugin.getServer().getOfflinePlayer(tankData.getOwner()).getName();

        plugin.getGUIManager().applyName(meta, "¬ß6‚ö° Tank de " + ownerName);

        List<String> lore = new ArrayList<>();
        if (tankData.hasCustomName()) {
            lore.add("¬ß7\"¬ßf" + tankData.getCustomName() + "¬ß7\"");
            lore.add("");
        }

        lore.addAll(Arrays.asList(
                "¬ß7Propri√©taire: ¬ße" + ownerName,
                "¬ß7Items en stock: ¬ßb" + NumberFormatter.format(tankData.getTotalItems()),
                "¬ß7Types d'items accept√©s: ¬ße" + tankData.getPrices().size(),
                "",
                "¬ß7Cliquez sur ce tank pour lui vendre",
                "¬ß7vos items aux prix affich√©s!"
        ));

        plugin.getGUIManager().applyLore(meta, lore);
        item.setItemMeta(meta);
        return item;
    }

    /**
     * Cr√©e l'item de nom personnalis√©
     */
    private ItemStack createCustomNameItem(TankData tankData) {
        ItemStack item = new ItemStack(Material.NAME_TAG);
        ItemMeta meta = item.getItemMeta();
        plugin.getGUIManager().applyName(meta, "¬ße‚úè Nom personnalis√©");

        List<String> lore = new ArrayList<>();
        lore.add("¬ß7Nom actuel: " + (tankData.hasCustomName() ? "¬ßf" + tankData.getCustomName() : "¬ßcAucun"));
        lore.add("");
        lore.add("¬ß7Clic gauche: ¬ßeChanger le nom");
        lore.add("¬ß7Clic droit: ¬ßcSupprimer le nom");
        lore.add("");
        lore.add("¬ß7Le nom appara√Ætra au-dessus du tank");
        lore.add("¬ß7en plus des informations techniques");

        plugin.getGUIManager().applyLore(meta, lore);
        item.setItemMeta(meta);
        return item;
    }

    /**
     * Cr√©e l'item de gestion des filtres
     */
    private ItemStack createFiltersItem(TankData tankData) {
        ItemStack item = new ItemStack(Material.HOPPER);
        ItemMeta meta = item.getItemMeta();
        plugin.getGUIManager().applyName(meta, "¬ßeüîß Filtres actifs");

        List<String> lore = new ArrayList<>();
        lore.add("¬ß7Nombre de filtres: ¬ße" + tankData.getFilters().size());
        lore.add("");

        if (tankData.getFilters().isEmpty()) {
            lore.add("¬ßc Aucun filtre configur√©");
            lore.add("¬ß7Ajoutez des filtres pour que le tank");
            lore.add("¬ß7puisse acheter des items");
        } else {
            lore.add("¬ß7Mat√©riaux accept√©s:");
            int count = 0;
            for (Material material : tankData.getFilters()) {
                if (count >= 4) {
                    lore.add("¬ß8‚ñ∏ ¬ß7... et " + (tankData.getFilters().size() - 4) + " autres");
                    break;
                }
                lore.add("¬ß8‚ñ∏ ¬ß7" + material.name().toLowerCase());
                count++;
            }
        }

        plugin.getGUIManager().applyLore(meta, lore);
        item.setItemMeta(meta);
        return item;
    }

    /**
     * Bouton d'acc√®s au sous-menu Filtres/Prix
     */
    private ItemStack createFiltersMenuButton() {
        ItemStack item = new ItemStack(Material.HOPPER);
        ItemMeta meta = item.getItemMeta();
        plugin.getGUIManager().applyName(meta, "¬ßeüîß Filtres & Prix");
        plugin.getGUIManager().applyLore(meta, List.of(
                "¬ß7Ouvrir la gestion des filtres",
                "¬ß7et configuration des prix"
        ));
        item.setItemMeta(meta);
        return item;
    }

    /**
     * Cr√©e l'item de contenu du tank
     */
    private ItemStack createContentsItem(TankData tankData) {
        ItemStack item = new ItemStack(Material.CHEST);
        ItemMeta meta = item.getItemMeta();
        plugin.getGUIManager().applyName(meta, "¬ßbüì¶ Contenu stock√©");

        List<String> lore = new ArrayList<>();
        lore.add("¬ß7Total: ¬ßb" + NumberFormatter.format(tankData.getTotalItems()) + " items");
        double percentage = (double) tankData.getTotalItems() / TankData.MAX_CAPACITY * 100;
        lore.add("¬ß7Remplissage: ¬ße" + String.format("%.2f", percentage) + "%");
        lore.add("");

        if (tankData.getContents().isEmpty()) {
            lore.add("¬ß7Le tank est vide");
        } else {
            lore.add("¬ß7Contenu stock√©:");
            int count = 0;
            for (Map.Entry<Material, Integer> entry : tankData.getContents().entrySet()) {
                if (count >= 4) {
                    lore.add("¬ß8‚ñ∏ ¬ß7... et " + (tankData.getContents().size() - 4) + " autres types");
                    break;
                }
                lore.add("¬ß8‚ñ∏ ¬ßb" + NumberFormatter.format(entry.getValue()) + "x ¬ß7" +
                        entry.getKey().name().toLowerCase());
                count++;
            }
        }

        lore.add("");
        lore.add("¬ß7Clic: ¬ßbR√©cup√©rer tout le contenu");

        plugin.getGUIManager().applyLore(meta, lore);
        item.setItemMeta(meta);
        return item;
    }

    /**
     * Bouton pour vendre tout le contenu (items + billets) avec bonus du joueur
     */
    private ItemStack createSellAllItem() {
        ItemStack item = new ItemStack(Material.GOLD_INGOT);
        ItemMeta meta = item.getItemMeta();
        plugin.getGUIManager().applyName(meta, "¬ß6üí∞ Vendre le contenu");
        plugin.getGUIManager().applyLore(meta, List.of(
                "¬ß7Vend tout le contenu du tank",
                "¬ß7en appliquant vos bonus de vente"
        ));
        item.setItemMeta(meta);
        return item;
    }

    /**
     * Aper√ßu des billets stock√©s et acc√®s au sous-menu
     */
    private ItemStack createBillsOverviewItem(TankData tankData) {
        ItemStack item = new ItemStack(Material.PAPER);
        ItemMeta meta = item.getItemMeta();
        plugin.getGUIManager().applyName(meta, "¬ßfüßæ Billets stock√©s");
        int total = tankData.getBills().values().stream().mapToInt(Integer::intValue).sum();
        List<String> lore = new ArrayList<>();
        lore.add("¬ß7Total billets: ¬ßb" + NumberFormatter.format(total));
        if (total == 0) {
            lore.add("¬ß7Aucun billet pour le moment");
        } else {
            int count = 0;
            for (var e : tankData.getBills().entrySet()) {
                if (count >= 5) {
                    lore.add("¬ß8‚ñ∏ ¬ß7... et d'autres");
                    break;
                }
                lore.add("¬ß8‚ñ∏ ¬ßfTier " + e.getKey() + " ¬ß7x ¬ßb" + NumberFormatter.format(e.getValue()));
                count++;
            }
        }
        lore.add("");
        lore.add("¬ß7Clic: ¬ßbOuvrir le menu des billets");
        plugin.getGUIManager().applyLore(meta, lore);
        item.setItemMeta(meta);
        return item;
    }

    /**
     * Cr√©e l'item de vue d'ensemble des prix
     */
    private ItemStack createPricesOverviewItem(TankData tankData) {
        ItemStack item = new ItemStack(Material.GOLD_NUGGET);
        ItemMeta meta = item.getItemMeta();
        plugin.getGUIManager().applyName(meta, "¬ß6üí∞ Vue d'ensemble des prix");

        List<String> lore = new ArrayList<>();
        lore.add("¬ß7Prix configur√©s: ¬ße" + tankData.getPrices().size());
        lore.add("");

        if (tankData.getPrices().isEmpty()) {
            lore.add("¬ßc Aucun prix configur√©");
            lore.add("¬ß7Configurez les prix pour chaque");
            lore.add("¬ß7mat√©riau en cliquant dessus");
        } else {
            lore.add("¬ß7Prix d'achat configur√©s:");
            int count = 0;
            for (Map.Entry<Material, Long> entry : tankData.getPrices().entrySet()) {
                if (count >= 4) {
                    lore.add("¬ß8‚ñ∏ ¬ß7... et " + (tankData.getPrices().size() - 4) + " autres");
                    break;
                }
                lore.add("¬ß8‚ñ∏ ¬ß7" + entry.getKey().name().toLowerCase() + " ¬ßa" +
                        NumberFormatter.format(entry.getValue()) + "$/item");
                count++;
            }
        }

        plugin.getGUIManager().applyLore(meta, lore);
        item.setItemMeta(meta);
        return item;
    }

    /**
     * Cr√©e l'item pour ajouter un filtre
     */
    private ItemStack createAddFilterItem() {
        ItemStack item = new ItemStack(Material.GREEN_WOOL);
        ItemMeta meta = item.getItemMeta();
        plugin.getGUIManager().applyName(meta, "¬ßa+ Ajouter un filtre");

        List<String> lore = Arrays.asList(
                "¬ß7Ouvre la s√©lection de mat√©riaux",
                "¬ß7pour ajouter un nouveau filtre",
                "",
                "¬ß7Vous pouvez filtrer n'importe",
                "¬ß7quel mat√©riau ou bloc du jeu"
        );
        plugin.getGUIManager().applyLore(meta, lore);
        item.setItemMeta(meta);
        return item;
    }

    /**
     * Cr√©e l'item pour vider tous les filtres
     */
    private ItemStack createClearFiltersItem() {
        ItemStack item = new ItemStack(Material.RED_WOOL);
        ItemMeta meta = item.getItemMeta();
        plugin.getGUIManager().applyName(meta, "¬ßc‚úó Vider les filtres");

        List<String> lore = Arrays.asList(
                "¬ß7Supprime tous les filtres",
                "¬ß7et prix configur√©s",
                "",
                "¬ßc‚ö† Action irr√©versible!"
        );
        plugin.getGUIManager().applyLore(meta, lore);
        item.setItemMeta(meta);
        return item;
    }

    /**
     * Cr√©e l'item pour vider tous les prix
     */
    private ItemStack createClearPricesItem() {
        ItemStack item = new ItemStack(Material.ORANGE_WOOL);
        ItemMeta meta = item.getItemMeta();
        plugin.getGUIManager().applyName(meta, "¬ß6‚úó R√©initialiser les prix");

        List<String> lore = Arrays.asList(
                "¬ß7Remet tous les prix √† z√©ro",
                "¬ß7sans supprimer les filtres",
                "",
                "¬ß6‚ö† Action irr√©versible!"
        );
        plugin.getGUIManager().applyLore(meta, lore);
        item.setItemMeta(meta);
        return item;
    }

    /**
     * Cr√©e l'item pour retirer tout le contenu
     */
    private ItemStack createWithdrawAllItem() {
        ItemStack item = new ItemStack(Material.ENDER_CHEST);
        ItemMeta meta = item.getItemMeta();
        plugin.getGUIManager().applyName(meta, "¬ßcüì§ R√©cup√©rer le contenu");

        List<String> lore = Arrays.asList(
                "¬ß7Transf√®re tout le contenu du tank",
                "¬ß7vers votre inventaire",
                "",
                "¬ßc‚ö† V√©rifiez que vous avez assez de place!"
        );
        plugin.getGUIManager().applyLore(meta, lore);
        item.setItemMeta(meta);
        return item;
    }

    /**
     * Cr√©e un item de filtre pour un mat√©riau
     */
    private ItemStack createMaterialFilterItem(TankData tankData, Material material) {
        ItemStack item = new ItemStack(material);
        ItemMeta meta = item.getItemMeta();

        boolean isFiltered = tankData.getFilters().contains(material);
        long price = tankData.getPrice(material);

        plugin.getGUIManager().applyName(meta, (isFiltered ? "¬ßa‚úì " : "¬ßc‚úó ") + "¬ßf" + material.name().toLowerCase());

        List<String> lore = new ArrayList<>();
        lore.add("¬ß7Statut: " + (isFiltered ? "¬ßaAccept√©" : "¬ßcRefus√©"));

        if (isFiltered) {
            if (price > 0) {
                lore.add("¬ß7Prix: ¬ßa" + NumberFormatter.format(price) + "$/item");
                int stock = tankData.getContents().getOrDefault(material, 0);
                lore.add("¬ß7Stock: ¬ßb" + NumberFormatter.format(stock) + " items");
            } else {
                lore.add("¬ß7Prix: ¬ßc‚ö† Non configur√©");
            }
        }

        lore.add("");
        lore.add("¬ß7Clic gauche: ¬ße" + (isFiltered ? "D√©sactiver" : "Activer"));
        if (isFiltered) {
            lore.add("¬ß7Clic droit: ¬ßeConfigurer le prix");
        }

        plugin.getGUIManager().applyLore(meta, lore);
        item.setItemMeta(meta);
        return item;
    }

    /**
     * Cr√©e un item de s√©lection de mat√©riau
     */
    private ItemStack createMaterialSelectionItem(Material material) {
        ItemStack item = new ItemStack(material);
        ItemMeta meta = item.getItemMeta();
        plugin.getGUIManager().applyName(meta, "¬ßf" + material.name().toLowerCase());
        plugin.getGUIManager().applyLore(meta, Arrays.asList(
                "¬ß7Clic pour ajouter ce mat√©riau",
                "¬ß7aux filtres du tank",
                "",
                "¬ß7Vous pourrez ensuite configurer",
                "¬ß7le prix d'achat pour cet item"
        ));
        item.setItemMeta(meta);
        return item;
    }

    /**
     * Cr√©e le bouton retour
     */
    private ItemStack createBackButton() {
        ItemStack item = new ItemStack(Material.ARROW);
        ItemMeta meta = item.getItemMeta();
        plugin.getGUIManager().applyName(meta, "¬ß7‚Üê Retour");
        plugin.getGUIManager().applyLore(meta, List.of("¬ß7Retour au menu principal"));
        item.setItemMeta(meta);
        return item;
    }

    /**
     * Cr√©e le bouton fermer
     */
    private ItemStack createCloseButton() {
        ItemStack item = new ItemStack(Material.BARRIER);
        ItemMeta meta = item.getItemMeta();
        plugin.getGUIManager().applyName(meta, "¬ßc‚úó Fermer");
        plugin.getGUIManager().applyLore(meta, List.of("¬ß7Fermer cette interface"));
        item.setItemMeta(meta);
        return item;
    }

    // Nouveau handler centralis√© appel√© par GUIListener
    public void handleClick(Player player, int slot, ItemStack clicked, ClickType clickType) {
        GUIType guiType = plugin.getGUIManager().getOpenGUIType(player);
        player.sendMessage("1");
        if (guiType == null) return;
        player.sendMessage("2");
        String tankId = plugin.getGUIManager().getGUIData(player, "tank_id");
        if (tankId == null) {
            tankId = openTankGUIs.get(player.getUniqueId());
        }
        if (tankId == null) return;
        player.sendMessage("3");

        switch (guiType) {
            case TANK_CONFIG -> {
                // Actions du menu principal
                if (clicked == null || clicked.getType() == Material.AIR) return;
                player.sendMessage("4");
                handleMainGUIClick(player, clicked, clickType, tankId);
            }
            case TANK_FILTER -> {
                String view = plugin.getGUIManager().getGUIData(player, "tank_filter_view");
                String pageStr = plugin.getGUIManager().getGUIData(player, "tank_filter_page");
                int page = 0;
                try {
                    if (pageStr != null) page = Integer.parseInt(pageStr);
                } catch (NumberFormatException ignored) {
                }

                if ("select".equalsIgnoreCase(view)) {
                    int itemsPerPage = 45;
                    int totalPages = Math.max(1, (int) Math.ceil(TankFilter.values().length / (double) itemsPerPage));
                    if (slot == 45) {
                        openMaterialSelectionGUI(player, tankId, 0, "manage");
                        return;
                    }
                    if (slot == 46 && page > 0) {
                        openMaterialSelectionGUI(player, tankId, page - 1, "select");
                        return;
                    }
                    if (slot == 52 && page < totalPages - 1) {
                        openMaterialSelectionGUI(player, tankId, page + 1, "select");
                        return;
                    }
                    if (slot == 53) {
                        player.closeInventory();
                        return;
                    }
                    if (clicked != null && clicked.getType() != Material.AIR) {
                        handleMaterialSelection(player, clicked, tankId);
                        openMaterialSelectionGUI(player, tankId, 0, "manage");
                    }
                    return;
                }

                // manage view
                if (slot == 45) {
                    openTankGUI(player, tankId);
                    return;
                }
                if (slot == 46 && page > 0) {
                    openMaterialSelectionGUI(player, tankId, page - 1, "manage");
                    return;
                }
                if (slot == 52) {
                    openMaterialSelectionGUI(player, tankId, page + 1, "manage");
                    return;
                }
                if (slot == 49) {
                    player.closeInventory();
                    return;
                }
                if (slot == 48) {
                    openMaterialSelectionGUI(player, tankId, 0, "select");
                    return;
                }

                if (clicked != null && clicked.getType() != Material.AIR) {
                    TankData tankData = plugin.getTankManager().getTankCache().get(tankId);
                    if (tankData != null && tankData.getFilters().contains(clicked.getType())) {
                        handleMaterialFilter(player, tankData, clicked.getType(), clickType);
                    }
                }
            }
            case TANK_BILLS -> {
                TankData tankData = plugin.getTankManager().getTankCache().get(tankId);
                if (tankData == null || clicked == null) return;
                if (clicked.getType() == Material.GOLD_BLOCK) {
                    long total = 0;
                    int qty = 0;
                    for (java.util.Map.Entry<Integer, Integer> e : tankData.getBills().entrySet()) {
                        total += plugin.getTankManager().getBillValue(e.getKey()) * e.getValue();
                        qty += e.getValue();
                    }
                    if (qty == 0) {
                        player.sendMessage("¬ßc‚ùå Aucun billet √† vendre!");
                        return;
                    }
                    double global = plugin.getGlobalBonusManager().getTotalBonusMultiplier(player, fr.prisontycoon.managers.GlobalBonusManager.BonusCategory.SELL_BONUS);
                    long finalValue = Math.round(total * global);
                    var pdata = plugin.getPlayerDataManager().getPlayerData(player.getUniqueId());
                    pdata.addCoins(finalValue);
                    tankData.clearBills();
                    plugin.getTankManager().saveTank(tankData);
                    plugin.getTankManager().updateTankNameTag(tankData);
                    player.sendMessage("¬ßa‚úì Vendu ¬ßb" + NumberFormatter.format(qty) + " ¬ßabillets pour ¬ße" + NumberFormatter.format(finalValue) + "$ ¬ßa(avec bonus)");
                    openBillsMenu(player, tankData);
                    return;
                }
                if (clicked.getType() == Material.CHEST_MINECART) {
                    int moved = 0;
                    java.util.Map<Integer, Integer> map = new java.util.HashMap<>(tankData.getBills());
                    for (java.util.Map.Entry<Integer, Integer> e : map.entrySet()) {
                        int tier = e.getKey();
                        int amount = e.getValue();
                        while (amount > 0 && player.getInventory().firstEmpty() != -1) {
                            int give = Math.min(64, amount);
                            ItemStack bill = plugin.getTankManager().createBillForTier(tier);
                            bill.setAmount(give);
                            player.getInventory().addItem(bill);
                            tankData.removeBills(tier, give);
                            amount -= give;
                            moved += give;
                        }
                    }
                    if (moved > 0) {
                        plugin.getTankManager().saveTank(tankData);
                        plugin.getTankManager().updateTankNameTag(tankData);
                        player.sendMessage("¬ßa‚úì R√©cup√©r√© ¬ßb" + NumberFormatter.format(moved) + " ¬ßabillets depuis le tank");
                    } else {
                        player.sendMessage("¬ßc‚ùå Inventaire plein ou aucun billet!");
                    }
                    openBillsMenu(player, tankData);
                    return;
                }
                if (slot == 49) { // back
                    openTankGUI(player, tankData.getId());
                }
            }
            case TANK_PRICES -> {
                if (clicked != null && clicked.getType() == Material.BARRIER) {
                    player.closeInventory();
                }
            }
            default -> {
            }
        }
    }

    /**
     * G√®re les clics dans la GUI principale
     */
    private void handleMainGUIClick(Player player, ItemStack clicked, ClickType clickType, String tankId) {
        TankData tankData = plugin.getTankManager().getTankCache().get(tankId);
        if (tankData == null) return;

        Material clickedType = clicked.getType();

        switch (clickedType) {
            case NAME_TAG -> handleCustomName(player, tankData, clickType);
            case GOLD_INGOT -> handleSellAllFromGUI(player, tankData);
            case GREEN_WOOL, HOPPER -> openMaterialSelectionGUI(player, tankId, 0);
            case RED_WOOL -> handleClearFilters(player, tankData);
            case ORANGE_WOOL -> handleClearPrices(player, tankData);
            case ENDER_CHEST -> handleWithdrawAll(player, tankData);
            case PAPER -> openBillsMenu(player, tankData);
            default -> {
                // V√©rifier si c'est un mat√©riau filtrable
                if (isMaterialFilterItem(clicked)) {
                    handleMaterialFilter(player, tankData, clickedType, clickType);
                }
            }
        }
    }

    private void openBillsMenu(Player player, TankData tankData) {
        // Simple listing avec options vendre tout / r√©cup√©rer tout
        Inventory gui = plugin.getGUIManager().createInventory(54, "¬ßfüßæ Billets");
        plugin.getGUIManager().fillBorders(gui);
        int slot = 10;
        for (var e : tankData.getBills().entrySet()) {
            if (slot > 43) break;
            int tier = e.getKey();
            int amount = e.getValue();
            ItemStack it = new ItemStack(Material.PAPER);
            ItemMeta meta = it.getItemMeta();
            plugin.getGUIManager().applyName(meta, "¬ßfBillet Tier " + tier);
            plugin.getGUIManager().applyLore(meta, List.of(
                    "¬ß7Tier " + tier + " (" + NumberFormatter.format(plugin.getTankManager().getBillValue(tier)) + "$)",
                    "¬ß7Utiliser /sell ou un tank pour vendre vos billets",
                    "",
                    "¬ß7Quantit√©: ¬ßb" + NumberFormatter.format(amount)
            ));
            it.setItemMeta(meta);
            gui.setItem(slot++, it);
            if ((slot + 1) % 9 == 0) slot += 2;
        }
        // Boutons actions
        ItemStack sellAll = new ItemStack(Material.GOLD_BLOCK);
        ItemMeta sMeta = sellAll.getItemMeta();
        plugin.getGUIManager().applyName(sMeta, "¬ß6Vendre tous les billets");
        sellAll.setItemMeta(sMeta);
        gui.setItem(48, sellAll);

        ItemStack takeAll = new ItemStack(Material.CHEST_MINECART);
        ItemMeta tMeta = takeAll.getItemMeta();
        plugin.getGUIManager().applyName(tMeta, "¬ßbR√©cup√©rer tous les billets");
        takeAll.setItemMeta(tMeta);
        gui.setItem(50, takeAll);

        gui.setItem(49, createBackButton());

        plugin.getGUIManager().registerOpenGUI(player, GUIType.TANK_BILLS, gui, java.util.Map.of("tank_id", tankData.getId()));
        player.openInventory(gui);
    }

    private void handleSellAllFromGUI(Player player, TankData tankData) {
        // Utilise la logique de SellHand (sans durabilit√©, bonus perso s'applique via GlobalBonusManager)
        var fakeSellHand = plugin.getSellHandManager();
        if (fakeSellHand == null) return;
        // Reproduire le calcul simplifi√© ici
        long totalValue = 0;
        int totalItems = 0;
        for (var entry : tankData.getContents().entrySet()) {
            long price = plugin.getConfigManager().getSellPrice(entry.getKey());
            if (price > 0) {
                totalValue += price * entry.getValue();
                totalItems += entry.getValue();
            }
        }
        for (var e : tankData.getBills().entrySet()) {
            long v = plugin.getTankManager().getBillValue(e.getKey());
            if (v > 0) {
                totalValue += v * e.getValue();
                totalItems += e.getValue();
            }
        }
        if (totalValue <= 0) {
            player.sendMessage("¬ßc‚ùå Rien √† vendre!");
            player.playSound(player.getLocation(), Sound.ENTITY_VILLAGER_NO, 1.0f, 1.0f);
            return;
        }
        double global = plugin.getGlobalBonusManager().getTotalBonusMultiplier(player, fr.prisontycoon.managers.GlobalBonusManager.BonusCategory.SELL_BONUS);
        long finalValue = Math.round(totalValue * global);
        var data = plugin.getPlayerDataManager().getPlayerData(player.getUniqueId());
        data.addCoins(finalValue);
        tankData.clearContents();
        tankData.clearBills();
        plugin.getTankManager().saveTank(tankData);
        plugin.getTankManager().updateTankNameTag(tankData);
        player.sendMessage("¬ßa‚úì Vendu ¬ßb" + NumberFormatter.format(totalItems) + " ¬ßaitems/billets pour ¬ße" + NumberFormatter.format(finalValue) + "$ ¬ßa(avec bonus)");
        player.playSound(player.getLocation(), Sound.ENTITY_PLAYER_LEVELUP, 1.0f, 1.0f);
        openTankGUI(player, tankData.getId());
    }

    /**
     * G√®re la s√©lection de mat√©riau
     */
    private void handleMaterialSelection(Player player, ItemStack clicked, String tankId) {
        if (clicked.getType() == Material.ARROW) {
            openTankGUI(player, tankId);
            return;
        }

        if (clicked.getType() == Material.BARRIER) {
            player.closeInventory();
            return;
        }

        TankData tankData = plugin.getTankManager().getTankCache().get(tankId);
        if (tankData == null) return;

        Material material = clicked.getType();
        if (tankData.getFilters().contains(material)) {
            player.sendMessage("¬ßc‚ùå Ce mat√©riau est d√©j√† filtr√©!");
            return;
        }

        tankData.addFilter(material);

        player.sendMessage("¬ßa‚úì Filtre ajout√© pour " + material.name().toLowerCase());
        player.playSound(player.getLocation(), Sound.UI_BUTTON_CLICK, 1.0f, 1.2f);

        openTankGUI(player, tankId);
    }

    /**
     * G√®re le nom personnalis√©
     */
    private void handleCustomName(Player player, TankData tankData, ClickType clickType) {
        if (clickType == ClickType.LEFT) {
            // Changer le nom
            player.closeInventory();
            player.sendMessage("¬ßeüí¨ Tapez le nouveau nom personnalis√© pour votre tank:");
            player.sendMessage("¬ß7Vous pouvez utiliser les codes couleur avec & (ex: &6Tank &cRapide)");
            player.sendMessage("¬ß7Tapez 'cancel' pour annuler");

            awaitingNameInput.put(player.getUniqueId(), tankData.getId());

        } else if (clickType == ClickType.RIGHT) {
            // Supprimer le nom
            if (tankData.hasCustomName()) {
                tankData.setCustomName(null);
                player.sendMessage("¬ßc‚úó Nom personnalis√© supprim√©");
                player.playSound(player.getLocation(), Sound.UI_BUTTON_CLICK, 1.0f, 0.8f);

                // Mettre √† jour le nametag si plac√©
                if (tankData.isPlaced()) {
                    plugin.getTankManager().updateTankNameTag(tankData);
                }

                openTankGUI(player, tankData.getId());
            } else {
                player.sendMessage("¬ßc‚ùå Ce tank n'a pas de nom personnalis√©!");
                player.playSound(player.getLocation(), Sound.ENTITY_VILLAGER_NO, 1.0f, 1.0f);
            }
        }
    }

    /**
     * G√®re la suppression de tous les filtres
     */
    private void handleClearFilters(Player player, TankData tankData) {
        if (tankData.getFilters().isEmpty()) {
            player.sendMessage("¬ßc‚ùå Aucun filtre √† supprimer!");
            player.playSound(player.getLocation(), Sound.ENTITY_VILLAGER_NO, 1.0f, 1.0f);
            return;
        }

        int filterCount = tankData.getFilters().size();
        tankData.clearFilters();

        player.sendMessage("¬ßc‚úó Supprim√© " + filterCount + " filtres et tous les prix!");
        player.playSound(player.getLocation(), Sound.ENTITY_ITEM_BREAK, 1.0f, 1.0f);

        openTankGUI(player, tankData.getId());
    }

    /**
     * G√®re la r√©initialisation des prix
     */
    private void handleClearPrices(Player player, TankData tankData) {
        if (tankData.getPrices().isEmpty()) {
            player.sendMessage("¬ßc‚ùå Aucun prix √† r√©initialiser!");
            player.playSound(player.getLocation(), Sound.ENTITY_VILLAGER_NO, 1.0f, 1.0f);
            return;
        }

        int priceCount = tankData.getPrices().size();
        for (Material material : tankData.getFilters()) {
            tankData.setPrice(material, 0L);
        }

        player.sendMessage("¬ß6‚úó R√©initialis√© " + priceCount + " prix!");
        player.playSound(player.getLocation(), Sound.UI_BUTTON_CLICK, 1.0f, 0.8f);

        openTankGUI(player, tankData.getId());
    }

    /**
     * G√®re le retrait de tout le contenu
     */
    private void handleWithdrawAll(Player player, TankData tankData) {
        if (tankData.getContents().isEmpty()) {
            player.sendMessage("¬ßc‚ùå Le tank est vide!");
            player.playSound(player.getLocation(), Sound.ENTITY_VILLAGER_NO, 1.0f, 1.0f);
            return;
        }

        int transferredItems = 0;
        Map<Material, Integer> contents = new HashMap<>(tankData.getContents());

        for (Map.Entry<Material, Integer> entry : contents.entrySet()) {
            Material material = entry.getKey();
            int amount = entry.getValue();

            // Cr√©er les ItemStacks et les donner au joueur
            while (amount > 0) {
                int stackSize = Math.min(amount, material.getMaxStackSize());
                ItemStack item = new ItemStack(material, stackSize);

                if (player.getInventory().firstEmpty() != -1) {
                    player.getInventory().addItem(item);
                    tankData.removeItems(material, stackSize);
                    transferredItems += stackSize;
                    amount -= stackSize;
                } else {
                    break; // Inventaire plein
                }
            }
        }

        if (transferredItems > 0) {
            player.sendMessage("¬ßa‚úì Transf√©r√© " + NumberFormatter.format(transferredItems) + " items vers votre inventaire!");
            player.playSound(player.getLocation(), Sound.ENTITY_ITEM_PICKUP, 1.0f, 1.2f);

            // Mettre √† jour le nametag si plac√©
            if (tankData.isPlaced()) {
                plugin.getTankManager().updateTankNameTag(tankData);
            }

            openTankGUI(player, tankData.getId());
        } else {
            player.sendMessage("¬ßc‚ùå Votre inventaire est plein!");
            player.playSound(player.getLocation(), Sound.ENTITY_VILLAGER_NO, 1.0f, 1.0f);
        }
    }

    /**
     * G√®re les filtres de mat√©riaux
     */
    private void handleMaterialFilter(Player player, TankData tankData, Material material, ClickType clickType) {
        if (clickType == ClickType.LEFT) {
            // Activer/d√©sactiver le filtre
            if (tankData.getFilters().contains(material)) {
                tankData.removeFilter(material);
                player.sendMessage("¬ßc‚úó Filtre d√©sactiv√© pour " + material.name().toLowerCase());
            } else {
                tankData.addFilter(material);
                player.sendMessage("¬ßa‚úì Filtre activ√© pour " + material.name().toLowerCase());
            }
            player.playSound(player.getLocation(), Sound.UI_BUTTON_CLICK, 1.0f, 1.0f);

            // Mettre √† jour la GUI
            openMaterialSelectionGUI(player, tankData.getId(), 0);

        } else if (clickType == ClickType.RIGHT && tankData.getFilters().contains(material)) {
            // Configurer le prix
            player.closeInventory();
            player.sendMessage("¬ßeüí¨ Tapez le prix d'achat pour " + material.name().toLowerCase() + " (en $ par item):");
            player.sendMessage("¬ß7Tapez 'cancel' pour annuler ou '0' pour d√©sactiver");

            awaitingPriceInput.put(player.getUniqueId(), tankData.getId());
            awaitingPriceMaterial.put(player.getUniqueId(), material);
        }
    }

    /**
     * V√©rifie si l'item est un filtre de mat√©riau
     */
    private boolean isMaterialFilterItem(ItemStack item) {
        return Arrays.asList(COMMON_ORES).contains(item.getType()) ||
                Arrays.asList(DEEPSLATE_ORES).contains(item.getType()) ||
                Arrays.asList(NETHER_MATERIALS).contains(item.getType());
    }

    @EventHandler
    public void onInventoryClose(InventoryCloseEvent event) {
        Player player = (Player) event.getPlayer();
        String tankId = openTankGUIs.remove(player.getUniqueId());

        if (tankId != null) {
            // Sauvegarder les modifications du tank
            TankData tankData = plugin.getTankManager().getTankCache().get(tankId);
            if (tankData != null) {
                plugin.getTankManager().saveTank(tankData);

                // Mettre √† jour le nametag si plac√©
                if (tankData.isPlaced()) {
                    plugin.getTankManager().updateTankNameTag(tankData);
                }
            }
        }
    }

    /**
     * V√©rifie si un joueur est en attente de saisie pour le nom ou le prix d'un tank.
     *
     * @param player Le joueur √† v√©rifier.
     * @return true si le joueur est en attente de saisie, false sinon.
     */
    public boolean isPlayerAwaitingInput(Player player) {
        UUID playerUUID = player.getUniqueId();
        return awaitingPriceInput.containsKey(playerUUID) || awaitingNameInput.containsKey(playerUUID);
    }

    /**
     * Appel√© par ChatListener pour traiter la saisie de prix/nom sans diffuser au chat
     */
    public void handleChatInput(Player player, String rawMessage) {
        UUID uuid = player.getUniqueId();
        String tankId = awaitingPriceInput.get(uuid);
        Material material = awaitingPriceMaterial.get(uuid);
        String nameInputTankId = awaitingNameInput.get(uuid);

        if (tankId != null && material != null) {
            awaitingPriceInput.remove(uuid);
            awaitingPriceMaterial.remove(uuid);

            String message = rawMessage.trim();
            if (message.equalsIgnoreCase("cancel")) {
                player.sendMessage("¬ßc‚ùå Configuration du prix annul√©e");
                Bukkit.getScheduler().runTask(plugin, () -> openTankGUI(player, tankId));
                return;
            }
            try {
                long price = Long.parseLong(message);
                if (price < 0) {
                    player.sendMessage("¬ßc‚ùå Le prix ne peut pas √™tre n√©gatif!");
                    return;
                }
                TankData tankData = plugin.getTankManager().getTankCache().get(tankId);
                if (tankData != null) {
                    tankData.setPrice(material, price);
                    if (price == 0) {
                        player.sendMessage("¬ß6‚ö† Prix d√©sactiv√© pour " + material.name().toLowerCase());
                    } else {
                        player.sendMessage("¬ßa‚úì Prix configur√©: " + NumberFormatter.format(price) + "$ /item pour " + material.name().toLowerCase());
                    }
                    Bukkit.getScheduler().runTask(plugin, () -> openTankGUI(player, tankId));
                }
            } catch (NumberFormatException e) {
                player.sendMessage("¬ßc‚ùå Veuillez entrer un nombre valide!");
            }
            return;
        }

        if (nameInputTankId != null) {
            awaitingNameInput.remove(uuid);
            String message = rawMessage.trim();
            if (message.equalsIgnoreCase("cancel")) {
                player.sendMessage("¬ßc‚ùå Configuration du nom annul√©e");
                Bukkit.getScheduler().runTask(plugin, () -> openTankGUI(player, nameInputTankId));
                return;
            }
            if (message.length() > 32) {
                player.sendMessage("¬ßc‚ùå Le nom est trop long! (32 caract√®res maximum)");
                return;
            }
            TankData tankData = plugin.getTankManager().getTankCache().get(nameInputTankId);
            if (tankData != null) {
                String processedName = message.replace('&', '¬ß');
                PlayerData playerData = plugin.getPlayerDataManager().getPlayerData(uuid);
                if (!playerData.hasCustomPermission("specialmine.vip")) {
                    processedName = ChatColor.stripColor(processedName);
                }
                tankData.setCustomName(processedName);
                player.sendMessage("¬ßa‚úì Nom personnalis√© d√©fini: " + processedName);
                if (tankData.isPlaced()) {
                    plugin.getTankManager().updateTankNameTag(tankData);
                }
                Bukkit.getScheduler().runTask(plugin, () -> openTankGUI(player, nameInputTankId));
            }
        }
    }

    @EventHandler
    public void onPlayerChat(AsyncPlayerChatEvent event) {
        Player player = event.getPlayer();
        String tankId = awaitingPriceInput.get(player.getUniqueId());
        Material material = awaitingPriceMaterial.get(player.getUniqueId());
        String nameInputTankId = awaitingNameInput.get(player.getUniqueId());

        if (tankId != null && material != null) {
            // Configuration de prix
            event.setCancelled(true);

            awaitingPriceInput.remove(player.getUniqueId());
            awaitingPriceMaterial.remove(player.getUniqueId());

            String message = event.getMessage().trim();

            if (message.equalsIgnoreCase("cancel")) {
                player.sendMessage("¬ßc‚ùå Configuration du prix annul√©e");
                event.setCancelled(true);
                Bukkit.getScheduler().runTask(plugin, () -> openTankGUI(player, tankId));
                return;
            }

            try {
                long price = Long.parseLong(message);
                if (price < 0) {
                    player.sendMessage("¬ßc‚ùå Le prix ne peut pas √™tre n√©gatif!");
                    event.setCancelled(true);
                    return;
                }

                TankData tankData = plugin.getTankManager().getTankCache().get(tankId);
                if (tankData != null) {
                    tankData.setPrice(material, price);

                    if (price == 0) {
                        player.sendMessage("¬ß6‚ö† Prix d√©sactiv√© pour " + material.name().toLowerCase());
                    } else {
                        player.sendMessage("¬ßa‚úì Prix configur√©: " + NumberFormatter.format(price) + "$/item pour " + material.name().toLowerCase());
                    }
                    event.setCancelled(true);
                    Bukkit.getScheduler().runTask(plugin, () -> openTankGUI(player, tankId));
                }
            } catch (NumberFormatException e) {
                player.sendMessage("¬ßc‚ùå Veuillez entrer un nombre valide!");
            }

        } else if (nameInputTankId != null) {
            // Configuration de nom
            event.setCancelled(true);

            awaitingNameInput.remove(player.getUniqueId());

            String message = event.getMessage().trim();

            if (message.equalsIgnoreCase("cancel")) {
                player.sendMessage("¬ßc‚ùå Configuration du nom annul√©e");
                Bukkit.getScheduler().runTask(plugin, () -> openTankGUI(player, nameInputTankId));
                return;
            }

            if (message.length() > 32) {
                player.sendMessage("¬ßc‚ùå Le nom est trop long! (32 caract√®res maximum)");
                return;
            }

            TankData tankData = plugin.getTankManager().getTankCache().get(nameInputTankId);
            if (tankData != null) {
                // Traiter les codes couleur (v√©rifier si VIP pour les couleurs)
                String processedName = message.replace('&', '¬ß');

                PlayerData playerData = plugin.getPlayerDataManager().getPlayerData(player.getUniqueId());
                if (!playerData.hasCustomPermission("specialmine.vip")) {
                    processedName = ChatColor.stripColor(processedName);
                }

                tankData.setCustomName(processedName);
                player.sendMessage("¬ßa‚úì Nom personnalis√© d√©fini: " + processedName);

                // Mettre √† jour le nametag si plac√©
                if (tankData.isPlaced()) {
                    plugin.getTankManager().updateTankNameTag(tankData);
                }

                Bukkit.getScheduler().runTask(plugin, () -> openTankGUI(player, nameInputTankId));
            }
        }
    }

    public enum TankFilter {
        COAL_ORE(Material.COAL_ORE, "¬ßfMinerai de charbon"),
        IRON_ORE(Material.IRON_ORE, "¬ßfMinerai de fer"),
        GOLD_ORE(Material.GOLD_ORE, "¬ßfMinerai d'or"),
        COPPER_ORE(Material.COPPER_ORE, "¬ßfMinerai de cuivre"),
        REDSTONE_ORE(Material.REDSTONE_ORE, "¬ßfMinerai de redstone"),
        LAPIS_ORE(Material.LAPIS_ORE, "¬ßfMinerai de lapis"),
        DIAMOND_ORE(Material.DIAMOND_ORE, "¬ßfMinerai de diamant"),
        EMERALD_ORE(Material.EMERALD_ORE, "¬ßfMinerai d'√©meraude"),
        DEEPSLATE_COAL(Material.DEEPSLATE_COAL_ORE, "¬ß8Deepslate charbon"),
        DEEPSLATE_IRON(Material.DEEPSLATE_IRON_ORE, "¬ß8Deepslate fer"),
        DEEPSLATE_GOLD(Material.DEEPSLATE_GOLD_ORE, "¬ß8Deepslate or"),
        DEEPSLATE_COPPER(Material.DEEPSLATE_COPPER_ORE, "¬ß8Deepslate cuivre"),
        DEEPSLATE_REDSTONE(Material.DEEPSLATE_REDSTONE_ORE, "¬ß8Deepslate redstone"),
        DEEPSLATE_LAPIS(Material.DEEPSLATE_LAPIS_ORE, "¬ß8Deepslate lapis"),
        DEEPSLATE_DIAMOND(Material.DEEPSLATE_DIAMOND_ORE, "¬ß8Deepslate diamant"),
        DEEPSLATE_EMERALD(Material.DEEPSLATE_EMERALD_ORE, "¬ß8Deepslate √©meraude"),
        NETHER_QUARTZ(Material.NETHER_QUARTZ_ORE, "¬ßcQuartz du Nether"),
        NETHER_GOLD(Material.NETHER_GOLD_ORE, "¬ßcOr du Nether"),
        ANCIENT_DEBRIS(Material.ANCIENT_DEBRIS, "¬ß4D√©bris antiques"),
        NETHERRACK(Material.NETHERRACK, "¬ßcNetherrack"),
        SOUL_SAND(Material.SOUL_SAND, "¬ßcSable des √¢mes"),
        SOUL_SOIL(Material.SOUL_SOIL, "¬ßcTerre des √¢mes");

        private final Material material;
        private final String displayName;

        TankFilter(Material material, String displayName) {
            this.material = material;
            this.displayName = displayName;
        }

        public Material material() {
            return material;
        }

        public String displayName() {
            return displayName;
        }
    }
}