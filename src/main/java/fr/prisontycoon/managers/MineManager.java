package fr.prisontycoon.managers;

import com.sk89q.worldedit.regions.Region;
import fr.prisontycoon.PrisonTycoon;
import fr.prisontycoon.data.MineData;
import fr.prisontycoon.data.PlayerData;
import org.bukkit.*;
import org.bukkit.block.Block;
import org.bukkit.entity.Player;
import org.bukkit.permissions.PermissionAttachmentInfo;

import com.fastasyncworldedit.core.FaweAPI;
import com.sk89q.worldedit.EditSession;
import com.sk89q.worldedit.WorldEdit;
import com.sk89q.worldedit.function.pattern.RandomPattern;
import com.sk89q.worldedit.math.BlockVector3;
import com.sk89q.worldedit.regions.CuboidRegion;
import com.sk89q.worldedit.world.World;
import com.sk89q.worldedit.world.block.BlockTypes;
import org.bukkit.scheduler.BukkitRunnable;

import java.util.*;
import java.util.concurrent.ConcurrentHashMap;
import java.util.stream.Collectors;

/**
 * Gestionnaire des mines complet - CORRIG√â pour utiliser MineData externe
 * Support des mines normales, prestige et VIP avec g√©n√©ration optimis√©e
 */
public class MineManager {

    private final PrisonTycoon plugin;
    private final Map<String, MineData> mines = new ConcurrentHashMap<>();
    private final Map<String, Long> mineResetTimes = new ConcurrentHashMap<>();
    private final Map<String, Boolean> mineGenerating = new ConcurrentHashMap<>();
    private final Random random = new Random();

    public MineManager(PrisonTycoon plugin) {
        this.plugin = plugin;
        loadMinesFromConfigManager();
        startMineResetScheduler();
    }

    /**
     * CORRIG√â: Charge les mines depuis le ConfigManager au lieu de la config directe
     */
    private void loadMinesFromConfigManager() {
        plugin.getPluginLogger().info("¬ß7Chargement des mines depuis ConfigManager...");

        // R√©cup√®re toutes les mines du ConfigManager corrig√©
        Map<String, MineData> configMines = plugin.getConfigManager().getAllMines();

        if (configMines.isEmpty()) {
            plugin.getPluginLogger().warning("¬ßcAucune mine trouv√©e dans ConfigManager!");
            return;
        }

        for (Map.Entry<String, MineData> entry : configMines.entrySet()) {
            String mineId = entry.getKey();
            MineData mineData = entry.getValue();

            // Validation suppl√©mentaire
            if (mineData.getVolume() <= 0) {
                plugin.getPluginLogger().warning("¬ßcMine " + mineId + " a un volume invalide: " + mineData.getVolume());
                continue;
            }

            if (!mineData.isCompositionValid()) {
                plugin.getPluginLogger().warning("¬ßcMine " + mineId + " a une composition invalide");
                // On peut quand m√™me la charger avec un avertissement
            }

            mines.put(mineId, mineData);
            plugin.getPluginLogger().info("¬ßaMine charg√©e: " + mineId + " (Type: " + mineData.getType() +
                    ", Volume: " + mineData.getVolume() + " blocs)");
        }

        plugin.getPluginLogger().info("¬ßaMines charg√©es: " + mines.size());
    }

    /**
     * G√©n√©ration de mine via l'API FastAsyncWorldEdit. C'est la m√©thode la plus rapide.
     *
     * @param mineId L'ID de la mine √† g√©n√©rer.
     */
    /**
     * G√©n√©ration de mine via l'API FastAsyncWorldEdit (Version API moderne et correcte).
     *
     * @param mineId L'ID de la mine √† g√©n√©rer.
     */
    public void generateMine(String mineId) {
        MineData mine = mines.get(mineId);
        if (mine == null) { /* ... */ return; }
        if (mineGenerating.getOrDefault(mineId, false)) { /* ... */ return; }

        // --- CORRECTION CL√â ---
        // On utilise la m√©thode qui existe dans votre version de l'API.
        World faweWorld = FaweAPI.getWorld(mine.getWorldName());
        if (faweWorld == null) {
            plugin.getPluginLogger().severe("¬ßcMonde FAWE introuvable pour la mine " + mineId);
            return;
        }

        mineGenerating.put(mineId, true);
        plugin.getPluginLogger().info("¬ßb[FAWE] D√©marrage de la g√©n√©ration de la mine " + mineId + "...");
        notifyPlayersInMine(mineId, "¬ße‚ö†Ô∏è R√©g√©n√©ration de la mine en cours...");
        long startTime = System.currentTimeMillis();

        // On utilise un try-with-resources pour s'assurer que l'EditSession est bien ferm√©e.
        // C'est compatible avec les anciennes et nouvelles versions.
        try (EditSession editSession = WorldEdit.getInstance().newEditSession(faweWorld)) {

            // 1. D√©finir la r√©gion de la mine
            BlockVector3 min = BlockVector3.at(mine.getMinX(), mine.getMinY(), mine.getMinZ());
            BlockVector3 max = BlockVector3.at(mine.getMaxX(), mine.getMaxY(), mine.getMaxZ());
            CuboidRegion region = new CuboidRegion(faweWorld, min, max);

            // 2. Cr√©er le "pattern" (mod√®le) al√©atoire
            RandomPattern randomPattern = new RandomPattern();
            for (Map.Entry<Material, Double> entry : mine.getBlockComposition().entrySet()) {
                randomPattern.add(BlockTypes.get(entry.getKey().name().toLowerCase()), entry.getValue());
            }

            // 3. Ex√©cuter l'op√©ration !
            // Le cast explicite vers (Region) peut √™tre n√©cessaire avec certaines versions.
            // Si votre IDE ne le demande pas, vous pouvez l'enlever.
            editSession.setBlocks((Region) region, randomPattern);

            // 4. Forcer la soumission de la file d'attente.
            // Avec les anciennes API et le newEditSession(world), il est plus s√ªr de le garder.
            editSession.flushQueue();

            // ... reste du code de finalisation ...
            mineResetTimes.put(mineId, System.currentTimeMillis());
            mineGenerating.put(mineId, false);
            long duration = System.currentTimeMillis() - startTime;
            plugin.getPluginLogger().info("¬ßa[FAWE] Mine " + mineId + " g√©n√©r√©e : " + region.getVolume() +
                    " blocs en " + duration + "ms");
            notifyPlayersInMine(mineId, "¬ßa‚úÖ Mine r√©g√©n√©r√©e avec succ√®s !");

        } catch (Exception e) {
            plugin.getPluginLogger().severe("¬ßcErreur lors de la g√©n√©ration FAWE de la mine " + mineId);
            e.printStackTrace();
            mineGenerating.put(mineId, false);
        }
    }

    /**
     * V√©rifie l'acc√®s d'un joueur √† une mine
     */
    public boolean canAccessMine(Player player, String mineId) {
        MineData mine = mines.get(mineId);
        if (mine == null) return false;

        PlayerData playerData = plugin.getPlayerDataManager().getPlayerData(player.getUniqueId());

        // V√©rification VIP
        if (mine.isVipOnly() && !player.hasPermission("specialmine.vip")) {
            return false;
        }

        // V√©rification permission sp√©cifique
        if (mine.getRequiredPermission() != null && !player.hasPermission(mine.getRequiredPermission())) {
            return false;
        }

        // V√©rification prestige
        if (mine.getRequiredPrestige() > playerData.getPrestigeLevel()) {
            return false;
        }

        // V√©rification rang (pour mines normales)
        if (mine.getType() == MineData.MineType.NORMAL) {
            String currentRank = getCurrentRank(player);
            String requiredRank = mine.getRequiredRank();

            return isRankSufficient(currentRank, requiredRank);
        }

        return true;
    }

    /**
     * T√©l√©porte un joueur √† une mine
     */
    public boolean teleportToMine(Player player, String mineId) {
        if (!canAccessMine(player, mineId)) {
            player.sendMessage("¬ßc‚ùå Vous n'avez pas acc√®s √† cette mine!");
            return false;
        }

        MineData mine = mines.get(mineId);
        if (mine == null) {
            player.sendMessage("¬ßc‚ùå Mine introuvable!");
            return false;
        }

        org.bukkit.World world = Bukkit.getWorld(mine.getWorldName());
        if (world == null) {
            player.sendMessage("¬ßc‚ùå Monde de la mine introuvable!");
            return false;
        }

        // Utilise la nouvelle m√©thode getCenterLocation
        Location teleportLocation = mine.getCenterLocation(world);

        // S'assurer qu'il y a de l'air pour le joueur
        Block airBlock1 = teleportLocation.getBlock();
        Block airBlock2 = teleportLocation.clone().add(0, 1, 0).getBlock();

        if (airBlock1.getType() != Material.AIR) {
            airBlock1.setType(Material.AIR);
        }
        if (airBlock2.getType() != Material.AIR) {
            airBlock2.setType(Material.AIR);
        }

        player.teleport(teleportLocation);
        player.sendMessage("¬ßa‚úÖ T√©l√©port√© √† la mine " + mine.getDisplayName());
        player.playSound(player.getLocation(), Sound.ENTITY_ENDERMAN_TELEPORT, 1.0f, 1.0f);

        return true;
    }

    /**
     * Obtient les informations d√©taill√©es d'une mine
     */
    public String getMineInfo(Player player, String mineId) {
        MineData mine = mines.get(mineId);
        if (mine == null) {
            return "¬ßc‚ùå Mine introuvable!";
        }

        StringBuilder info = new StringBuilder();
        info.append("¬ß6‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n");
        info.append("¬ß6         üìç ").append(mine.getDisplayName()).append("\n");
        info.append("¬ß6‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n");

        // Utilise la nouvelle m√©thode getDetailedInfo
        info.append(mine.getDetailedInfo()).append("\n");

        // Informations d'acc√®s
        boolean canAccess = canAccessMine(player, mineId);
        info.append("¬ß7Acc√®s: ").append(canAccess ? "¬ßa‚úÖ Autoris√©" : "¬ßc‚ùå Interdit").append("\n");

        // Conditions d'acc√®s si bloqu√©
        if (!canAccess) {
            if (mine.getRequiredPrestige() > 0) {
                PlayerData playerData = plugin.getPlayerDataManager().getPlayerData(player.getUniqueId());
                info.append("¬ß7Prestige requis: ¬ßd").append(mine.getRequiredPrestige())
                        .append(" ¬ß7(actuel: ¬ßd").append(playerData.getPrestigeLevel()).append("¬ß7)\n");
            }
            if (mine.isVipOnly()) {
                info.append("¬ß7Statut VIP requis\n");
            }
            if (mine.getRequiredPermission() != null) {
                info.append("¬ß7Permission requise: ¬ße").append(mine.getRequiredPermission()).append("\n");
            }
        }

        // Temps depuis le dernier reset
        Long lastReset = mineResetTimes.get(mineId);
        if (lastReset != null) {
            long timeSince = (System.currentTimeMillis() - lastReset) / 1000 / 60; // minutes
            info.append("¬ß7Dernier reset: il y a ").append(timeSince).append(" minute(s)");
        }

        return info.toString();
    }

    /**
     * Obtient les mines accessibles pour un joueur
     */
    public List<MineData> getAccessibleMines(Player player) {
        List<MineData> accessible = new ArrayList<>();

        for (MineData mine : mines.values()) {
            if (canAccessMine(player, mine.getId())) {
                accessible.add(mine);
            }
        }

        // Trier par type puis par nom
        accessible.sort((a, b) -> {
            if (a.getType() != b.getType()) {
                return a.getType().ordinal() - b.getType().ordinal();
            }
            return a.getId().compareToIgnoreCase(b.getId());
        });

        return accessible;
    }

    /**
     * Obtient les mines par type
     */
    public List<MineData> getMinesByType(MineData.MineType type) {
        return mines.values().stream()
                .filter(mine -> mine.getType() == type)
                .sorted((a, b) -> a.getId().compareToIgnoreCase(b.getId()))
                .collect(Collectors.toList());
    }

    /**
     * V√©rifie si un joueur est dans une mine
     */
    public String getPlayerCurrentMine(Player player) {
        Location playerLocation = player.getLocation();

        for (Map.Entry<String, MineData> entry : mines.entrySet()) {
            if (entry.getValue().contains(playerLocation)) {
                return entry.getKey();
            }
        }

        return null;
    }

    /**
     * Notifie tous les joueurs pr√©sents dans une mine
     */
    private void notifyPlayersInMine(String mineId, String message) {
        MineData mine = mines.get(mineId);
        if (mine == null) return;

        for (Player player : Bukkit.getOnlinePlayers()) {
            String playerMine = getPlayerCurrentMine(player);
            if (mineId.equals(playerMine)) {
                player.sendMessage(message);
            }
        }
    }

    /**
     * Lance le scheduler de reset automatique des mines
     */
    private void startMineResetScheduler() {
        Bukkit.getScheduler().runTaskTimer(plugin, () -> {
            long currentTime = System.currentTimeMillis();
            long resetInterval = 1800000; // 30 minutes par d√©faut

            for (Map.Entry<String, Long> entry : mineResetTimes.entrySet()) {
                String mineId = entry.getKey();
                long lastReset = entry.getValue();

                if (currentTime - lastReset > resetInterval) {
                    plugin.getPluginLogger().debug("Reset automatique de la mine: " + mineId);
                    generateMine(mineId);
                }
            }
        }, 0L, 6000L); // V√©rifie toutes les 5 minutes (6000 ticks)
    }

    /**
     * Force le reset de toutes les mines
     */
    public void resetAllMines() {
        plugin.getPluginLogger().info("¬ß6Lancement de la r√©g√©n√©ration √©chelonn√©e de toutes les mines...");
        final Queue<String> minesToReset = new LinkedList<>(mines.keySet());

        if (minesToReset.isEmpty()) {
            plugin.getPluginLogger().info("¬ßeAucune mine √† r√©g√©n√©rer.");
            return;
        }

        new BukkitRunnable() {
            @Override
            public void run() {
                if (minesToReset.isEmpty()) {
                    plugin.getPluginLogger().info("¬ßaR√©g√©n√©ration √©chelonn√©e termin√©e !");
                    this.cancel();
                    return;
                }
                String mineId = minesToReset.poll();
                generateMine(mineId);
            }
        }.runTaskTimer(plugin, 0L, 10L);
    }

    /**
     * Recharge les mines depuis la configuration
     */
    public void reloadMines() {
        plugin.getPluginLogger().info("¬ß7Rechargement des mines...");

        mines.clear();
        mineResetTimes.clear();
        mineGenerating.clear();

        loadMinesFromConfigManager();
        plugin.getPluginLogger().info("¬ßaMines recharg√©es!");
    }

    /**
     * Obtient les statistiques des mines
     */
    public String getMinesStatistics() {
        StringBuilder stats = new StringBuilder();

        stats.append("¬ß6‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n");
        stats.append("¬ß6         üìä STATISTIQUES MINES\n");
        stats.append("¬ß6‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n");

        int normalCount = getMinesByType(MineData.MineType.NORMAL).size();
        int prestigeCount = getMinesByType(MineData.MineType.PRESTIGE).size();
        int vipCount = getMinesByType(MineData.MineType.VIP).size();

        stats.append("¬ßfüìç Mines normales: ¬ß7").append(normalCount).append("\n");
        stats.append("¬ßdüìç Mines prestige: ¬ß7").append(prestigeCount).append("\n");
        stats.append("¬ß6üìç Mines VIP: ¬ß7").append(vipCount).append("\n");
        stats.append("¬ßeüìä Total: ¬ß7").append(mines.size()).append(" mines\n");

        // Mines en cours de g√©n√©ration
        long generating = mineGenerating.values().stream().mapToLong(b -> b ? 1 : 0).sum();
        if (generating > 0) {
            stats.append("¬ßc‚ö° En g√©n√©ration: ¬ß7").append(generating).append("\n");
        }

        return stats.toString();
    }

    // ==================== M√âTHODES UTILITAIRES ====================

    /**
     * Obtient le rang actuel d'un joueur
     */
    public String getCurrentRank(Player player) {
        String highestRank = "a"; // Rang par d√©faut

        // Cherche toutes les permissions de mine que le joueur poss√®de
        Set<String> minePermissions = player.getEffectivePermissions().stream()
                .map(PermissionAttachmentInfo::getPermission)
                .filter(perm -> perm.startsWith("specialmine.mine."))
                .collect(Collectors.toSet());

        // Recherche du rang le plus √©lev√© en it√©rant de z vers a
        for (char c = 'z'; c >= 'a'; c--) {
            String minePermission = "specialmine.mine." + c;
            if (minePermissions.contains(minePermission)) {
                highestRank = String.valueOf(c);
                break; // Premier trouv√© = le plus √©lev√©
            }
        }
        return highestRank;
    }

    /**
     * V√©rifie si un rang est suffisant pour acc√©der √† une mine
     */
    public boolean isRankSufficient(String currentRank, String requiredRank) {
        if (currentRank == null || requiredRank == null) return false;
        return currentRank.compareToIgnoreCase(requiredRank) >= 0;
    }

    /**
     * Obtient la couleur d'un rang
     */
    public String getRankColor(String rank) {
        if (rank == null) return "¬ß7";

        return switch (rank.toLowerCase()) {
            case "a", "b", "c", "d", "e" -> "¬ßf";
            case "f", "g", "h", "i", "j" -> "¬ßa";
            case "k", "l", "m", "n", "o" -> "¬ße";
            case "p", "q", "r", "s", "t" -> "¬ß6";
            case "u", "v", "w", "x", "y", "z" -> "¬ßc";
            default -> "¬ß7";
        };
    }

    /**
     * Convertit un nom de rang en num√©ro (a=1, b=2, etc.)
     */
    public int rankToNumber(String rank) {
        if (rank == null || rank.length() != 1) return 0;
        char c = rank.toLowerCase().charAt(0);
        if (c >= 'a' && c <= 'z') {
            return c - 'a' + 1;
        }
        return 0;
    }

    /**
     * Convertit un num√©ro en nom de rang (1=a, 2=b, etc.)
     */
    public String numberToRank(int number) {
        if (number < 1 || number > 26) return "a";
        return String.valueOf((char) ('a' + number - 1));
    }

    /**
     * NOUVEAU: Obtient le rang et sa couleur d'un joueur
     *
     * @param player Le joueur
     * @return String[] avec [0] = rang, [1] = couleur
     */
    public String[] getRankAndColor(Player player) {
        String currentRank = getCurrentRank(player);
        String rankColor = getRankColor(currentRank);
        return new String[]{currentRank, rankColor};
    }

    // ==================== GETTERS ====================

    /**
     * Obtient une mine par son ID
     */
    public MineData getMine(String mineId) {
        return mines.get(mineId);
    }

    /**
     * Obtient toutes les mines
     */
    public Collection<MineData> getAllMines() {
        return mines.values();
    }

    /**
     * V√©rifie si une mine existe
     */
    public boolean mineExists(String mineId) {
        return mines.containsKey(mineId);
    }

    /**
     * Obtient le nombre total de mines
     */
    public int getMineCount() {
        return mines.size();
    }

    /**
     * Obtient les noms de toutes les mines
     */
    public Set<String> getMineNames() {
        return new HashSet<>(mines.keySet());
    }

    /**
     * V√©rifie si une mine est en cours de g√©n√©ration
     */
    public boolean isMineGenerating(String mineId) {
        return mineGenerating.getOrDefault(mineId, false);
    }

    /**
     * Obtient toutes les mines tri√©es par nom
     */
    public List<MineData> getAllMinesSorted() {
        return mines.values().stream()
                .sorted((a, b) -> a.getId().compareToIgnoreCase(b.getId()))
                .collect(Collectors.toList());
    }

    /**
     * Recherche des mines par nom partiel
     */
    public List<MineData> searchMines(String query) {
        String lowerQuery = query.toLowerCase();
        return mines.values().stream()
                .filter(mine -> mine.getId().toLowerCase().contains(lowerQuery) ||
                        mine.getDisplayName().toLowerCase().contains(lowerQuery))
                .sorted((a, b) -> a.getId().compareToIgnoreCase(b.getId()))
                .collect(Collectors.toList());
    }
}