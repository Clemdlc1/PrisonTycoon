package fr.prisontycoon.managers;

import fr.prisontycoon.PrisonTycoon;
import fr.prisontycoon.cristaux.Cristal;
import fr.prisontycoon.data.PlayerData;
import fr.prisontycoon.enchantments.EnchantmentBookManager;
import fr.prisontycoon.enchantments.EnchantmentCategory;
import fr.prisontycoon.utils.NumberFormatter;
import net.md_5.bungee.api.chat.ClickEvent;
import net.md_5.bungee.api.chat.HoverEvent;
import net.md_5.bungee.api.chat.TextComponent;
import net.md_5.bungee.api.chat.hover.content.Text;
import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.NamespacedKey;
import org.bukkit.World;
import org.bukkit.enchantments.Enchantment;
import org.bukkit.entity.Player;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.ItemMeta;
import org.bukkit.metadata.FixedMetadataValue;
import org.bukkit.persistence.PersistentDataType;
import org.bukkit.potion.PotionEffectType;

import java.util.*;

/**
 * Gestionnaire de la pioche l√©gendaire
 * CORRIG√â : Durability bien impl√©ment√©e et v√©rifi√©e
 */
public class PickaxeManager {

    // NOUVEAU : Slot fixe pour la pioche
    private static final int PICKAXE_SLOT = 0;
    private final PrisonTycoon plugin;
    private final NamespacedKey legendaryPickaxeKey;
    private final NamespacedKey pickaxeOwnerKey;

    public PickaxeManager(PrisonTycoon plugin) {
        this.plugin = plugin;
        this.legendaryPickaxeKey = new NamespacedKey(plugin, "legendary_pickaxe");
        this.pickaxeOwnerKey = new NamespacedKey(plugin, "pickaxe_owner");

        plugin.getPluginLogger().info("¬ßaPickaxeManager initialis√©.");
    }

    /**
     * V√©rifie si la pioche du joueur est cass√©e
     */
    public static boolean isPickaxeBroken(Player player) {
        return player.hasMetadata("pickaxe_broken");
    }

    /**
     * Retourne le multiplicateur de p√©nalit√© (90% de malus = 10% d'efficacit√©)
     */
    public static double getPickaxePenaltyMultiplier(Player player) {
        return isPickaxeBroken(player) ? 0.10 : 1.0;
    }

    /**
     * CORRIG√â : Cr√©e une nouvelle pioche l√©gendaire et la place dans le slot 0
     */
    public void createLegendaryPickaxe(Player player) {
        ItemStack pickaxe = new ItemStack(Material.NETHERITE_PICKAXE);
        ItemMeta meta = pickaxe.getItemMeta();

        // Nom et protection
        meta.setDisplayName("¬ß6‚ú® Pioche L√©gendaire ‚ú®");
        meta.getPersistentDataContainer().set(legendaryPickaxeKey, PersistentDataType.BOOLEAN, true);
        meta.getPersistentDataContainer().set(pickaxeOwnerKey, PersistentDataType.STRING, player.getUniqueId().toString());

        // Effet glowing sans enchantement visible
        meta.addEnchant(Enchantment.UNBREAKING, 1, true);
        meta.addItemFlags(org.bukkit.inventory.ItemFlag.HIDE_ENCHANTS);

        // Ajoute les enchantements custom par d√©faut
        PlayerData playerData = plugin.getPlayerDataManager().getPlayerData(player.getUniqueId());

        // Enchantements par d√©faut requis
        playerData.setEnchantmentLevel("token_greed", 5);
        playerData.setEnchantmentLevel("efficiency", 3);
        playerData.setEnchantmentLevel("durability", 1);

        // Marque les donn√©es comme modifi√©es
        plugin.getPlayerDataManager().markDirty(player.getUniqueId());

        // Met √† jour le lore d√®s la cr√©ation
        updatePickaxeLore(meta, player);
        pickaxe.setItemMeta(meta);

        // NOUVEAU : Place la pioche OBLIGATOIREMENT dans le slot 0
        placePickaxeInSlot0(player, pickaxe);

        plugin.getPluginLogger().info("¬ß7Pioche l√©gendaire cr√©√©e pour: " + player.getName() +
                " avec enchantements par d√©faut (plac√©e slot 0)");
    }

    /**
     * NOUVEAU : Place la pioche dans le slot 0 et vide le slot si n√©cessaire
     */
    private void placePickaxeInSlot0(Player player, ItemStack pickaxe) {
        // Sauvegarde l'item qui √©tait dans le slot 0
        ItemStack existingItem = player.getInventory().getItem(PICKAXE_SLOT);

        // Place la pioche dans le slot 0
        player.getInventory().setItem(PICKAXE_SLOT, pickaxe);

        // Si il y avait un item, essaie de le placer ailleurs
        if (existingItem != null && existingItem.getType() != Material.AIR) {
            var leftover = player.getInventory().addItem(existingItem);
            if (!leftover.isEmpty()) {
                // Drop au sol si pas de place
                for (ItemStack overflow : leftover.values()) {
                    player.getWorld().dropItemNaturally(player.getLocation(), overflow);
                }
                player.sendMessage("¬ße‚ö†Ô∏è Item du slot 1 d√©plac√© au sol (pioche l√©gendaire prioritaire)");
            }
        }

        plugin.getPluginLogger().debug("Pioche plac√©e dans le slot 0 pour " + player.getName());
    }

    /**
     * NOUVEAU : V√©rifie si la pioche est dans le bon slot
     */
    public boolean isPickaxeInCorrectSlot(Player player) {
        ItemStack slotItem = player.getInventory().getItem(PICKAXE_SLOT);
        return slotItem != null && isLegendaryPickaxe(slotItem) && isOwner(slotItem, player);
    }

    /**
     * NOUVEAU : Force le retour de la pioche au slot 0
     */
    public void enforcePickaxeSlot(Player player) {
        if (isPickaxeInCorrectSlot(player)) {
            return;
        }

        // Cherche la pioche dans l'inventaire
        ItemStack foundPickaxe = findPlayerPickaxe(player);
        if (foundPickaxe != null) {
            // Retire la pioche de son emplacement actuel
            for (int i = 0; i < player.getInventory().getSize(); i++) {
                ItemStack item = player.getInventory().getItem(i);
                if (item != null && item.equals(foundPickaxe)) {
                    player.getInventory().setItem(i, null);
                    break;
                }
            }

            // La replace au slot 0
            placePickaxeInSlot0(player, foundPickaxe);
            player.sendMessage("¬ße‚ö†Ô∏è Pioche l√©gendaire replac√©e dans le slot 1 (position obligatoire)");
        }
    }

    /**
     * CORRIG√â : Met √† jour le lore ET les enchantements vanilla de la pioche
     */
    public void updatePickaxeLore(ItemMeta meta, Player player) {
        PlayerData playerData = plugin.getPlayerDataManager().getPlayerData(player.getUniqueId());

        // NOUVEAU : Applique les enchantements vanilla selon les enchantements custom
        applyVanillaEnchantments(meta, playerData);

        List<String> lore = new ArrayList<>();

        lore.add("¬ß8‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨");
        lore.add("¬ß7Pioche l√©gendaire");
        lore.add("¬ß7Propri√©taire: ¬ße" + player.getName());
        lore.add("¬ß8‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨");
        lore.add("");

        // CORRIG√â : Statistiques UNIQUEMENT via pioche avec distinction min√©s/cass√©s
        lore.add("¬ß6‚õè ¬ßlSTATISTIQUES PIOCHE");
        lore.add("¬ß7‚îÇ ¬ß6Coins : ¬ße" + NumberFormatter.formatWithColor(playerData.getCoinsViaPickaxe()));
        lore.add("¬ß7‚îÇ ¬ßeTokens : ¬ß6" + NumberFormatter.formatWithColor(playerData.getTokensViaPickaxe()));
        lore.add("¬ß7‚îÇ ¬ßaExp√©rience : ¬ß2" + NumberFormatter.formatWithColor(playerData.getExperienceViaPickaxe()));
        lore.add("¬ß7‚îÇ ¬ßbBlocs min√©s: ¬ß3" + NumberFormatter.formatWithColor(playerData.getTotalBlocksMined()));
        lore.add("¬ß7‚îî ¬ßdBlocs d√©truits : ¬ß5" + NumberFormatter.formatWithColor(playerData.getTotalBlocksDestroyed()));
        lore.add("");

        ItemStack currentPickaxe = findPlayerPickaxe(player);

        // Valeurs par d√©faut si la pioche n'existe pas encore (cr√©ation en cours)
        short currentDurability = 0;
        short maxDurability = Material.NETHERITE_PICKAXE.getMaxDurability();
        boolean isBroken = false;

        // NOUVEAU: V√©rification null pour √©viter la NullPointerException
        if (currentPickaxe != null) {
            currentDurability = currentPickaxe.getDurability();
            maxDurability = currentPickaxe.getType().getMaxDurability();
            isBroken = currentDurability >= maxDurability - 1;
        }

        // CORRIG√â : Utilise la durabilit√© de base (pas augment√©e par solidit√©)
        double healthPercent = ((double) (maxDurability - currentDurability) / maxDurability) * 100;
        int currentHealth = maxDurability - currentDurability;

        if (isBroken) {
            // PIOCHE CASS√âE - Affichage sp√©cial
            lore.add("¬ßcüíÄ ¬ßl¬ßnPIOCHE CASS√âE¬ßr");
            lore.add("¬ß7‚îÇ ¬ßcDurabilit√©: ¬ß4¬ßl0.0%¬ßr ¬ß7(CASS√âE)");
            lore.add("¬ß7‚îÇ ¬ßcPoints: ¬ß40¬ß7/¬ß6" + maxDurability);
            lore.add("¬ß7‚îÇ ¬ßc¬ßl‚ö†Ô∏è TOUS LES ENCHANTEMENTS D√âSACTIV√âS¬ßr");
            lore.add("¬ß7‚îÇ ¬ßc‚û§ Token Greed fonctionne avec 90% de malus");
            lore.add("¬ß7‚îÇ ¬ße‚û§ R√©parez imm√©diatement votre pioche!");

            // Barre de durabilit√© cass√©e
            String brokenBar = "¬ßc‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì";
            lore.add("¬ß7‚îÇ " + brokenBar + " ¬ßc¬ßl(CASS√âE)");
            lore.add("");

        } else {
            // PIOCHE NORMALE - Affichage avec durabilit√© de base
            lore.add("¬ßcüî® ¬ßl√âTAT DE LA PIOCHE");
            lore.add("¬ß7‚îÇ ¬ßeDurabilit√©: " + getDurabilityColor(healthPercent) + String.format("%.1f%%", healthPercent));
            lore.add("¬ß7‚îÇ ¬ßePoints: ¬ß6" + currentHealth + "¬ß7/¬ß6" + maxDurability);

            // CORRIG√â : Affichage solidit√© sans bonus de durabilit√© max
            int durabilityLevel = playerData.getEnchantmentLevel("durability");
            if (durabilityLevel > 0) {
                double preservationChance = Math.min(95.0, durabilityLevel * 5.0);
                lore.add("¬ß7‚îÇ ¬ßeSolidit√©: ¬ßa" + String.format("%.0f%%", preservationChance) +
                        " ¬ß7chance d'√©viter perte (Niv." + durabilityLevel + ")");
            }

            // Indicateur visuel avec barre de durabilit√©
            String durabilityBar = createDurabilityBar(healthPercent);
            lore.add("¬ß7‚îÇ " + durabilityBar);
            lore.add("");
        }

        lore.add("¬ßd‚ú® ¬ßlENCHANTEMENTS ACTIFS");
        var enchantments = playerData.getEnchantmentLevels();

        if (enchantments.isEmpty()) {
            lore.add("¬ß7‚îÇ ¬ß7Aucun enchantement custom actif");
            lore.add("¬ß7‚îî ¬ß7Utilisez ¬ßeclic droit ¬ß7pour en d√©bloquer!");
        } else {
            // CORRIG√â : V√©rification si pioche cass√©e pour l'affichage
            isBroken = false;
            currentPickaxe = findPlayerPickaxe(player);
            if (currentPickaxe != null) {
                currentDurability = currentPickaxe.getDurability();
                maxDurability = currentPickaxe.getType().getMaxDurability();
                isBroken = currentDurability >= maxDurability - 1;
            }

            if (isBroken) {
                lore.add("¬ß7‚îÇ ¬ßc¬ßl‚ö† TOUS D√âSACTIV√âS (pioche cass√©e)¬ßr");
                lore.add("¬ß7‚îÇ ¬ß7R√©parez pour les r√©activer");
            }

            // Trie les enchantements par cat√©gorie
            Map<EnchantmentCategory, List<String>> enchantsByCategory = new HashMap<>();

            for (Map.Entry<String, Integer> entry : enchantments.entrySet()) {
                var enchant = plugin.getEnchantmentManager().getEnchantment(entry.getKey());
                if (enchant != null) {
                    EnchantmentCategory category = enchant.getCategory();
                    enchantsByCategory.computeIfAbsent(category, k -> new ArrayList<>());

                    // CORRIG√â : Indication si enchantement d√©sactiv√© (pioche cass√©e ou mobilit√© d√©sactiv√©e)
                    String statusIndicator;
                    String statusColor = "¬ßa"; // Vert par d√©faut

                    if (isBroken) {
                        // Pioche cass√©e - tous d√©sactiv√©s sauf token greed avec malus
                        if (entry.getKey().equals("token_greed")) {
                            statusIndicator = " ¬ßc(90% malus)";
                            statusColor = "¬ß6"; // Orange pour indiquer le malus
                        } else {
                            statusIndicator = "";
                            statusColor = "¬ß8"; // Gris pour d√©sactiv√©
                        }
                    } else if (category == EnchantmentCategory.MOBILITY) {
                        boolean enabled = playerData.isMobilityEnchantmentEnabled(entry.getKey());
                        statusIndicator = enabled ? " ¬ßa‚úì" : " ¬ßc‚úó";
                        statusColor = enabled ? "¬ßa" : "¬ß8";
                    } else {
                        statusIndicator = " ¬ßa‚úì"; // Actif normalement
                    }

                    String displayText = statusColor + enchant.getDisplayName() + " " +
                            NumberFormatter.formatRoman(entry.getValue()) + statusIndicator;

                    enchantsByCategory.get(category).add(displayText);
                }
            }

            // Affichage par cat√©gorie
            for (EnchantmentCategory category : EnchantmentCategory.values()) {
                List<String> categoryEnchants = enchantsByCategory.get(category);
                if (categoryEnchants != null && !categoryEnchants.isEmpty()) {
                    lore.add("¬ß7‚îÇ " + category.getDisplayName() + ":");
                    for (String enchantText : categoryEnchants) {
                        lore.add("¬ß7‚îÇ  ¬ß8‚Ä¢ " + enchantText);
                    }
                }
            }
        }

        if (!isBroken) {
            // CORRIG√â : Utilise le nouveau syst√®me pour r√©cup√©rer les enchantements actifs
            Set<String> activeBooks = plugin.getEnchantmentBookManager().getActiveEnchantments(player);

            if (!activeBooks.isEmpty()) {
                lore.add("¬ß7‚îÇ ¬ß5UNIQUES ACTIFS ¬ßl‚ö° ¬ßl:");
                for (String bookId : activeBooks) {
                    EnchantmentBookManager.EnchantmentBook book = plugin.getEnchantmentBookManager().getEnchantmentBook(bookId);
                    if (book != null) {
                        // CORRIG√â : Utilise la nouvelle m√©thode pour r√©cup√©rer le niveau
                        int level = plugin.getEnchantmentBookManager().getEnchantmentBookLevel(player, bookId);
                        String levelDisplay = level > 1 ? " ¬ß7(Niv." + level + ")" : "";
                        lore.add("¬ß7‚îÇ ¬ßd" + book.getName() + levelDisplay + " ¬ßa‚úì");
                    }
                }
            }

            // NOUVEAU : Affichage des livres poss√©d√©s mais non actifs
            Map<String, Integer> allBooks = plugin.getEnchantmentBookManager().getAllEnchantmentBooksWithLevels(player);
            Set<String> inactiveBooks = new HashSet<>();

            for (Map.Entry<String, Integer> entry : allBooks.entrySet()) {
                String bookId = entry.getKey();
                if (!activeBooks.contains(bookId)) {
                    inactiveBooks.add(bookId);
                }
            }

            if (!inactiveBooks.isEmpty()) {
                lore.add("¬ß7‚îÇ ¬ß8UNIQUES INACTIFS:");
                for (String bookId : inactiveBooks) {
                    EnchantmentBookManager.EnchantmentBook book = plugin.getEnchantmentBookManager().getEnchantmentBook(bookId);
                    if (book != null) {
                        int level = allBooks.get(bookId);
                        String levelDisplay = level > 1 ? " ¬ß7(Niv." + level + ")" : "";
                        lore.add("¬ß7‚îÇ ¬ß8" + book.getName() + levelDisplay + " ¬ßc‚úó");
                    }
                }
            }
        }

        lore.add("¬ß7‚îî ¬ß7Clic droit pour g√©rer vos enchantements");
        List<Cristal> cristals = plugin.getCristalManager().getPickaxeCristals(player);
        if (!cristals.isEmpty()) {
            lore.add("¬ßd‚ú® Cristaux Appliqu√©s ¬ß8(" + cristals.size() + "/4)¬ßd:");
            for (Cristal cristal : cristals) {
                lore.add("¬ß8‚Ä¢ ¬ßd" + cristal.getType().getDisplayName() + " " + cristal.getNiveau() +
                        " ¬ß8- ¬ßa" + cristal.getType().getBonusDescription(cristal.getNiveau()));
            }
            lore.add("¬ß8‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨");
        }

        lore.add("");
        lore.add("¬ß8‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨");
        lore.add("¬ß6‚ú® ¬ßlPrisonTycoon ¬ß6‚ú®");
        lore.add("¬ß8‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨");

        meta.setLore(lore);
    }

    /**
     * NOUVEAU : Applique les enchantements vanilla selon les enchantements custom
     */
    private void applyVanillaEnchantments(ItemMeta meta, PlayerData playerData) {
        for (Enchantment ench : meta.getEnchants().keySet()) {
            if (ench != Enchantment.UNBREAKING) { // Garde Unbreaking pour l'effet glowing
                meta.removeEnchant(ench);
            }
        }

        // Applique Efficacit√© selon le niveau custom
        int efficiencyLevel = playerData.getEnchantmentLevel("efficiency");
        Player player = plugin.getServer().getPlayer(playerData.getPlayerId());
        if (efficiencyLevel > 0) {
            if (!isPickaxeBroken(player)) {
                meta.addEnchant(Enchantment.EFFICIENCY, efficiencyLevel, true);
            } else {
                meta.addEnchant(Enchantment.EFFICIENCY, 3, true);

            }
        }
    }

    /**
     * V√©rifie si un item est une pioche l√©gendaire
     */
    public boolean isLegendaryPickaxe(ItemStack item) {
        if (item == null || item.getType() != Material.NETHERITE_PICKAXE) {
            return false;
        }

        ItemMeta meta = item.getItemMeta();
        if (meta == null) return false;

        return meta.getPersistentDataContainer().has(legendaryPickaxeKey, PersistentDataType.BOOLEAN);
    }

    /**
     * V√©rifie si une pioche appartient √† un joueur sp√©cifique
     */
    public boolean isOwner(ItemStack item, Player player) {
        if (!isLegendaryPickaxe(item)) return false;

        ItemMeta meta = item.getItemMeta();
        String ownerUUID = meta.getPersistentDataContainer().get(pickaxeOwnerKey, PersistentDataType.STRING);

        return player.getUniqueId().toString().equals(ownerUUID);
    }

    /**
     * Trouve la pioche l√©gendaire d'un joueur dans son inventaire
     */
    public ItemStack findPlayerPickaxe(Player player) {
        // D'abord, v√©rifie le slot d√©di√© pour √©viter de parcourir tout l'inventaire
        ItemStack slotItem = player.getInventory().getItem(PICKAXE_SLOT);
        if (slotItem != null && isLegendaryPickaxe(slotItem) && isOwner(slotItem, player)) {
            return slotItem;
        }

        for (ItemStack item : player.getInventory().getContents()) {
            if (isLegendaryPickaxe(item) && isOwner(item, player)) {
                return item;
            }
        }
        return null;
    }

    /**
     * V√©rifie si un joueur a d√©j√† une pioche l√©gendaire
     */
    public boolean hasLegendaryPickaxe(Player player) {
        return findPlayerPickaxe(player) != null;
    }

    /**
     * Met √† jour la pioche d'un joueur avec ses enchantements actuels
     */
    public void updatePlayerPickaxe(Player player) {
        ItemStack pickaxe = findPlayerPickaxe(player);
        if (pickaxe == null) return;

        ItemMeta meta = pickaxe.getItemMeta();
        if (meta == null) return;

        updatePickaxeLore(meta, player);
        pickaxe.setItemMeta(meta);
    }

    /**
     * NOUVEAU : Met √† jour les effets de mobilit√© selon les enchantements activ√©s/d√©sactiv√©s
     */
    public void updateMobilityEffects(Player player) {

        ItemStack handItem = player.getInventory().getItemInMainHand();
        if (!plugin.getPickaxeManager().isLegendaryPickaxe(handItem) || !isPickaxeInCorrectSlot(player) || isPickaxeBroken(player)) {
            removeMobilityEffects(player);
            return;
        }

        PlayerData playerData = plugin.getPlayerDataManager().getPlayerData(player.getUniqueId());

        // Retire tous les effets d'abord
        removeMobilityEffects(player);

        // Vision nocturne
        if (playerData.getEnchantmentLevel("night_vision") > 0 &&
                playerData.isMobilityEnchantmentEnabled("night_vision")) {
            player.addPotionEffect(new org.bukkit.potion.PotionEffect(
                    org.bukkit.potion.PotionEffectType.NIGHT_VISION,
                    Integer.MAX_VALUE, 0, true, false));
        }

        // Vitesse
        int speedLevel = playerData.getEnchantmentLevel("speed");
        if (speedLevel > 0 && playerData.isMobilityEnchantmentEnabled("speed")) {
            player.addPotionEffect(new org.bukkit.potion.PotionEffect(
                    org.bukkit.potion.PotionEffectType.SPEED,
                    Integer.MAX_VALUE, speedLevel - 1, true, false));
        }

        // C√©l√©rit√© (Haste)
        int hasteLevel = playerData.getEnchantmentLevel("haste");
        if (hasteLevel > 0 && playerData.isMobilityEnchantmentEnabled("haste")) {
            player.addPotionEffect(new org.bukkit.potion.PotionEffect(
                    org.bukkit.potion.PotionEffectType.HASTE,
                    Integer.MAX_VALUE, hasteLevel - 1, true, false));
        }

        // Saut
        int jumpLevel = playerData.getEnchantmentLevel("jump_boost");
        if (jumpLevel > 0 && playerData.isMobilityEnchantmentEnabled("jump_boost")) {
            player.addPotionEffect(new org.bukkit.potion.PotionEffect(
                    org.bukkit.potion.PotionEffectType.JUMP_BOOST,
                    Integer.MAX_VALUE, jumpLevel - 1, true, false));
        }
    }


    /**
     * Retire les effets de mobilit√©
     */
    public void removeMobilityEffects(Player player) {
        player.removePotionEffect(org.bukkit.potion.PotionEffectType.NIGHT_VISION);
        player.removePotionEffect(org.bukkit.potion.PotionEffectType.SPEED);
        player.removePotionEffect(PotionEffectType.HASTE);
        player.removePotionEffect(PotionEffectType.JUMP_BOOST);
    }

    /**
     * CORRIG√â : G√®re la t√©l√©portation Escalateur (maintenant dans mobilit√©)
     */
    public void handleEscalator(Player player) {

        ItemStack handItem = player.getInventory().getItemInMainHand();
        if (!plugin.getPickaxeManager().isLegendaryPickaxe(handItem) || !isPickaxeInCorrectSlot(player)) {
            player.sendMessage("¬ßc‚ùå Vous devez avoir la pioche l√©gendaire en main!");
            return;
        }

        PlayerData playerData = plugin.getPlayerDataManager().getPlayerData(player.getUniqueId());

        // NOUVEAU : V√©rifie que la pioche n'est pas cass√©e
        if (isPickaxeBroken(player) && playerData.getEnchantmentLevel("escalator") > 0) {
            player.sendMessage("¬ßc‚ùå Votre pioche est trop endommag√©e pour utiliser Escalateur! R√©parez-la d'abord.");
            return;
        }

        if (playerData.getEnchantmentLevel("escalator") > 0 &&
                playerData.isMobilityEnchantmentEnabled("escalator")) {
            Location location = player.getLocation();
            World world = location.getWorld();

            // Trouve la surface
            int surfaceY = world.getHighestBlockYAt(location);
            Location surfaceLocation = new Location(world, location.getX(), surfaceY + 1, location.getZ());

            // V√©rifie qu'il y a 2 blocs d'air
            if (surfaceLocation.getBlock().getType() == Material.AIR &&
                    surfaceLocation.clone().add(0, 1, 0).getBlock().getType() == Material.AIR) {

                player.teleport(surfaceLocation);
                player.sendMessage("¬ßa‚ú® Escalateur activ√©! T√©l√©portation vers la surface.");
                player.playSound(player.getLocation(), org.bukkit.Sound.ENTITY_ENDERMAN_TELEPORT, 1.0f, 1.0f);
            } else {
                player.sendMessage("¬ßcImpossible de se t√©l√©porter: surface obstru√©e!");
            }
        } else if (playerData.getEnchantmentLevel("escalator") > 0) {
            player.sendMessage("¬ßc‚ùå Escalateur d√©sactiv√©! Utilisez le clic molette pour l'activer.");
        }
    }

    /**
     * CORRIG√â : Cr√©e la barre de durabilit√© visuelle
     */
    private String createDurabilityBar(double healthPercent) {
        StringBuilder bar = new StringBuilder();
        int totalBars = 10;
        int filledBars = (int) Math.round((healthPercent / 100.0) * totalBars);

        for (int i = 0; i < totalBars; i++) {
            if (i < filledBars) {
                if (healthPercent >= 70) {
                    bar.append("¬ßa‚ñì");
                } else if (healthPercent >= 40) {
                    bar.append("¬ße‚ñì");
                } else if (healthPercent >= 20) {
                    bar.append("¬ß6‚ñì");
                } else {
                    bar.append("¬ßc‚ñì");
                }
            } else {
                bar.append("¬ß8‚ñì");
            }
        }

        return bar.toString();
    }

    /**
     * V√©rifie l'√©tat de la pioche l√©gendaire et affiche les notifications appropri√©es
     */
    public void checkLegendaryPickaxeState(Player player, ItemStack pickaxe, short currentDurability, short maxDurability) {
        double durabilityPercent = 1.0 - ((double) currentDurability / maxDurability);
        if (plugin.getEnchantmentBookManager().isEnchantmentActive(player, "incassable")) {
            deactivateBrokenPickaxeMode(player);
        }
        // PIOCHE CASS√âE (100% utilis√©e)
        if (currentDurability >= maxDurability - 1) {
            if (!isPickaxeBroken(player)) {
                activateBrokenPickaxeMode(player);

                // Message sp√©cial pour pioche cass√©e (une seule fois)
                if (!player.hasMetadata("durability_notif_broken")) {
                    TextComponent message = new TextComponent("¬ßcüíÄ PIOCHE CASS√âE! Tous enchantements d√©sactiv√©s! ¬ße[R√âPARER IMM√âDIATEMENT]");
                    message.setClickEvent(new ClickEvent(ClickEvent.Action.RUN_COMMAND, "/repair"));
                    message.setHoverEvent(new HoverEvent(HoverEvent.Action.SHOW_TEXT, new Text("¬ßcR√©paration critique requise!")));
                    player.spigot().sendMessage(message);

                    player.setMetadata("durability_notif_broken", new FixedMetadataValue(plugin, true));
                }
            }
        } else {
            // D√©sactive le mode "pioche cass√©e" si il √©tait actif
            if (isPickaxeBroken(player)) {
                deactivateBrokenPickaxeMode(player);
                player.removeMetadata("durability_notif_broken", plugin);
            }

            // NOTIFICATIONS PAR SEUILS (une seule fois par niveau)
            if (durabilityPercent <= 0.10) { // Moins de 10% restant
                if (!player.hasMetadata("durability_notif_10")) {
                    TextComponent message = new TextComponent("¬ß6‚ö†Ô∏è Votre pioche est tr√®s endommag√©e ! ¬ße[CLIQUEZ POUR R√âPARER]");
                    message.setClickEvent(new ClickEvent(ClickEvent.Action.RUN_COMMAND, "/repair"));
                    message.setHoverEvent(new HoverEvent(HoverEvent.Action.SHOW_TEXT, new Text("¬ßaOuvrir le menu de r√©paration")));
                    player.spigot().sendMessage(message);

                    player.setMetadata("durability_notif_10", new FixedMetadataValue(plugin, true));
                }
            } else if (durabilityPercent <= 0.25) { // Moins de 25% restant
                if (!player.hasMetadata("durability_notif_25")) {
                    TextComponent message = new TextComponent("¬ße‚ö†Ô∏è Votre pioche commence √† √™tre endommag√©e. ¬ße[R√âPARER]");
                    message.setClickEvent(new ClickEvent(ClickEvent.Action.RUN_COMMAND, "/repair"));
                    message.setHoverEvent(new HoverEvent(HoverEvent.Action.SHOW_TEXT, new Text("¬ßaOuvrir le menu de r√©paration")));
                    player.spigot().sendMessage(message);

                    player.setMetadata("durability_notif_25", new FixedMetadataValue(plugin, true));
                }
            }
        }
    }

    /**
     * Active le mode "pioche cass√©e"
     */
    private void activateBrokenPickaxeMode(Player player) {
        player.setMetadata("pickaxe_broken", new FixedMetadataValue(plugin, true));
        player.setMetadata("pickaxe_just_broken", new FixedMetadataValue(plugin, System.currentTimeMillis()));
        plugin.getEnchantmentManager().forceDisableAbundanceAndResetCombustion(player);
        updatePlayerPickaxe(player);
        updateMobilityEffects(player);
        plugin.getPluginLogger().debug("Mode pioche cass√©e activ√© pour " + player.getName());
    }

    /**
     * D√©sactive le mode "pioche cass√©e"
     */
    public void deactivateBrokenPickaxeMode(Player player) {
        player.removeMetadata("pickaxe_broken", plugin);
        player.setMetadata("pickaxe_just_repaired", new FixedMetadataValue(plugin, System.currentTimeMillis()));
        updatePlayerPickaxe(player);
        updateMobilityEffects(player);
        plugin.getPluginLogger().debug("Mode pioche cass√©e d√©sactiv√© pour " + player.getName());
    }

    /**
     * CORRIG√â : Couleur selon la durabilit√©
     */
    private String getDurabilityColor(double healthPercent) {
        if (healthPercent >= 80) return "¬ßa";
        if (healthPercent >= 60) return "¬ße";
        if (healthPercent >= 40) return "¬ß6";
        if (healthPercent >= 20) return "¬ßc";
        return "¬ß4";
    }

    public ItemStack getPlayerPickaxe(Player player) {
        // V√©rifie d'abord le slot r√©serv√© (0)
        ItemStack slotItem = player.getInventory().getItem(PICKAXE_SLOT);
        if (slotItem != null && isLegendaryPickaxe(slotItem) && isOwner(slotItem, player)) {
            return slotItem;
        }
        // Puis la main principale (utile pendant certains mouvements d'inventaire)
        ItemStack mainHand = player.getInventory().getItemInMainHand();
        if (isLegendaryPickaxe(mainHand) && isOwner(mainHand, player)) {
            return mainHand;
        }
        // Fallback: parcourt l'inventaire
        for (ItemStack item : player.getInventory().getContents()) {
            if (isLegendaryPickaxe(item) && isOwner(item, player)) {
                return item;
            }
        }
        return null;
    }
}