package fr.prisontycoon.GUI;

import fr.prisontycoon.PrisonTycoon;
import fr.prisontycoon.autominers.AutominerData;
import fr.prisontycoon.data.MineData;
import fr.prisontycoon.data.PlayerData;
import fr.prisontycoon.managers.AutominerManager;
import fr.prisontycoon.utils.NumberFormatter;
import org.bukkit.Bukkit;
import org.bukkit.Material;
import org.bukkit.NamespacedKey;
import org.bukkit.Sound;
import org.bukkit.entity.Player;
import org.bukkit.event.inventory.ClickType;
import org.bukkit.inventory.Inventory;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.ItemMeta;
import org.bukkit.persistence.PersistentDataType;

import java.util.*;

/**
 * Interface graphique principale simplifi√©e pour les automineurs
 * Affiche les automineurs plac√©s et donne acc√®s aux sous-menus sp√©cialis√©s
 */
public class AutominerGUI {

    private final PrisonTycoon plugin;
    private final NamespacedKey actionKey;
    private final NamespacedKey valueKey;

    // Layout du menu principal (54 slots - 6 lignes)
    private static final int PLAYER_INFO_SLOT = 4;
    private static final int START_STOP_SLOT = 13;

    // Emplacements des automineurs plac√©s (SEULEMENT 2 SLOTS)
    private static final int AUTOMINER_1_SLOT = 21;
    private static final int AUTOMINER_2_SLOT = 23;

    // Boutons de gestion (ligne du bas)
    private static final int FUEL_BUTTON_SLOT = 45;
    private static final int WORLD_BUTTON_SLOT = 46;
    private static final int STORAGE_BUTTON_SLOT = 47;
    private static final int CONDENSE_BUTTON_SLOT = 48;

    public AutominerGUI(PrisonTycoon plugin) {
        this.plugin = plugin;
        this.actionKey = new NamespacedKey(plugin, "gui_action");
        this.valueKey = new NamespacedKey(plugin, "gui_value");
    }

    /**
     * Ouvre le menu principal des automineurs
     */
    public void openMainMenu(Player player) {
        PlayerData playerData = plugin.getPlayerDataManager().getPlayerData(player.getUniqueId());

        Inventory inv = Bukkit.createInventory(null, 54, "¬ß6‚ö° Automineurs - Menu");

        // Bordures d√©coratives
        fillBorders(inv);

        // Informations du joueur (slot 4)
        inv.setItem(PLAYER_INFO_SLOT, createPlayerInfoItem(playerData));

        // Bouton start/stop (slot 13)
        inv.setItem(START_STOP_SLOT, createStartStopButton(playerData));

        // Automineurs plac√©s
        populatePlacedAutominers(inv, playerData, player);

        // Boutons de gestion
        inv.setItem(FUEL_BUTTON_SLOT, createFuelButton(playerData));
        inv.setItem(WORLD_BUTTON_SLOT, createWorldButton(playerData));
        inv.setItem(STORAGE_BUTTON_SLOT, createStorageButton(playerData));
        inv.setItem(CONDENSE_BUTTON_SLOT, createCondenseButton());

        player.openInventory(inv);
        player.playSound(player.getLocation(), Sound.UI_BUTTON_CLICK, 1.0f, 1.0f);
    }

    /**
     * Cr√©e l'item d'information du joueur
     */
    private ItemStack createPlayerInfoItem(PlayerData playerData) {
        ItemStack item = new ItemStack(Material.PLAYER_HEAD);
        ItemMeta meta = item.getItemMeta();

        meta.setDisplayName("¬ß6‚ö° ¬ßlVOS AUTOMINEURS");

        List<String> lore = new ArrayList<>();
        lore.add("¬ß8‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨");

        // Statut g√©n√©ral
        boolean isRunning = playerData.isAutominersRunning();
        lore.add("¬ß7√âtat: " + (isRunning ? "¬ßa‚úÖ EN FONCTIONNEMENT" : "¬ßc‚ùå ARR√äT√âS"));
        lore.add("¬ß7Automineurs actifs: ¬ßf" + playerData.getActiveAutominers().size() + "¬ß7/¬ßf2");
        lore.add("");

        // Monde et carburant
        lore.add("¬ßeüåç ¬ßlMONDE ACTUEL");
        lore.add("¬ß7‚ñ∏ Monde: ¬ßf" + playerData.getAutominerWorld().toUpperCase());
        lore.add("");

        lore.add("¬ßc‚õΩ ¬ßlCARBURANT");
        long fuelAmount = playerData.getAutominerFuel();
        lore.add("¬ß7‚ñ∏ T√™tes disponibles: ¬ßf" + NumberFormatter.format(fuelAmount));

        if (isRunning && !playerData.getActiveAutominers().isEmpty()) {
            int totalConsumption = calculateTotalFuelConsumption(playerData);
            long remainingTime = totalConsumption > 0 ? (fuelAmount * 60) / totalConsumption : 0;
            lore.add("¬ß7‚ñ∏ Temps restant: ¬ßf" + formatTime(remainingTime) + " minutes");
        }
        lore.add("");

        // Stockage
        lore.add("¬ßdüì¶ ¬ßlSTOCKAGE");
        long currentStored = playerData.getAutominerStoredBlocks().values().stream().mapToLong(Long::longValue).sum();
        long maxCapacity = playerData.getAutominerStorageCapacity();
        lore.add("¬ß7‚ñ∏ Capacit√©: ¬ßf" + NumberFormatter.format(currentStored) + "¬ß7/¬ßf" + formatCapacity(maxCapacity));

        double percentage = maxCapacity > 0 ? (double) currentStored / maxCapacity * 100 : 0;
        String capacityColor = percentage >= 90 ? "¬ßc" : percentage >= 70 ? "¬ße" : "¬ßa";
        lore.add("¬ß7‚ñ∏ Taux de remplissage: " + capacityColor + String.format("%.1f%%", percentage));

        lore.add("¬ß8‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨");

        meta.setLore(lore);
        item.setItemMeta(meta);

        return item;
    }

    /**
     * Cr√©e le bouton start/stop
     */
    private ItemStack createStartStopButton(PlayerData playerData) {
        boolean isRunning = playerData.isAutominersRunning();

        ItemStack item = new ItemStack(isRunning ? Material.RED_CONCRETE : Material.GREEN_CONCRETE);
        ItemMeta meta = item.getItemMeta();

        meta.setDisplayName(isRunning ? "¬ßc‚èπ ¬ßlARR√äTER LES AUTOMINEURS" : "¬ßa‚ñ∂ ¬ßlD√âMARRER LES AUTOMINEURS");

        List<String> lore = new ArrayList<>();
        lore.add("¬ß8‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨");

        if (isRunning) {
            lore.add("¬ß7Vos automineurs sont actuellement ¬ßaen fonctionnement¬ß7.");
            lore.add("¬ß7Cliquez pour les ¬ßcarr√™ter temporairement¬ß7.");
        } else {
            lore.add("¬ß7Vos automineurs sont actuellement ¬ßcarr√™t√©s¬ß7.");
            if (playerData.getActiveAutominers().isEmpty()) {
                lore.add("¬ßc‚ö† Aucun automineur n'est plac√©!");
            } else if (playerData.getAutominerFuel() <= 0) {
                lore.add("¬ßc‚ö† Pas assez de carburant!");
            } else {
                lore.add("¬ß7Cliquez pour les ¬ßad√©marrer¬ß7.");
            }
        }

        lore.add("");
        lore.add("¬ßaüñ± ¬ßlCLIC: ¬ßa" + (isRunning ? "Arr√™ter" : "D√©marrer"));
        lore.add("¬ß8‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨");

        meta.setLore(lore);
        setItemAction(meta, "toggle_running", "");
        item.setItemMeta(meta);

        return item;
    }

    /**
     * Remplit les emplacements des automineurs plac√©s
     */
    private void populatePlacedAutominers(Inventory inv, PlayerData playerData, Player player) {
        Set<String> activeUuids = playerData.getActiveAutominers();
        List<AutominerData> activeAutominers = new ArrayList<>();

        // Find autominer data from player's inventory based on active UUIDs
        for (String uuid : activeUuids) {
            AutominerData data = findAutominerDataByUuid(player, uuid);
            if (data != null) {
                activeAutominers.add(data);
            }
        }

        // Slot 1
        if (activeAutominers.size() > 0) {
            inv.setItem(AUTOMINER_1_SLOT, createPlacedAutominerItem(activeAutominers.get(0), 1));
        } else {
            inv.setItem(AUTOMINER_1_SLOT, createEmptySlotItem(1));
        }

        // Slot 2
        if (activeAutominers.size() > 1) {
            inv.setItem(AUTOMINER_2_SLOT, createPlacedAutominerItem(activeAutominers.get(1), 2));
        } else {
            inv.setItem(AUTOMINER_2_SLOT, createEmptySlotItem(2));
        }
    }

    /**
     * Cr√©e un item repr√©sentant un automineur plac√©
     */
    private ItemStack createPlacedAutominerItem(AutominerData autominer, int slotNumber) {
        ItemStack item = new ItemStack(autominer.getType().getDisplayMaterial());
        ItemMeta meta = item.getItemMeta();

        meta.setDisplayName("¬ß6‚ö° " + autominer.getType().getColoredName() + " ¬ß6Automineur ¬ß8#" + slotNumber);

        List<String> lore = new ArrayList<>();
        lore.add("¬ß8‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨");
        lore.add("¬ß7UUID: ¬ßf" + autominer.getUuid().substring(0, 8) + "...");
        lore.add("");

        // Statistiques principales
        lore.add("¬ße‚ö° ¬ßlSTATISTIQUES");
        lore.add("¬ß7‚ñ∏ Efficacit√©: ¬ßa" + autominer.getTotalEfficiency());
        lore.add("¬ß7‚ñ∏ Fortune: ¬ßa" + autominer.getTotalFortune());
        lore.add("¬ß7‚ñ∏ Consommation: ¬ßc" + autominer.getActualFuelConsumption() + " t√™tes/heure");
        lore.add("");

        // Bonus de r√©compenses
        if (autominer.getTotalTokenBonus() > 0 || autominer.getTotalExpBonus() > 0 || autominer.getTotalMoneyBonus() > 0) {
            lore.add("¬ßdüí∞ ¬ßlBONUS");
            if (autominer.getTotalTokenBonus() > 0) {
                lore.add("¬ß7‚ñ∏ Tokens: ¬ßa+" + autominer.getTotalTokenBonus() + "%");
            }
            if (autominer.getTotalExpBonus() > 0) {
                lore.add("¬ß7‚ñ∏ Exp√©rience: ¬ßa+" + autominer.getTotalExpBonus() + "%");
            }
            if (autominer.getTotalMoneyBonus() > 0) {
                lore.add("¬ß7‚ñ∏ Argent: ¬ßa+" + autominer.getTotalMoneyBonus() + "%");
            }
            lore.add("");
        }

        lore.add("¬ß8‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨");
        lore.add("¬ßaüñ± ¬ßlCLIC: ¬ßaOuvrir le menu d'am√©lioration");
        lore.add("¬ßc‚áß ¬ßlSHIFT+CLIC: ¬ßcRetirer l'automineur");
        lore.add("¬ß8‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨");

        meta.setLore(lore);
        setItemAction(meta, "manage_autominer", autominer.getUuid());
        item.setItemMeta(meta);

        return item;
    }

    /**
     * Cr√©e un emplacement vide pour automineur
     */
    private ItemStack createEmptySlotItem(int slotNumber) {
        ItemStack item = new ItemStack(Material.LIGHT_GRAY_STAINED_GLASS_PANE);
        ItemMeta meta = item.getItemMeta();

        meta.setDisplayName("¬ß7‚ö° ¬ßlEMPLACEMENT " + slotNumber + " ¬ß8(LIBRE)");

        List<String> lore = new ArrayList<>();
        lore.add("¬ß8‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨");
        lore.add("¬ß7Aucun automineur plac√© dans ce slot.");
        lore.add("");
        lore.add("¬ßeüìù ¬ßlCOMMENT PLACER UN AUTOMINEUR:");
        lore.add("¬ß7‚ñ∏ Tenez un automineur en main");
        lore.add("¬ß7‚ñ∏ Cliquez sur cet emplacement");
        lore.add("¬ß7‚ñ∏ L'automineur sera automatiquement plac√©");
        lore.add("");
        lore.add("¬ßaüñ± ¬ßlCLIC: ¬ßaPlacer l'automineur en main");
        lore.add("¬ß8‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨");

        meta.setLore(lore);
        setItemAction(meta, "place_autominer", String.valueOf(slotNumber));
        item.setItemMeta(meta);

        return item;
    }

    /**
     * Cr√©e le bouton de gestion du carburant
     */
    private ItemStack createFuelButton(PlayerData playerData) {
        ItemStack item = new ItemStack(Material.PLAYER_HEAD);
        ItemMeta meta = item.getItemMeta();

        meta.setDisplayName("¬ßc‚õΩ ¬ßlGESTION CARBURANT");

        List<String> lore = new ArrayList<>();
        lore.add("¬ß8‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨");
        lore.add("¬ß7G√©rez le carburant de vos automineurs.");
        lore.add("");
        lore.add("¬ß7T√™tes disponibles: ¬ßf" + NumberFormatter.format(playerData.getAutominerFuel()));
        lore.add("¬ß7Consommation totale: ¬ßc" + calculateTotalFuelConsumption(playerData) + " t√™tes/heure");
        lore.add("");
        lore.add("¬ßaüñ± ¬ßlCLIC: ¬ßaOuvrir le menu carburant");
        lore.add("¬ß8‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨");

        meta.setLore(lore);
        setItemAction(meta, "open_fuel_menu", "");
        item.setItemMeta(meta);

        return item;
    }

    /**
     * Cr√©e le bouton de gestion du monde
     */
    private ItemStack createWorldButton(PlayerData playerData) {
        ItemStack item = new ItemStack(Material.GRASS_BLOCK);
        ItemMeta meta = item.getItemMeta();

        meta.setDisplayName("¬ßeüåç ¬ßlGESTION MONDE");

        List<String> lore = new ArrayList<>();
        lore.add("¬ß8‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨");
        lore.add("¬ß7Changez le monde de minage de vos automineurs.");
        lore.add("");
        lore.add("¬ß7Monde actuel: ¬ßf" + playerData.getAutominerWorld().toUpperCase());

        // Afficher les blocs disponibles dans ce monde
        lore.add("¬ß7Blocs disponibles:");
        addWorldBlocksToLore(lore, playerData.getAutominerWorld());

        lore.add("");
        lore.add("¬ße‚áß ¬ßlSHIFT+CLIC: ¬ßeAm√©liorer le monde (co√ªt en beacons)");
        lore.add("¬ß8‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨");

        meta.setLore(lore);
        setItemAction(meta, "upgrade_world", "");
        item.setItemMeta(meta);

        return item;
    }

    /**
     * Cr√©e le bouton de gestion du stockage
     */
    private ItemStack createStorageButton(PlayerData playerData) {
        ItemStack item = new ItemStack(Material.CHEST);
        ItemMeta meta = item.getItemMeta();

        meta.setDisplayName("¬ßdüì¶ ¬ßlGESTION STOCKAGE");

        List<String> lore = new ArrayList<>();
        lore.add("¬ß8‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨");
        lore.add("¬ß7G√©rez le stockage de vos automineurs.");
        lore.add("");

        long currentStored = playerData.getAutominerStoredBlocks().values().stream().mapToLong(Long::longValue).sum();
        long maxCapacity = playerData.getAutominerStorageCapacity();

        lore.add("¬ß7Capacit√©: ¬ßf" + NumberFormatter.format(currentStored) + "¬ß7/¬ßf" + formatCapacity(maxCapacity));

        double percentage = maxCapacity > 0 ? (double) currentStored / maxCapacity * 100 : 0;
        String capacityColor = percentage >= 90 ? "¬ßc" : percentage >= 70 ? "¬ße" : "¬ßa";
        lore.add("¬ß7Taux de remplissage: " + capacityColor + String.format("%.1f%%", percentage));

        lore.add("");
        lore.add("¬ßaüñ± ¬ßlCLIC: ¬ßaOuvrir le menu stockage");
        lore.add("¬ß8‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨");

        meta.setLore(lore);
        setItemAction(meta, "open_storage_menu", "");
        item.setItemMeta(meta);

        return item;
    }

    /**
     * Cr√©e le bouton de condensation
     */
    private ItemStack createCondenseButton() {
        ItemStack item = new ItemStack(Material.CRAFTING_TABLE);
        ItemMeta meta = item.getItemMeta();

        meta.setDisplayName("¬ßbüîß ¬ßlCONDENSATION");

        List<String> lore = new ArrayList<>();
        lore.add("¬ß8‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨");
        lore.add("¬ß7Condensez 9 automineurs du m√™me type");
        lore.add("¬ß7en un automineur de type sup√©rieur.");
        lore.add("");
        lore.add("¬ßeExemples:");
        lore.add("¬ß7‚ñ∏ 9 Pierre ‚Üí 1 Fer");
        lore.add("¬ß7‚ñ∏ 9 Fer ‚Üí 1 Or");
        lore.add("¬ß7‚ñ∏ 9 Or ‚Üí 1 Diamant");
        lore.add("");
        lore.add("¬ßaüñ± ¬ßlCLIC: ¬ßaOuvrir le menu de condensation");
        lore.add("¬ß8‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨");

        meta.setLore(lore);
        setItemAction(meta, "open_condense_menu", "");
        item.setItemMeta(meta);

        return item;
    }

    /**
     * G√®re les clics dans le menu principal
     */
    public void handleMainMenuClick(Player player, int slot, ItemStack clickedItem, ClickType clickType) {
        if (clickedItem == null || clickedItem.getItemMeta() == null) return;

        ItemMeta meta = clickedItem.getItemMeta();
        String action = meta.getPersistentDataContainer().get(actionKey, PersistentDataType.STRING);
        String value = meta.getPersistentDataContainer().get(valueKey, PersistentDataType.STRING);

        if (action == null) return;

        switch (action) {
            case "toggle_running" -> {
                PlayerData playerData = plugin.getPlayerDataManager().getPlayerData(player.getUniqueId());
                plugin.getAutominerManager().toggleAllAutominers(player, !playerData.isAutominersRunning());
                openMainMenu(player); // Refresh
            }
            case "manage_autominer" -> {
                if (clickType.isShiftClick()) {
                    // Shift-clic = retirer l'automineur
                    plugin.getAutominerManager().removeAutominer(player, value);
                    openMainMenu(player);
                } else {
                    // Clic normal = ouvrir le menu d'enchantement
                    plugin.getAutominerEnchantGUI().openEnchantMenu(player, value);
                }
            }
            case "place_autominer" -> {
                placeAutominerFromInventory(player, Integer.parseInt(value));
            }
            case "upgrade_world" -> {
                if (clickType.isShiftClick()) {
                    upgradeWorld(player);
                }
            }
            case "open_fuel_menu" -> {
                plugin.getAutominerFuelGUI().openFuelMenu(player);
            }
            case "open_storage_menu" -> {
                plugin.getAutominerStorageGUI().openStorageMenu(player);
            }
            case "open_condense_menu" -> {
                plugin.getAutominerCondenseGUI().openCondenseMenu(player);
            }
        }
    }

    /**
     * Place un automineur depuis la main du joueur
     */
    private void placeAutominerFromInventory(Player player, int slotNumber) {
        ItemStack clickedItem = player.getOpenInventory().getCursor();
        if (clickedItem == null || clickedItem.getType() == Material.AIR) {
            player.sendMessage("¬ßc‚ùå Vous devez tenir un automineur en main!");
            return;
        }

        AutominerData data = AutominerData.fromItemStack(clickedItem,
                plugin.getAutominerManager().getUuidKey(),
                plugin.getAutominerManager().getTypeKey(),
                plugin.getAutominerManager().getEnchantKey(),
                plugin.getAutominerManager().getCristalKey());

        if (data == null) {
            player.sendMessage("¬ßc‚ùå Automineur invalide!");
            return;
        }

        if (plugin.getAutominerManager().placeAutominer(player, data)) {
            clickedItem.setAmount(clickedItem.getAmount() - 1); // Consommer l'item
            openMainMenu(player); // Refresh
        }
    }

    /**
     * Am√©liore le monde de minage
     */
    private void upgradeWorld(Player player) {
        PlayerData playerData = plugin.getPlayerDataManager().getPlayerData(player.getUniqueId());
        String currentWorld = playerData.getAutominerWorld();

        // Calculer le co√ªt d'am√©lioration
        int upgradeCost = calculateWorldUpgradeCost(currentWorld);

        if (playerData.getBeacons() < upgradeCost) {
            player.sendMessage("¬ßc‚ùå Pas assez de beacons! Co√ªt: ¬ß6" + upgradeCost + " beacons");
            return;
        }

        // G√©n√©rer un nouveau monde al√©atoire (plus proche de 'z' = plus rare)
        String newWorld = generateRandomWorld(currentWorld);

        if (newWorld.equals(currentWorld)) {
            player.sendMessage("¬ßc‚ùå Impossible d'am√©liorer davantage!");
            return;
        }

        // Appliquer l'am√©lioration
        playerData.removeBeacon(upgradeCost);
        playerData.setAutominerWorld(newWorld);

        player.sendMessage("¬ßa‚úÖ Monde am√©lior√© de ¬ße" + currentWorld.toUpperCase() + " ¬ßavers ¬ße" + newWorld.toUpperCase() + "¬ßa!");
        player.sendMessage("¬ß7Co√ªt: ¬ß6" + upgradeCost + " beacons");
        player.playSound(player.getLocation(), Sound.ENTITY_PLAYER_LEVELUP, 1.0f, 2.0f);

        // Refresh du menu
        openMainMenu(player);
    }

    // M√©thodes utilitaires

    private void fillBorders(Inventory inv) {
        ItemStack borderItem = new ItemStack(Material.GRAY_STAINED_GLASS_PANE);
        ItemMeta meta = borderItem.getItemMeta();
        meta.setDisplayName(" ");
        borderItem.setItemMeta(meta);

        // Bordures haut et bas
        for (int i = 0; i < 9; i++) {
            inv.setItem(i, borderItem);
            inv.setItem(i + 45, borderItem);
        }

        // Bordures gauche et droite
        for (int i = 1; i < 5; i++) {
            inv.setItem(i * 9, borderItem);
            inv.setItem(i * 9 + 8, borderItem);
        }
    }

    private void setItemAction(ItemMeta meta, String action, String value) {
        meta.getPersistentDataContainer().set(actionKey, PersistentDataType.STRING, action);
        meta.getPersistentDataContainer().set(valueKey, PersistentDataType.STRING, value);
    }

    private int calculateTotalFuelConsumption(PlayerData playerData) {
        Player player = Bukkit.getPlayer(playerData.getPlayerId());
        int totalConsumption = 0;
        for (String autominerUuid : playerData.getActiveAutominers()) {
            AutominerData autominer = findAutominerDataByUuid(player, autominerUuid);
            if (autominer != null) {
                totalConsumption += autominer.getActualFuelConsumption();
            }
        }
        return totalConsumption;
    }

    private String formatTime(long minutes) {
        if (minutes >= 60) {
            long hours = minutes / 60;
            long remainingMinutes = minutes % 60;
            return hours + "h" + (remainingMinutes > 0 ? remainingMinutes + "m" : "");
        }
        return minutes + "m";
    }

    private String formatCapacity(long capacity) {
        if (capacity >= 1000000) return (capacity / 1000000) + "M";
        if (capacity >= 1000) return (capacity / 1000) + "k";
        return String.valueOf(capacity);
    }

    private void addWorldBlocksToLore(List<String> lore, String worldName) {
        MineData mineData = plugin.getMineManager().getMine("mine-" + worldName.toLowerCase());
        if (mineData != null) {
            for (Map.Entry<Material, Double> entry : mineData.getBlockComposition().entrySet()) {
                Material material = entry.getKey();
                long sellPrice = plugin.getConfigManager().getSellPrice(material);
                lore.add("¬ß7- " + capitalize(material.name().replace("_", " ")) + " (¬ß6" + sellPrice + " coins¬ß7)");
            }
        } else {
            lore.add("¬ßcMonde invalide");
        }
    }

    private String capitalize(String str) {
        if (str.isEmpty()) return str;
        return str.substring(0, 1).toUpperCase() + str.substring(1);
    }

    private int calculateWorldUpgradeCost(String currentWorld) {
        // Co√ªt bas√© sur la distance depuis 'a'
        char currentChar = currentWorld.charAt(0);
        return (currentChar - 'a' + 1) * 10; // 10, 20, 30, etc.
    }

    private String generateRandomWorld(String currentWorld) {
        Random rand = new Random();
        char randomChar = (char) ('a' + rand.nextInt(26));
        return String.valueOf(randomChar).toUpperCase();
    }

    // M√©thodes de recherche
    private AutominerData findAutominerDataByUuid(Player player, String uuid) {
        AutominerManager am = plugin.getAutominerManager();
        for (ItemStack item : player.getInventory().getContents()) {
            if (item != null && am.isAutominer(item)) {
                String itemUuid = item.getItemMeta().getPersistentDataContainer().get(am.getUuidKey(), PersistentDataType.STRING);
                if (uuid.equals(itemUuid)) {
                    return AutominerData.fromItemStack(item, am.getUuidKey(), am.getTypeKey(), am.getEnchantKey(), am.getCristalKey());
                }
            }
        }
        return null;
    }
}