package fr.prisontycoon.GUI;

import fr.prisontycoon.PrisonTycoon;
import fr.prisontycoon.commands.PrestigeCommand;
import fr.prisontycoon.data.PlayerData;
import fr.prisontycoon.prestige.PrestigeReward;
import fr.prisontycoon.prestige.PrestigeTalent;
import org.bukkit.Bukkit;
import org.bukkit.Material;
import org.bukkit.NamespacedKey;
import org.bukkit.Sound;
import org.bukkit.enchantments.Enchantment;
import org.bukkit.entity.Player;
import org.bukkit.event.inventory.ClickType;
import org.bukkit.inventory.Inventory;
import org.bukkit.inventory.ItemFlag;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.ItemMeta;
import org.bukkit.persistence.PersistentDataType;

import java.util.*;
import java.util.concurrent.ConcurrentHashMap;

/**
 * Interface graphique REFONTE pour le syst√®me de prestige
 * - Talents et r√©compenses dans le m√™me menu
 * - Organisation en lignes par niveau, colonnes par type
 * - Pages dynamiques selon le prestige
 * - Syst√®me de r√©initialisation des talents
 */
public class PrestigeGUI {

    // Slots du menu principal - NOUVEAU LAYOUT
    private static final int PRESTIGE_INFO_SLOT = 4;
    private static final int COMBINED_BUTTON_SLOT = 15; // Talents & R√©compenses
    private static final int RESET_TALENTS_SLOT = 14; // R√©initialiser talents
    private static final int PERFORM_PRESTIGE_SLOT = 11;
    private static final int HELP_SLOT = 9;
    private static final int CLOSE_SLOT = 26;

    // Layout du menu talents/r√©compenses (54 slots)
    // 5 prestiges par page, 3 slots par prestige (colonnes)
    private static final int[] PRESTIGE_ROWS = {3, 12, 21, 30, 39}; // 5 lignes

    // Navigation
    private static final int PREV_PAGE_SLOT = 45;
    private static final int NEXT_PAGE_SLOT = 53;
    private static final int BACK_SLOT = 49;

    private final PrisonTycoon plugin;
    private final NamespacedKey actionKey;
    private final NamespacedKey prestigeLevelKey;
    private final NamespacedKey rewardIdKey;
    private final NamespacedKey talentKey;

    private static final long RESET_CONFIRMATION_TIMEOUT = 30000; // 30 secondes
    private final Map<UUID, Integer> currentPages = new ConcurrentHashMap<>();


    public PrestigeGUI(PrisonTycoon plugin) {
        this.plugin = plugin;
        this.actionKey = new NamespacedKey(plugin, "prestige_action");
        this.prestigeLevelKey = new NamespacedKey(plugin, "prestige_level");
        this.rewardIdKey = new NamespacedKey(plugin, "reward_id");
        this.talentKey = new NamespacedKey(plugin, "talent_name");
    }

    /**
     * Ouvre le menu principal du prestige
     */
    public void openMainPrestigeMenu(Player player) {
        Inventory gui = Bukkit.createInventory(null, 27, "¬ß6üèÜ ¬ßlSyst√®me de Prestige ¬ß6üèÜ");

        fillWithGlass(gui);
        setupMainPrestigeMenu(gui, player);

        player.openInventory(gui);
        player.playSound(player.getLocation(), Sound.BLOCK_BEACON_ACTIVATE, 0.7f, 1.2f);
    }

    /**
     * Configure le menu principal du prestige
     */
    private void setupMainPrestigeMenu(Inventory gui, Player player) {
        PlayerData playerData = plugin.getPlayerDataManager().getPlayerData(player.getUniqueId());

        // Informations de prestige au centre-haut
        gui.setItem(PRESTIGE_INFO_SLOT, createPrestigeInfoItem(player));

        // Bouton principal : Talents & R√©compenses combin√©s avec compteurs
        gui.setItem(COMBINED_BUTTON_SLOT, createCombinedButton(player));

        // Bouton r√©initialisation des talents
        gui.setItem(RESET_TALENTS_SLOT, createResetTalentsButton(player));

        // Bouton de prestige (si possible)
        if (plugin.getPrestigeManager().canPrestige(player)) {
            gui.setItem(PERFORM_PRESTIGE_SLOT, createPerformPrestigeButton(playerData.getPrestigeLevel() + 1));
        } else {
            gui.setItem(PERFORM_PRESTIGE_SLOT, createLockedPrestigeButton());
        }

        // Navigation
        gui.setItem(HELP_SLOT, createHelpItem());
        gui.setItem(CLOSE_SLOT, createCloseItem());
    }

    /**
     * Ouvre le menu combin√© talents/r√©compenses avec pages dynamiques
     */
    public void openCombinedMenu(Player player, int page) {
        PlayerData playerData = plugin.getPlayerDataManager().getPlayerData(player.getUniqueId());
        int maxPrestige = playerData.getPrestigeLevel();

        // 54 slots, 5 prestiges par page
        int maxPage = (maxPrestige - 1) / 5;
        page = Math.max(0, Math.min(page, maxPage));

        Inventory gui = Bukkit.createInventory(null, 54, "¬ß6üèÜ Progression Prestige : P" + (page * 5 + 1) + "-P" + Math.min((page + 1) * 5, maxPrestige));

        fillWithGlass(gui);
        setupProgressionMenu(gui, player, page);

        player.openInventory(gui);
        player.playSound(player.getLocation(), Sound.BLOCK_BEACON_ACTIVATE, 0.7f, 1.2f);
    }

    private void setupProgressionMenu(Inventory gui, Player player, int page) {
        PlayerData playerData = plugin.getPlayerDataManager().getPlayerData(player.getUniqueId());
        int maxPrestige = playerData.getPrestigeLevel();

        // 5 lignes de prestige par page
        for (int i = 0; i < 5; i++) {
            int prestigeLevel = page * 5 + i + 1;
            if (prestigeLevel > 50) break; // Max P50

            int baseSlot = PRESTIGE_ROWS[i];
            setupPrestigeRow(gui, player, prestigeLevel, baseSlot);
        }

        // Navigation
        if (page > 0) {
            gui.setItem(PREV_PAGE_SLOT, createPageButton("¬ßc‚¨Ö Page pr√©c√©dente", page - 1));
        }

        int maxPage = (Math.min(maxPrestige, 50) - 1) / 5;
        if (page < maxPage) {
            gui.setItem(NEXT_PAGE_SLOT, createPageButton("¬ßaPage suivante ‚û°", page + 1));
        }

        gui.setItem(BACK_SLOT, createBackToMainButton());
    }

    /**
     * Configure une ligne de r√©compenses sp√©ciales (P5, P10, etc.)
     */
    private void setupSpecialRewardRow(Inventory gui, Player player, int prestigeLevel, int baseSlot, boolean isUnlocked) {
        List<PrestigeReward> rewards = PrestigeReward.SpecialRewards.getSpecialRewardsForPrestige(prestigeLevel);

        if (rewards.size() == 1) {
            // R√©compense unique (P10, P20, etc.) - centrer sur la colonne du milieu
            PrestigeReward reward = rewards.get(0);
            gui.setItem(baseSlot + 1, createRewardItem(player, reward, isUnlocked));
        } else {
            // Choix multiple (P5, P15, etc.) - √©taler sur les 3 colonnes
            for (int col = 0; col < Math.min(3, rewards.size()); col++) {
                PrestigeReward reward = rewards.get(col);
                gui.setItem(baseSlot + col, createRewardItem(player, reward, isUnlocked));
            }
        }
    }

    private int[] calculateCenteredSlots(int baseSlot, int count) {
        switch (count) {
            case 1:
                return new int[]{baseSlot + 1}; // Centre
            case 2:
                return new int[]{baseSlot, baseSlot + 2}; // Gauche et droite
            case 3:
            default:
                return new int[]{baseSlot, baseSlot + 1, baseSlot + 2}; // Les trois
        }
    }

    /**
     * Cr√©e un item de r√©compense am√©lior√©
     */
    // ==================== DIFF√âRENCIATION VISUELLE DES TALENTS DANS LE MENU PROGRESSION ====================

    private void setupTalentRow(Inventory gui, Player player, int prestigeLevel, int baseSlot, boolean isUnlocked) {
        PlayerData playerData = plugin.getPlayerDataManager().getPlayerData(player.getUniqueId());

        // Obtenir le talent pour ce niveau (un seul selon le cycle)
        PrestigeTalent talent = PrestigeTalent.getTalentForPrestige(prestigeLevel);
        if (talent == null) return;

        // V√©rifier si ce talent a √©t√© choisi pour ce niveau
        String chosenTalentName = playerData.getChosenPrestigeTalent(prestigeLevel);
        boolean isChosen = talent.name().equals(chosenTalentName);
        boolean hasAnyChoice = chosenTalentName != null;

        // S√©parer la description en colonnes (utilise les \n existants)
        String[] bonusLines = talent.getDescription().split("\\n");

        // Afficher chaque bonus sur une colonne diff√©rente
        for (int col = 0; col < Math.min(3, bonusLines.length); col++) {
            ItemStack item = createDifferentiatedTalentColumnItem(player, talent, prestigeLevel,
                    bonusLines[col], col, isUnlocked, isChosen, hasAnyChoice);
            gui.setItem(baseSlot + col, item);
        }
    }

    // Nouvelle m√©thode pour cr√©er les items de colonne diff√©renci√©s :
    private ItemStack createDifferentiatedTalentColumnItem(Player player, PrestigeTalent talent, int prestigeLevel,
                                                           String bonusDescription, int column, boolean isUnlocked,
                                                           boolean isChosen, boolean hasAnyChoice) {
        // D√©terminer le mat√©riau selon l'√©tat
        Material material;
        if (isChosen) {
            material = getTalentColumnMaterial(talent, column, true); // Version brillante
        } else if (hasAnyChoice) {
            material = Material.GRAY_STAINED_GLASS_PANE; // Bloqu√©
        } else if (isUnlocked) {
            material = getTalentColumnMaterial(talent, column, false); // Version normale
        } else {
            material = Material.BLACK_STAINED_GLASS_PANE; // Verrouill√©
        }

        ItemStack item = new ItemStack(material);
        ItemMeta meta = item.getItemMeta();

        if (meta != null) {
            // D√©terminer l'√©tat et la couleur
            String prefix;
            String nameColor;
            List<String> statusLore = new ArrayList<>();

            if (isChosen) {
                // TALENT CHOISI - Vert brillant
                prefix = "¬ßa‚úÖ ";
                nameColor = "¬ßa¬ßl";
                statusLore.add("¬ßa‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨");
                statusLore.add("¬ßa‚ú® BONUS ACTIF ‚ú®");
                statusLore.add("¬ß7Ce bonus est appliqu√© √† votre compte");
                statusLore.add("¬ßa‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨");

                // Ajouter enchantement pour effet brillant
                meta.addEnchant(Enchantment.UNBREAKING, 1, true);
                meta.addItemFlags(ItemFlag.HIDE_ENCHANTS);

            } else if (hasAnyChoice) {
                // AUTRE TALENT D√âJ√Ä CHOISI - Gris bloqu√©
                prefix = "¬ß8‚úó ";
                nameColor = "¬ß8";
                statusLore.add("¬ß8‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨");
                statusLore.add("¬ßc‚ùå NON DISPONIBLE");
                statusLore.add("¬ß7Ce talent a √©t√© choisi pour P" + prestigeLevel);
                statusLore.add("¬ß7mais un autre bonus a √©t√© s√©lectionn√©.");
                statusLore.add("¬ß7");
                statusLore.add("¬ß7üí° Utilisez ¬ße¬ßlR√©initialiser Talents");
                statusLore.add("¬ß7pour pouvoir rechoisir (500 beacons)");
                statusLore.add("¬ß8‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨");

            } else if (isUnlocked) {
                // TALENT DISPONIBLE - Jaune/Or s√©lectionnable
                prefix = "¬ße‚≠ò ";
                nameColor = "¬ße¬ßl";
                statusLore.add("¬ße‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨");
                statusLore.add("¬ß6üåü DISPONIBLE");
                statusLore.add("¬ß7Vous pouvez s√©lectionner ce talent");
                statusLore.add("¬ß7pour le niveau P" + prestigeLevel + ".");
                statusLore.add("¬ß7");
                statusLore.add("¬ßc‚ö† Attention: ¬ß7Choix d√©finitif!");
                statusLore.add("¬ße‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨");
                statusLore.add("¬ßa‚û§ Cliquez pour s√©lectionner");

                // Ajouter les donn√©es pour le clic
                meta.getPersistentDataContainer().set(actionKey, PersistentDataType.STRING, "choose_talent");
                meta.getPersistentDataContainer().set(prestigeLevelKey, PersistentDataType.INTEGER, prestigeLevel);
                meta.getPersistentDataContainer().set(talentKey, PersistentDataType.STRING, talent.name());

            } else {
                // TALENT VERROUILL√â - Rouge bloqu√©
                prefix = "¬ßcüîí ";
                nameColor = "¬ßc";
                statusLore.add("¬ßc‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨");
                statusLore.add("¬ß4‚ùå VERROUILL√â");
                statusLore.add("¬ß7Atteignez le niveau ¬ß6P" + prestigeLevel);
                statusLore.add("¬ß7pour d√©bloquer ce talent.");
                statusLore.add("¬ßc‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨");
            }

            // Construire le nom avec le bonus sp√©cifique
            String columnName = getColumnNameFromDescription(bonusDescription);
            meta.setDisplayName(prefix + nameColor + columnName + " ¬ß7(P" + prestigeLevel + ")");

            // Construire la lore compl√®te
            List<String> lore = new ArrayList<>();

            // Description du bonus sp√©cifique
            lore.add("¬ßf" + bonusDescription.replace("¬ß6", "¬ße").replace("¬ßb", "¬ßa"));
            lore.add("");

            // Nom du talent complet
            lore.add("¬ß7Talent: ¬ße" + talent.getDisplayName());
            lore.add("");

            // Statut avec couleurs
            lore.addAll(statusLore);

            meta.setLore(lore);
            item.setItemMeta(meta);
        }

        return item;
    }

    private Material getTalentColumnMaterial(PrestigeTalent talent, int column, boolean isActive) {
        Material baseMaterial = switch (talent) {
            case PROFIT_AMELIORE, PROFIT_AMELIORE_II -> switch (column) {
                case 0 -> Material.GOLD_NUGGET; // Money Greed
                case 1 -> Material.EMERALD; // Prix vente
                case 2 -> Material.BEACON; // Gain avant-poste
                default -> Material.GOLD_INGOT;
            };
            case ECONOMIE_OPTIMISEE, ECONOMIE_OPTIMISEE_II -> switch (column) {
                case 0 -> Material.DIAMOND; // Token Greed
                case 1 -> Material.REDSTONE; // Taxe
                case 2 -> Material.IRON_SWORD; // Prix marchand PvP
                default -> Material.DIAMOND;
            };
        };

        // Version am√©lior√©e si le talent est actif
        if (isActive) {
            return switch (baseMaterial) {
                case GOLD_NUGGET -> Material.GOLD_INGOT;
                case EMERALD -> Material.EMERALD_BLOCK;
                case DIAMOND -> Material.DIAMOND_BLOCK;
                case REDSTONE -> Material.REDSTONE_BLOCK;
                case IRON_SWORD -> Material.NETHERITE_SWORD;
                default -> baseMaterial;
            };
        }

        return baseMaterial;
    }

    // M√©thode pour extraire le nom de la colonne depuis la description :
    private String getColumnNameFromDescription(String description) {
        // Nettoyer les codes couleur et extraire le nom principal
        String clean = description.replaceAll("¬ß[0-9a-fk-or]", "").trim();

        if (clean.contains("Money Greed")) return "Money Greed";
        if (clean.contains("Token Greed")) return "Token Greed";
        if (clean.contains("Prix de vente") || clean.contains("Prix vente")) return "Prix de Vente";
        if (clean.contains("Gain avant-poste") || clean.contains("avant-poste")) return "Avant-Poste";
        if (clean.contains("Taxe")) return "R√©duction Taxe";
        if (clean.contains("marchand PvP")) return "Marchand PvP";
        if (clean.contains("Effet")) return "Effet Multipli√©";

        // Fallback : prendre les premiers mots
        String[] words = clean.split(" ");
        return words.length > 2 ? words[0] + " " + words[1] : clean;
    }

    // Nouvelle m√©thode pour cr√©er un item r√©sum√© de talent :
    private ItemStack createTalentSummaryItem(int prestigeLevel, PrestigeTalent chosenTalent) {
        ItemStack item = new ItemStack(Material.KNOWLEDGE_BOOK);
        ItemMeta meta = item.getItemMeta();

        if (meta != null) {
            meta.setDisplayName("¬ß6üìã R√©sum√© P" + prestigeLevel);

            List<String> lore = new ArrayList<>();
            lore.add("¬ß7Talent s√©lectionn√© pour ce niveau:");
            lore.add("");
            lore.add("¬ßa‚úÖ " + chosenTalent.getDisplayName());
            lore.add("¬ß7" + chosenTalent.getDescription());
            lore.add("");
            lore.add("¬ß7Les bonus de ce talent sont");
            lore.add("¬ß7actuellement ¬ßaactifs ¬ß7sur votre compte.");
            lore.add("");
            lore.add("¬ß8Utilisez la r√©initialisation des talents");
            lore.add("¬ß8pour modifier votre choix.");

            meta.setLore(lore);
            meta.addEnchant(Enchantment.UNBREAKING, 1, true);
            meta.addItemFlags(ItemFlag.HIDE_ENCHANTS);
            item.setItemMeta(meta);
        }

        return item;
    }

    // Am√©liorer l'affichage des r√©compenses sp√©ciales √©galement :
    private ItemStack createRewardItem(Player player, PrestigeReward reward, boolean isUnlocked) {
        PlayerData playerData = plugin.getPlayerDataManager().getPlayerData(player.getUniqueId());

        boolean isCompleted = playerData.hasChosenSpecialReward(reward.getId());

        Material material = isCompleted ? Material.CHEST : (isUnlocked ? Material.ENDER_CHEST : Material.BARRIER);
        ItemStack item = new ItemStack(material);
        ItemMeta meta = item.getItemMeta();

        if (meta != null) {
            String prefix;
            String nameColor;
            List<String> statusLore = new ArrayList<>();

            if (isCompleted) {
                // R√âCOMPENSE R√âCUP√âR√âE
                prefix = "¬ßa‚úÖ ";
                nameColor = "¬ßa¬ßl";
                statusLore.add("¬ßa‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨");
                statusLore.add("¬ßaüéÅ R√âCOMPENSE R√âCUP√âR√âE");
                statusLore.add("¬ß7Cette r√©compense a d√©j√† √©t√©");
                statusLore.add("¬ß7r√©clam√©e et appliqu√©e √† votre compte.");
                statusLore.add("¬ßa‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨");

                meta.addEnchant(Enchantment.UNBREAKING, 1, true);
                meta.addItemFlags(ItemFlag.HIDE_ENCHANTS);

            } else if (isUnlocked) {
                // R√âCOMPENSE DISPONIBLE
                prefix = "¬ßeüéÅ ";
                nameColor = "¬ße¬ßl";
                statusLore.add("¬ße‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨");
                statusLore.add("¬ß6üåü R√âCOMPENSE DISPONIBLE");
                statusLore.add("¬ß7Vous pouvez r√©clamer cette r√©compense");
                statusLore.add("¬ß7sp√©ciale de prestige gratuitement.");
                statusLore.add("¬ße‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨");
                statusLore.add("¬ßa‚û§ Cliquez pour r√©clamer");

                meta.getPersistentDataContainer().set(actionKey, PersistentDataType.STRING, "unlock_reward");
                meta.getPersistentDataContainer().set(rewardIdKey, PersistentDataType.STRING, reward.getId());

            } else {
                // R√âCOMPENSE VERROUILL√âE
                prefix = "¬ßcüîí ";
                nameColor = "¬ßc";
                statusLore.add("¬ßc‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨");
                statusLore.add("¬ß4‚ùå R√âCOMPENSE VERROUILL√âE");

                // Extraire le niveau de prestige requis depuis l'ID
                String prestigeStr = reward.getId().replaceAll("[^0-9]", "");
                statusLore.add("¬ß7Atteignez le niveau ¬ß6P" + prestigeStr);
                statusLore.add("¬ß7pour d√©bloquer cette r√©compense.");
                statusLore.add("¬ßc‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨");
            }

            meta.setDisplayName(prefix + nameColor + reward.getDisplayName());

            List<String> lore = new ArrayList<>();
            lore.add("¬ßf" + reward.getDescription());
            lore.add("");

            // D√©tails de la r√©compense bas√©s sur le type
            lore.add("¬ß7üéÅ R√©compense:");
            lore.add("¬ß7  ‚Ä¢ Type: ¬ße" + formatRewardType(reward.getType()));
            if (reward.getValue() != null) {
                lore.add("¬ß7  ‚Ä¢ Contenu: ¬ße" + formatRewardValue(reward.getValue().toString()));
            }
            lore.add("");

            lore.addAll(statusLore);

            meta.setLore(lore);
            item.setItemMeta(meta);
        }

        return item;
    }

    // M√©thodes utilitaires pour formater les r√©compenses :
    private String formatRewardType(PrestigeReward.RewardType type) {
        return switch (type) {
            case TOKENS -> "Tokens";
            case KEYS -> "Cl√©s";
            case CRYSTALS -> "Cristaux";
            case AUTOMINER -> "Autominer";
            case BOOK -> "Livre";
            case TITLE -> "Titre";
            case COSMETIC -> "Cosm√©tique";
            case BEACONS -> "Beacons";
            case ARMOR_SET -> "Set d'Armure";
            default -> type.name();
        };
    }

    private String formatRewardValue(String value) {
        // Formater la valeur de mani√®re lisible
        if (value.contains(":")) {
            return value.replace(":", " x").replace(",", " + ");
        }
        return value;
    }

    // M√©thode utilitaire pour formater les dates :
    private String formatDate(long timestamp) {
        if (timestamp == 0) return "Inconnu";

        java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat("dd/MM/yyyy");
        return sdf.format(new java.util.Date(timestamp));
    }

    // Am√©liorer l'affichage de l'en-t√™te de niveau dans le menu :
    private ItemStack createPrestigeLevelHeader(int prestigeLevel, boolean isUnlocked, boolean hasContent) {
        Material material = hasContent ?
                (isUnlocked ? Material.DIAMOND : Material.IRON_INGOT) :
                Material.COAL;

        ItemStack item = new ItemStack(material);
        ItemMeta meta = item.getItemMeta();

        if (meta != null) {
            String color = isUnlocked ? "¬ß6" : "¬ßc";
            String status = isUnlocked ? "¬ßa[D√âBLOQU√â]" : "¬ßc[VERROUILL√â]";

            meta.setDisplayName(color + "¬ßl‚îÅ‚îÅ‚îÅ PRESTIGE " + prestigeLevel + " ‚îÅ‚îÅ‚îÅ " + status);

            List<String> lore = new ArrayList<>();

            if (prestigeLevel % 5 == 0) {
                lore.add("¬ß7üéÅ Niveau de r√©compenses sp√©ciales");
                lore.add("¬ß7R√©clamez des bonus permanents uniques!");
            } else {
                lore.add("¬ß7‚≠ê Niveau de talents");
                lore.add("¬ß7Choisissez un talent pour am√©liorer vos capacit√©s!");
            }

            lore.add("");

            if (isUnlocked) {
                lore.add("¬ßa‚úÖ Niveau d√©bloqu√© - Contenu disponible");
            } else {
                lore.add("¬ßc‚ùå Atteignez P" + prestigeLevel + " pour d√©bloquer");
            }

            meta.setLore(lore);

            if (isUnlocked && hasContent) {
                meta.addEnchant(Enchantment.UNBREAKING, 1, true);
                meta.addItemFlags(ItemFlag.HIDE_ENCHANTS);
            }

            item.setItemMeta(meta);
        }

        return item;
    }

    // Modifier setupPrestigeRow pour inclure l'en-t√™te :
    private void setupPrestigeRow(Inventory gui, Player player, int prestigeLevel, int baseSlot) {
        PlayerData playerData = plugin.getPlayerDataManager().getPlayerData(player.getUniqueId());
        boolean isUnlocked = prestigeLevel <= playerData.getPrestigeLevel();

        if (prestigeLevel % 5 == 0) {
            // Palier sp√©cial : r√©compenses
            setupSpecialRewardRow(gui, player, prestigeLevel, baseSlot, isUnlocked);
        } else {
            // Palier normal : talents
            setupTalentRow(gui, player, prestigeLevel, baseSlot, isUnlocked);
        }
    }

    /**
     * G√®re les clics dans le menu
     */
    public void handleMenuClick(Player player, int slot, ItemStack clickedItem, ClickType clickType) {
        if (clickedItem == null || !clickedItem.hasItemMeta()) return;

        ItemMeta meta = clickedItem.getItemMeta();
        String action = meta.getPersistentDataContainer().get(actionKey, PersistentDataType.STRING);
        if (action == null) return;

        switch (action) {
            case "open_combined" -> openCombinedMenu(player, 0);
            case "reset_talents" -> handleTalentReset(player);
            case "perform_prestige" -> {
                if (plugin.getPrestigeManager().canPrestige(player)) {
                    plugin.getPrestigeManager().performPrestige(player);
                    openMainPrestigeMenu(player); // Refresh
                }
            }
            case "page_navigation" -> {
                Integer targetPage = meta.getPersistentDataContainer().get(NamespacedKey.fromString("page"), PersistentDataType.INTEGER);
                if (targetPage != null) {
                    openCombinedMenu(player, targetPage);
                }
            }
            case "unlock_reward" -> {
                String rewardId = meta.getPersistentDataContainer().get(rewardIdKey, PersistentDataType.STRING);
                if (rewardId != null) {
                    handleRewardUnlock(player, rewardId);
                }
            }
            case "choose_talent" -> {
                Integer prestigeLevel = meta.getPersistentDataContainer().get(prestigeLevelKey, PersistentDataType.INTEGER);
                String talentName = meta.getPersistentDataContainer().get(talentKey, PersistentDataType.STRING);
                if (prestigeLevel != null && talentName != null) {
                    handleTalentChoice(player, prestigeLevel, talentName);
                }
            }
            case "back_to_main" -> openMainPrestigeMenu(player);
        }
    }


    /**
     * G√®re le d√©verrouillage d'une r√©compense (gratuit)
     */
    private void handleRewardUnlock(Player player, String rewardId) {
        PlayerData playerData = plugin.getPlayerDataManager().getPlayerData(player.getUniqueId());

        // V√©rifier si d√©j√† r√©clam√©e
        if (playerData.hasChosenSpecialReward(rewardId)) {
            player.sendMessage("¬ßc‚ùå Vous avez d√©j√† r√©clam√© cette r√©compense!");
            return;
        }

        // R√©cup√©rer la r√©compense
        PrestigeReward reward = findRewardById(rewardId);
        if (reward == null) {
            player.sendMessage("¬ßc‚ùå R√©compense introuvable!");
            return;
        }

        // Marquer comme choisie et d√©bloqu√©e
        playerData.addChosenSpecialReward(rewardId);
        playerData.unlockPrestigeReward(rewardId);

        // Donner la r√©compense
        plugin.getPrestigeManager().getRewardManager().giveSpecialReward(player, reward);

        // Messages et effets
        player.sendMessage("¬ßa‚úÖ R√©compense d√©bloqu√©e : " + reward.getDisplayName());
        player.playSound(player.getLocation(), Sound.ENTITY_PLAYER_LEVELUP, 1.0f, 1.2f);
        UUID playerId = player.getUniqueId();
        Integer currentPage = currentPages.getOrDefault(playerId, 0);
        // Sauvegarder
        plugin.getPlayerDataManager().markDirty(player.getUniqueId());

        // Rafra√Æchir l'interface
        player.closeInventory();
        openCombinedMenu(player, currentPage);
    }

    /**
     * G√®re le choix d'un talent (gratuit, un seul par niveau)
     */
    private void handleTalentChoice(Player player, int prestigeLevel, String talentName) {
        PlayerData playerData = plugin.getPlayerDataManager().getPlayerData(player.getUniqueId());

        // V√©rifier que le niveau est d√©bloqu√©
        if (prestigeLevel > playerData.getPrestigeLevel()) {
            player.sendMessage("¬ßc‚ùå Vous devez atteindre P" + prestigeLevel + " pour choisir ce talent!");
            return;
        }

        // V√©rifier si un talent est d√©j√† choisi pour ce niveau
        String existingTalent = playerData.getChosenPrestigeTalent(prestigeLevel);
        if (existingTalent != null) {
            player.sendMessage("¬ßc‚ùå Vous avez d√©j√† choisi un talent pour P" + prestigeLevel + "!");
            player.sendMessage("¬ß7Utilisez la r√©initialisation des talents pour rechoisir.");
            return;
        }

        // Choisir le talent
        playerData.choosePrestigeTalent(prestigeLevel, talentName);

        // Ajouter le talent aux talents actifs
        PrestigeTalent talent = PrestigeTalent.valueOf(talentName);
        playerData.addPrestigeTalent(talent);

        // Messages et effets
        player.sendMessage("¬ßa‚úÖ Talent choisi : " + talent.getDisplayName());
        player.sendMessage("¬ß7Les bonus sont maintenant actifs!");
        player.playSound(player.getLocation(), Sound.ENTITY_EXPERIENCE_ORB_PICKUP, 1.0f, 1.5f);

        UUID playerId = player.getUniqueId();
        Integer currentPage = currentPages.getOrDefault(playerId, 0);

        // Sauvegarder
        plugin.getPlayerDataManager().markDirty(player.getUniqueId());

        // Rafra√Æchir l'interface en maintenant la page
        player.closeInventory();
        openCombinedMenu(player, currentPage);
    }

    /**
     * Trouve une r√©compense par son ID
     */
    private PrestigeReward findRewardById(String rewardId) {
        // Extraire le niveau de prestige depuis l'ID (format: "p5_autominer", "p10_title", etc.)
        try {
            String levelStr = rewardId.substring(1, rewardId.indexOf("_"));
            int prestigeLevel = Integer.parseInt(levelStr);

            List<PrestigeReward> rewards = PrestigeReward.SpecialRewards.getSpecialRewardsForPrestige(prestigeLevel);

            for (PrestigeReward reward : rewards) {
                if (reward.getId().equals(rewardId)) {
                    return reward;
                }
            }
        } catch (Exception e) {
            plugin.getPluginLogger().warning("Erreur lors de la recherche de r√©compense: " + rewardId);
        }

        return null;
    }


    /**
     * G√®re la r√©initialisation des talents
     */
    private void handleTalentReset(Player player) {
        PlayerData playerData = plugin.getPlayerDataManager().getPlayerData(player.getUniqueId());

        // V√©rification des beacons
        if (playerData.getBeacons() < 500) {
            player.sendMessage("¬ßc‚ùå Vous n'avez pas assez de beacons! Requis: ¬ße500");
            player.sendMessage("¬ß7Vous avez: ¬ßc" + playerData.getBeacons() + " beacons");
            return;
        }

        // V√©rification qu'il y a des talents √† r√©initialiser
        if (playerData.getPrestigeTalents().isEmpty()) {
            player.sendMessage("¬ßc‚ùå Vous n'avez aucun talent de prestige √† r√©initialiser!");
            return;
        }

        // NOUVEAU : Ajouter la confirmation en attente avec timestamp
        UUID playerId = player.getUniqueId();
        long currentTime = System.currentTimeMillis();

        // Obtenir l'instance de PrestigeCommand pour acc√©der √† la Map
        PrestigeCommand prestigeCommand = (PrestigeCommand) plugin.getCommand("prestige").getExecutor();
        prestigeCommand.addPendingResetConfirmation(playerId, currentTime);

        // Confirmation avec chrono
        player.sendMessage("¬ß6‚ö† CONFIRMATION REQUISE ‚ö†");
        player.sendMessage("¬ß7Cette action va:");
        player.sendMessage("¬ß7‚Ä¢ R√©initialiser TOUS vos talents de prestige");
        player.sendMessage("¬ß7‚Ä¢ Co√ªter ¬ßc500 beacons");
        player.sendMessage("¬ß7‚Ä¢ Les r√©compenses sp√©ciales ne seront PAS r√©cup√©rables");
        player.sendMessage("");
        player.sendMessage("¬ßaTapez ¬ße/prestige confirmer-reset ¬ßapour confirmer");
        player.sendMessage("¬ßc‚è∞ Vous avez 30 secondes pour confirmer");

        player.closeInventory();
        player.playSound(player.getLocation(), Sound.BLOCK_ANVIL_USE, 1.0f, 0.8f);

        // Programmer l'expiration automatique
        Bukkit.getScheduler().runTaskLater(plugin, () -> {
            if (prestigeCommand.removePendingResetConfirmation(playerId, currentTime)) {
                if (player.isOnline()) {
                    player.sendMessage("¬ßc‚è∞ D√©lai de confirmation √©coul√© pour la r√©initialisation des talents.");
                }
            }
        }, RESET_CONFIRMATION_TIMEOUT / 50); // Convertir ms en ticks
    }


    /**
     * Confirme la r√©initialisation des talents (appel√©e depuis la commande)
     */
    public void confirmTalentReset(Player player) {
        PlayerData playerData = plugin.getPlayerDataManager().getPlayerData(player.getUniqueId());

        // V√©rifier les beacons
        if (playerData.getBeacons() < 500) {
            player.sendMessage("¬ßc‚ùå Vous n'avez pas assez de beacons! (500 requis)");
            return;
        }

        // Effectuer la r√©initialisation
        playerData.removeBeacon(500);
        playerData.resetPrestigeTalents(); // Nouvelle m√©thode qui garde les r√©compenses

        // Messages et effets
        player.sendMessage("¬ßa‚úÖ Talents de prestige r√©initialis√©s!");
        player.sendMessage("¬ß7Co√ªt: ¬ßc-500 beacons");
        player.sendMessage("¬ß7Vos r√©compenses sp√©ciales sont conserv√©es");
        player.sendMessage("¬ß7Vous pouvez maintenant rechoisir vos talents");

        plugin.getPlayerDataManager().markDirty(player.getUniqueId());
        player.playSound(player.getLocation(), Sound.ENTITY_PLAYER_LEVELUP, 1.0f, 1.2f);

        // Fermer le menu et rouvrir le principal
        player.closeInventory();
        openMainPrestigeMenu(player);
    }


    // =============== M√âTHODES DE CR√âATION D'ITEMS ===============

    private void fillWithGlass(Inventory gui) {
        ItemStack glass = new ItemStack(Material.BLACK_STAINED_GLASS_PANE);
        ItemMeta glassMeta = glass.getItemMeta();
        if (glassMeta != null) {
            glassMeta.setDisplayName(" ");
            glass.setItemMeta(glassMeta);
        }

        for (int i = 0; i < gui.getSize(); i++) {
            if (gui.getItem(i) == null) {
                gui.setItem(i, glass);
            }
        }
    }

    private ItemStack createPrestigeInfoItem(Player player) {
        PlayerData playerData = plugin.getPlayerDataManager().getPlayerData(player.getUniqueId());
        int prestigeLevel = playerData.getPrestigeLevel();

        Material material = prestigeLevel > 0 ? Material.NETHER_STAR : Material.GRAY_DYE;
        ItemStack item = new ItemStack(material);
        ItemMeta meta = item.getItemMeta();

        if (meta != null) {
            meta.setDisplayName("¬ß6üèÜ Votre Prestige");

            List<String> lore = new ArrayList<>();
            lore.add("¬ß7Niveau actuel: " + playerData.getPrestigeDisplayName());
            lore.add("");

            if (prestigeLevel > 0) {
                lore.add("¬ße‚ö° Bonus actifs:");

                // Calculer les bonus totaux
                double moneyBonus = playerData.getPrestigeMoneyGreedBonus();
                double tokenBonus = playerData.getPrestigeTokenGreedBonus();
                double taxReduction = playerData.getPrestigeTaxReduction();
                double sellBonus = playerData.getPrestigeSellBonus();

                if (moneyBonus > 0) {
                    lore.add("¬ß7  ‚Ä¢ ¬ß6Money Greed: ¬ßa+" + String.format("%.1f", moneyBonus * 100) + "%");
                }
                if (tokenBonus > 0) {
                    lore.add("¬ß7  ‚Ä¢ ¬ßbToken Greed: ¬ßa+" + String.format("%.1f", tokenBonus * 100) + "%");
                }
                if (taxReduction > 0) {
                    lore.add("¬ß7  ‚Ä¢ ¬ßcR√©duction Taxe: ¬ßa-" + String.format("%.1f", taxReduction * 100) + "%");
                }
                if (sellBonus > 0) {
                    lore.add("¬ß7  ‚Ä¢ ¬ßePrix Vente: ¬ßa+" + String.format("%.1f", sellBonus * 100) + "%");
                }

                lore.add("");
                lore.add("¬ß7R√©compenses sp√©ciales r√©clam√©es: ¬ße" + playerData.getChosenSpecialRewards().size());
            } else {
                lore.add("¬ß7Atteignez le prestige 1 pour d√©bloquer des bonus!");
            }

            meta.setLore(lore);
            item.setItemMeta(meta);
        }

        return item;
    }

    private ItemStack createCombinedButton(Player player) {
        PlayerData playerData = plugin.getPlayerDataManager().getPlayerData(player.getUniqueId());
        int currentPrestige = playerData.getPrestigeLevel();

        // Calculer les √©l√©ments disponibles
        int availableTalents = 0;
        int availableRewards = 0;
        int totalTalents = 0;
        int totalRewards = 0;

        for (int level = 1; level <= Math.max(currentPrestige, 5); level++) {
            if (level % 5 == 0) {
                // Niveau de r√©compenses
                totalRewards++;
                if (!playerData.hasChosenSpecialReward("p" + level + "_*") && level <= currentPrestige) {
                    // V√©rifier s'il y a des r√©compenses non r√©clam√©es pour ce niveau
                    List<PrestigeReward> rewards = PrestigeReward.SpecialRewards.getSpecialRewardsForPrestige(level);
                    boolean hasUnclaimedReward = false;
                    for (PrestigeReward reward : rewards) {
                        if (!playerData.hasChosenSpecialReward(reward.getId())) {
                            hasUnclaimedReward = true;
                            break;
                        }
                    }
                    if (hasUnclaimedReward) {
                        availableRewards++;
                    }
                }
            } else {
                // Niveau de talents
                totalTalents++;
                String chosenTalent = playerData.getChosenPrestigeTalent(level);
                if (chosenTalent == null && level <= currentPrestige) {
                    availableTalents++;
                }
            }
        }

        ItemStack item = new ItemStack(Material.ENCHANTED_BOOK);
        ItemMeta meta = item.getItemMeta();

        if (meta != null) {
            meta.setDisplayName("¬ßeüìö Talents & R√©compenses");

            List<String> lore = new ArrayList<>();
            lore.add("¬ß7G√©rez vos talents et r√©compenses");
            lore.add("¬ß7de prestige dans un menu unifi√©");
            lore.add("");

            // Affichage des disponibilit√©s
            if (availableTalents > 0) {
                lore.add("¬ßa‚ú® " + availableTalents + " talent" + (availableTalents > 1 ? "s" : "") + " disponible" + (availableTalents > 1 ? "s" : ""));
            }
            if (availableRewards > 0) {
                lore.add("¬ßaüéÅ " + availableRewards + " r√©compense" + (availableRewards > 1 ? "s" : "") + " disponible" + (availableRewards > 1 ? "s" : ""));
            }

            if (availableTalents == 0 && availableRewards == 0) {
                lore.add("¬ß7Aucun √©l√©ment disponible");
            }

            lore.add("");
            lore.add("¬ß7Progression:");
            lore.add("¬ß7Talents: ¬ße" + (totalTalents - availableTalents) + "¬ß7/¬ße" + totalTalents);
            lore.add("¬ß7R√©compenses: ¬ße" + (totalRewards - availableRewards) + "¬ß7/¬ße" + totalRewards);
            lore.add("");
            lore.add("¬ßeCliquez pour ouvrir!");

            if (availableTalents > 0 || availableRewards > 0) {
                meta.addEnchant(Enchantment.UNBREAKING, 1, true);
                meta.addItemFlags(ItemFlag.HIDE_ENCHANTS);
            }

            meta.getPersistentDataContainer().set(actionKey, PersistentDataType.STRING, "open_combined");
            meta.setLore(lore);
            item.setItemMeta(meta);
        }

        return item;
    }

    private ItemStack createResetTalentsButton(Player player) {
        PlayerData playerData = plugin.getPlayerDataManager().getPlayerData(player.getUniqueId());
        boolean hasEnoughBeacons = playerData.getBeacons() >= 500;
        boolean hasTalents = !playerData.getPrestigeTalents().isEmpty();

        Material material = hasEnoughBeacons && hasTalents ? Material.TNT : Material.BARRIER;
        ItemStack item = new ItemStack(material);
        ItemMeta meta = item.getItemMeta();

        if (meta != null) {
            meta.setDisplayName("¬ßcüîÑ R√©initialiser Talents");

            List<String> lore = new ArrayList<>();
            lore.add("¬ß7Remet √† z√©ro tous vos talents");
            lore.add("¬ß7de prestige pour les r√©attribuer");
            lore.add("");
            lore.add("¬ß7Co√ªt: ¬ße500 beacons");
            lore.add("¬ß7Vos beacons: " + (hasEnoughBeacons ? "¬ßa" : "¬ßc") + playerData.getBeacons());
            lore.add("");

            if (!hasTalents) {
                lore.add("¬ßcAucun talent √† r√©initialiser");
            } else if (!hasEnoughBeacons) {
                lore.add("¬ßcBeacons insuffisants!");
            } else {
                lore.add("¬ß7‚ö† Les r√©compenses sp√©ciales");
                lore.add("¬ß7ne peuvent PAS √™tre r√©clam√©es √† nouveau");
                lore.add("");
                lore.add("¬ßeCliquez pour r√©initialiser");
            }

            meta.setLore(lore);

            if (hasEnoughBeacons && hasTalents) {
                meta.getPersistentDataContainer().set(actionKey, PersistentDataType.STRING, "reset_talents");
            }

            item.setItemMeta(meta);
        }

        return item;
    }

    private ItemStack createPerformPrestigeButton(int nextLevel) {
        ItemStack item = new ItemStack(Material.NETHER_STAR);
        ItemMeta meta = item.getItemMeta();

        if (meta != null) {
            meta.setDisplayName("¬ß6üöÄ Effectuer Prestige " + nextLevel);
            meta.setLore(List.of(
                    "¬ß7Passez au niveau de prestige suivant",
                    "¬ß7et d√©bloquez de nouveaux bonus!",
                    "",
                    "¬ßaConditions remplies!",
                    "",
                    "¬ßeCliquez pour prestigier!"
            ));
            meta.addEnchant(Enchantment.UNBREAKING, 1, true);
            meta.addItemFlags(ItemFlag.HIDE_ENCHANTS);
            meta.getPersistentDataContainer().set(actionKey, PersistentDataType.STRING, "perform_prestige");
            item.setItemMeta(meta);
        }

        return item;
    }

    private ItemStack createLockedPrestigeButton() {
        ItemStack item = new ItemStack(Material.BARRIER);
        ItemMeta meta = item.getItemMeta();

        if (meta != null) {
            meta.setDisplayName("¬ßcüîí Prestige Verrouill√©");
            meta.setLore(List.of(
                    "¬ß7Vous devez remplir les conditions",
                    "¬ß7pour effectuer un prestige",
                    "",
                    "¬ß7Consultez ¬ße/prestige info ¬ß7pour",
                    "¬ß7voir les pr√©requis"
            ));
            item.setItemMeta(meta);
        }

        return item;
    }

    private ItemStack createPageButton(String name, int targetPage) {
        ItemStack item = new ItemStack(Material.ARROW);
        ItemMeta meta = item.getItemMeta();

        if (meta != null) {
            meta.setDisplayName(name);
            meta.setLore(List.of("¬ß7Page " + (targetPage + 1)));
            meta.getPersistentDataContainer().set(actionKey, PersistentDataType.STRING, "page_navigation");
            meta.getPersistentDataContainer().set(NamespacedKey.fromString("page"), PersistentDataType.INTEGER, targetPage);
            item.setItemMeta(meta);
        }

        return item;
    }

    private ItemStack createBackToMainButton() {
        ItemStack item = new ItemStack(Material.BARRIER);
        ItemMeta meta = item.getItemMeta();

        if (meta != null) {
            meta.setDisplayName("¬ßc‚Üê Retour au menu principal");
            meta.getPersistentDataContainer().set(actionKey, PersistentDataType.STRING, "back_to_main");
            item.setItemMeta(meta);
        }

        return item;
    }

    private ItemStack createBackToCombinedButton() {
        ItemStack item = new ItemStack(Material.ARROW);
        ItemMeta meta = item.getItemMeta();

        if (meta != null) {
            meta.setDisplayName("¬ßa‚Üê Retour aux Talents & R√©compenses");
            meta.getPersistentDataContainer().set(actionKey, PersistentDataType.STRING, "page_navigation");
            meta.getPersistentDataContainer().set(NamespacedKey.fromString("page"), PersistentDataType.INTEGER, 0);
            item.setItemMeta(meta);
        }

        return item;
    }

    private ItemStack createHelpItem() {
        ItemStack item = new ItemStack(Material.BOOK);
        ItemMeta meta = item.getItemMeta();

        if (meta != null) {
            meta.setDisplayName("¬ße‚ùì Aide");
            meta.setLore(List.of(
                    "¬ß7Le syst√®me de prestige vous permet",
                    "¬ß7de recommencer avec des bonus permanents",
                    "",
                    "¬ß7‚Ä¢ Talents cycliques automatiques",
                    "¬ß7‚Ä¢ R√©compenses sp√©ciales tous les 5 niveaux",
                    "¬ß7‚Ä¢ Possibilit√© de r√©initialiser les talents",
                    "",
                    "¬ß7Plus d'infos: ¬ße/prestige help"
            ));
            item.setItemMeta(meta);
        }

        return item;
    }

    private ItemStack createCloseItem() {
        ItemStack item = new ItemStack(Material.BARRIER);
        ItemMeta meta = item.getItemMeta();

        if (meta != null) {
            meta.setDisplayName("¬ßc‚úó Fermer");
            item.setItemMeta(meta);
        }

        return item;
    }

    public void onPlayerQuit(Player player) {
        UUID playerId = player.getUniqueId();
        currentPages.remove(playerId);
    }
}