package fr.prisontycoon.GUI;

import fr.prisontycoon.PrisonTycoon;
import fr.prisontycoon.data.PlayerData;
import fr.prisontycoon.prestige.PrestigeReward;
import fr.prisontycoon.prestige.PrestigeTalent;
import org.bukkit.Bukkit;
import org.bukkit.Material;
import org.bukkit.NamespacedKey;
import org.bukkit.Sound;
import org.bukkit.enchantments.Enchantment;
import org.bukkit.entity.Player;
import org.bukkit.event.inventory.ClickType;
import org.bukkit.inventory.Inventory;
import org.bukkit.inventory.ItemFlag;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.ItemMeta;
import org.bukkit.persistence.PersistentDataType;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

/**
 * Interface graphique REFONTE pour le syst√®me de prestige
 * - Talents et r√©compenses dans le m√™me menu
 * - Organisation en lignes par niveau, colonnes par type
 * - Pages dynamiques selon le prestige
 * - Syst√®me de r√©initialisation des talents
 */
public class PrestigeGUI {

    // Slots du menu principal - NOUVEAU LAYOUT
    private static final int PRESTIGE_INFO_SLOT = 4;
    private static final int COMBINED_BUTTON_SLOT = 15; // Talents & R√©compenses
    private static final int RESET_TALENTS_SLOT = 14; // R√©initialiser talents
    private static final int PERFORM_PRESTIGE_SLOT = 11;
    private static final int HELP_SLOT = 9;
    private static final int CLOSE_SLOT = 26;

    // Layout du menu talents/r√©compenses (54 slots)
    // 5 prestiges par page, 3 slots par prestige (colonnes)
    private static final int[] PRESTIGE_ROWS = {3, 12, 21, 30, 39}; // 5 lignes

    // Navigation
    private static final int PREV_PAGE_SLOT = 45;
    private static final int NEXT_PAGE_SLOT = 53;
    private static final int BACK_SLOT = 49;

    private final PrisonTycoon plugin;
    private final NamespacedKey actionKey;
    private final NamespacedKey prestigeLevelKey;
    private final NamespacedKey rewardIdKey;
    private final NamespacedKey talentKey;

    public PrestigeGUI(PrisonTycoon plugin) {
        this.plugin = plugin;
        this.actionKey = new NamespacedKey(plugin, "prestige_action");
        this.prestigeLevelKey = new NamespacedKey(plugin, "prestige_level");
        this.rewardIdKey = new NamespacedKey(plugin, "reward_id");
        this.talentKey = new NamespacedKey(plugin, "talent_name");
    }

    /**
     * Ouvre le menu principal du prestige
     */
    public void openMainPrestigeMenu(Player player) {
        Inventory gui = Bukkit.createInventory(null, 27, "¬ß6üèÜ ¬ßlSyst√®me de Prestige ¬ß6üèÜ");

        fillWithGlass(gui);
        setupMainPrestigeMenu(gui, player);

        player.openInventory(gui);
        player.playSound(player.getLocation(), Sound.BLOCK_BEACON_ACTIVATE, 0.7f, 1.2f);
    }

    /**
     * Configure le menu principal du prestige
     */
    private void setupMainPrestigeMenu(Inventory gui, Player player) {
        PlayerData playerData = plugin.getPlayerDataManager().getPlayerData(player.getUniqueId());

        // Informations de prestige au centre-haut
        gui.setItem(PRESTIGE_INFO_SLOT, createPrestigeInfoItem(player));

        // Bouton principal : Talents & R√©compenses combin√©s
        gui.setItem(COMBINED_BUTTON_SLOT, createCombinedButton());

        // Bouton r√©initialisation des talents
        gui.setItem(RESET_TALENTS_SLOT, createResetTalentsButton(player));

        // Bouton de prestige (si possible)
        if (plugin.getPrestigeManager().canPrestige(player)) {
            gui.setItem(PERFORM_PRESTIGE_SLOT, createPerformPrestigeButton(playerData.getPrestigeLevel() + 1));
        } else {
            gui.setItem(PERFORM_PRESTIGE_SLOT, createLockedPrestigeButton());
        }

        // Navigation
        gui.setItem(HELP_SLOT, createHelpItem());
        gui.setItem(CLOSE_SLOT, createCloseItem());
    }

    /**
     * Ouvre le menu combin√© talents/r√©compenses avec pages dynamiques
     */
    public void openCombinedMenu(Player player, int page) {
        PlayerData playerData = plugin.getPlayerDataManager().getPlayerData(player.getUniqueId());
        int maxPrestige = playerData.getPrestigeLevel();

        // 54 slots, 5 prestiges par page
        int maxPage = (maxPrestige - 1) / 5;
        page = Math.max(0, Math.min(page, maxPage));

        Inventory gui = Bukkit.createInventory(null, 54, "¬ß6üèÜ Progression Prestige : P" + (page * 5 + 1) + "-P" + Math.min((page + 1) * 5, maxPrestige));

        fillWithGlass(gui);
        setupProgressionMenu(gui, player, page);

        player.openInventory(gui);
        player.playSound(player.getLocation(), Sound.BLOCK_BEACON_ACTIVATE, 0.7f, 1.2f);
    }

    private void setupProgressionMenu(Inventory gui, Player player, int page) {
        PlayerData playerData = plugin.getPlayerDataManager().getPlayerData(player.getUniqueId());
        int maxPrestige = playerData.getPrestigeLevel();

        // 5 lignes de prestige par page
        for (int i = 0; i < 5; i++) {
            int prestigeLevel = page * 5 + i + 1;
            if (prestigeLevel > 50) break; // Max P50

            int baseSlot = PRESTIGE_ROWS[i];
            setupPrestigeRow(gui, player, prestigeLevel, baseSlot);
        }

        // Navigation
        if (page > 0) {
            gui.setItem(PREV_PAGE_SLOT, createPageButton("¬ßc‚¨Ö Page pr√©c√©dente", page - 1));
        }

        int maxPage = (Math.min(maxPrestige, 50) - 1) / 5;
        if (page < maxPage) {
            gui.setItem(NEXT_PAGE_SLOT, createPageButton("¬ßaPage suivante ‚û°", page + 1));
        }

        gui.setItem(BACK_SLOT, createBackToMainButton());
    }

    /**
     * Configure le menu combin√© avec organisation en lignes/colonnes
     */
    private void setupCombinedMenu(Inventory gui, Player player, int page) {
        PlayerData playerData = plugin.getPlayerDataManager().getPlayerData(player.getUniqueId());
        int currentPrestige = playerData.getPrestigeLevel();

        // Calcul des prestiges √† afficher sur cette page
        int startPrestige = page * 5 + 1;
        int endPrestige = Math.min(startPrestige + 4, Math.max(5, currentPrestige));

        // Pour chaque ligne (niveau de prestige)
        for (int i = 0; i < 5; i++) {
            int prestigeLevel = startPrestige + i;
            if (prestigeLevel > Math.max(5, currentPrestige)) break;

            int baseSlot = PRESTIGE_ROWS[i];
            setupPrestigeRow(gui, player, prestigeLevel, baseSlot);
        }

        // Navigation
        if (page > 0) {
            gui.setItem(PREV_PAGE_SLOT, createPageButton("¬ßa‚¨Ö Page pr√©c√©dente", page - 1));
        }

        int maxPage = (Math.max(5, currentPrestige) - 1) / 5;
        if (page < maxPage) {
            gui.setItem(NEXT_PAGE_SLOT, createPageButton("¬ßaPage suivante ‚û°", page + 1));
        }

        gui.setItem(BACK_SLOT, createBackToMainButton());
    }

    /**
     * Configure une ligne de prestige (3 colonnes dynamiques)
     */
    private void setupPrestigeRow(Inventory gui, Player player, int prestigeLevel, int baseSlot) {
        PlayerData playerData = plugin.getPlayerDataManager().getPlayerData(player.getUniqueId());
        boolean isUnlocked = prestigeLevel <= playerData.getPrestigeLevel();

        if (prestigeLevel % 5 == 0) {
            // Palier sp√©cial : r√©compenses
            setupSpecialRewardRow(gui, player, prestigeLevel, baseSlot, isUnlocked);
        } else {
            // Palier normal : talents
            setupTalentRow(gui, player, prestigeLevel, baseSlot, isUnlocked);
        }
    }

    /**
     * Configure une ligne de r√©compenses sp√©ciales (P5, P10, etc.)
     */
    private void setupSpecialRewardRow(Inventory gui, Player player, int prestigeLevel, int baseSlot, boolean isUnlocked) {
        List<PrestigeReward> rewards = PrestigeReward.SpecialRewards.getSpecialRewardsForPrestige(prestigeLevel);

        if (rewards.size() == 1) {
            // R√©compense unique (P10, P20, etc.) - centrer sur la colonne du milieu
            PrestigeReward reward = rewards.get(0);
            gui.setItem(baseSlot + 1, createRewardItem(player, reward, isUnlocked));
        } else {
            // Choix multiple (P5, P15, etc.) - √©taler sur les 3 colonnes
            for (int col = 0; col < Math.min(3, rewards.size()); col++) {
                PrestigeReward reward = rewards.get(col);
                gui.setItem(baseSlot + col, createRewardItem(player, reward, isUnlocked));
            }
        }
    }

    /**
     * Configure une ligne de talents (un seul talent par niveau, max un choisi)
     */
    private void setupTalentRow(Inventory gui, Player player, int prestigeLevel, int baseSlot, boolean isUnlocked) {
        PlayerData playerData = plugin.getPlayerDataManager().getPlayerData(player.getUniqueId());
        PrestigeTalent talent = PrestigeTalent.getTalentForPrestige(prestigeLevel);

        if (talent != null) {
            String chosenTalent = playerData.getChosenPrestigeTalent(prestigeLevel);
            boolean isChosen = talent.name().equals(chosenTalent);

            // S√©parer la description en colonnes
            String[] bonusLines = talent.getDescription().split("\\n");

            for (int col = 0; col < Math.min(3, bonusLines.length); col++) {
                ItemStack item = createTalentColumnItem(player, prestigeLevel, talent, bonusLines[col], col, isUnlocked, isChosen);
                gui.setItem(baseSlot + col, item);
            }
        }
    }

    /**
     * Cr√©e un item de r√©compense am√©lior√©
     */
    private ItemStack createRewardItem(Player player, PrestigeReward reward, boolean isUnlocked) {
        PlayerData playerData = plugin.getPlayerDataManager().getPlayerData(player.getUniqueId());

        boolean isRewardUnlocked = playerData.isPrestigeRewardUnlocked(reward.getId());
        boolean isChosen = playerData.hasChosenSpecialReward(reward.getId());

        Material material = isChosen ? Material.EMERALD :
                isUnlocked ? Material.DIAMOND : Material.GRAY_STAINED_GLASS_PANE;

        ItemStack item = new ItemStack(material);
        ItemMeta meta = item.getItemMeta();

        if (meta != null) {
            String statusColor = isChosen ? "¬ßa" : isUnlocked ? "¬ße" : "¬ß7";
            meta.setDisplayName(statusColor + reward.getDisplayName());

            List<String> lore = new ArrayList<>();

            // Description sur plusieurs lignes
            String[] descLines = reward.getDescription().split("\\n");
            for (String line : descLines) {
                lore.add("¬ß7" + line);
            }

            lore.add("");
            lore.add("¬ß7Type: ¬ßf" + reward.getType().name());

            if (isChosen) {
                lore.add("¬ßa‚úÖ R√©compense choisie et r√©clam√©e!");
            } else if (isUnlocked) {
                lore.add("¬ße‚ö° Cliquez pour d√©bloquer!");
            } else {
                lore.add("¬ßcüîí Atteignez P" + (reward.getId().contains("p") ? reward.getId().substring(1, reward.getId().indexOf("_")) : "?") + " pour d√©bloquer");
            }

            meta.setLore(lore);

            // M√©tadonn√©es pour le clic
            meta.getPersistentDataContainer().set(actionKey, PersistentDataType.STRING, "unlock_reward");
            meta.getPersistentDataContainer().set(rewardIdKey, PersistentDataType.STRING, reward.getId());

            item.setItemMeta(meta);
        }

        if (isChosen) {
            item.addUnsafeEnchantment(Enchantment.UNBREAKING, 1);
            ItemMeta enchMeta = item.getItemMeta();
            if (enchMeta != null) {
                enchMeta.addItemFlags(ItemFlag.HIDE_ENCHANTS);
                item.setItemMeta(enchMeta);
            }
        }

        return item;
    }

    /**
     * Cr√©e un item pour une colonne de talent am√©lior√©
     */
    private ItemStack createTalentColumnItem(Player player, int prestigeLevel, PrestigeTalent talent,
                                             String bonusDescription, int column, boolean isUnlocked, boolean isChosen) {
        Material material = isChosen ? Material.ENCHANTED_BOOK :
                isUnlocked ? Material.BOOK : Material.GRAY_STAINED_GLASS_PANE;

        ItemStack item = new ItemStack(material);
        ItemMeta meta = item.getItemMeta();

        if (meta != null) {
            String columnName = getColumnName(talent, column);
            String statusColor = isChosen ? "¬ßa" : isUnlocked ? "¬ße" : "¬ß7";
            meta.setDisplayName(statusColor + columnName);

            List<String> lore = new ArrayList<>();
            lore.add("¬ß7Prestige: ¬ße" + prestigeLevel);
            lore.add("¬ß7Bonus: " + bonusDescription);
            lore.add("");

            if (isChosen) {
                lore.add("¬ßa‚úÖ Talent choisi et actif!");
                lore.add("¬ß7Ce bonus s'applique automatiquement");
            } else if (isUnlocked) {
                lore.add("¬ße‚ö° Cliquez pour choisir ce talent!");
                lore.add("¬ßc‚ö† Un seul talent par niveau de prestige");
            } else {
                lore.add("¬ßcüîí Atteignez P" + prestigeLevel + " pour d√©bloquer");
            }

            meta.setLore(lore);

            // M√©tadonn√©es pour le clic
            meta.getPersistentDataContainer().set(actionKey, PersistentDataType.STRING, "choose_talent");
            meta.getPersistentDataContainer().set(prestigeLevelKey, PersistentDataType.INTEGER, prestigeLevel);
            meta.getPersistentDataContainer().set(talentKey, PersistentDataType.STRING, talent.name());

            item.setItemMeta(meta);
        }

        if (isChosen) {
            item.addUnsafeEnchantment(Enchantment.UNBREAKING, 1);
            ItemMeta enchMeta = item.getItemMeta();
            if (enchMeta != null) {
                enchMeta.addItemFlags(ItemFlag.HIDE_ENCHANTS);
                item.setItemMeta(enchMeta);
            }
        }

        return item;
    }

    /**
     * Obtient le nom de la colonne selon le talent et la position
     */
    private String getColumnName(PrestigeTalent talent, int column) {
        switch (talent) {
            case PROFIT_AMELIORE:
            case PROFIT_AMELIORE_II:
                return switch (column) {
                    case 0 -> "Money Greed";
                    case 1 -> "Prix de Vente";
                    case 2 -> "Gain Avant-poste";
                    default -> "Bonus " + (column + 1);
                };
            case ECONOMIE_OPTIMISEE:
            case ECONOMIE_OPTIMISEE_II:
                return switch (column) {
                    case 0 -> "Token Greed";
                    case 1 -> "R√©duction Taxe";
                    case 2 -> "Prix Marchand PvP";
                    default -> "Bonus " + (column + 1);
                };
            default:
                return "Bonus " + (column + 1);
        }
    }

    /**
     * Obtient le mat√©riau pour une colonne de talent
     */
    private Material getMaterialForTalentColumn(PrestigeTalent talent, int column) {
        return switch (talent) {
            case PROFIT_AMELIORE -> switch (column) {
                case 0 -> Material.GOLD_NUGGET; // Money Greed
                case 1 -> Material.EMERALD; // Prix vente
                case 2 -> Material.BEACON; // Gain avant-poste
                default -> Material.GOLD_INGOT;
            };
            case ECONOMIE_OPTIMISEE -> switch (column) {
                case 0 -> Material.DIAMOND; // Token Greed
                case 1 -> Material.REDSTONE; // Taxe
                case 2 -> Material.IRON_SWORD; // Prix marchand PvP
                default -> Material.DIAMOND;
            };
            case PROFIT_AMELIORE_II -> switch (column) {
                case 0 -> Material.GOLD_BLOCK; // Effet Money Greed
                case 1 -> Material.EMERALD_BLOCK; // Prix vente direct
                case 2 -> Material.BEACON; // Gain rinacoins avant-poste
                default -> Material.GOLD_BLOCK;
            };
            case ECONOMIE_OPTIMISEE_II -> switch (column) {
                case 0 -> Material.DIAMOND_BLOCK; // Effet Token Greed
                case 1 -> Material.REDSTONE_BLOCK; // Taux taxe final
                case 2 -> Material.NETHERITE_SWORD; // Prix marchand PvP
                default -> Material.DIAMOND_BLOCK;
            };
        };
    }

    /**
     * G√®re les clics dans le menu
     */
    public void handleMenuClick(Player player, int slot, ItemStack clickedItem, ClickType clickType) {
        if (clickedItem == null || !clickedItem.hasItemMeta()) return;

        ItemMeta meta = clickedItem.getItemMeta();
        String action = meta.getPersistentDataContainer().get(actionKey, PersistentDataType.STRING);
        if (action == null) return;

        switch (action) {
            case "open_combined" -> openCombinedMenu(player, 0);
            case "reset_talents" -> handleTalentReset(player);
            case "perform_prestige" -> {
                if (plugin.getPrestigeManager().canPrestige(player)) {
                    plugin.getPrestigeManager().performPrestige(player);
                    openMainPrestigeMenu(player); // Refresh
                }
            }
            case "page_navigation" -> {
                Integer targetPage = meta.getPersistentDataContainer().get(NamespacedKey.fromString("page"), PersistentDataType.INTEGER);
                if (targetPage != null) {
                    openCombinedMenu(player, targetPage);
                }
            }
            case "unlock_reward" -> {
                String rewardId = meta.getPersistentDataContainer().get(rewardIdKey, PersistentDataType.STRING);
                if (rewardId != null) {
                    handleRewardUnlock(player, rewardId);
                }
            }
            case "choose_talent" -> {
                Integer prestigeLevel = meta.getPersistentDataContainer().get(prestigeLevelKey, PersistentDataType.INTEGER);
                String talentName = meta.getPersistentDataContainer().get(talentKey, PersistentDataType.STRING);
                if (prestigeLevel != null && talentName != null) {
                    handleTalentChoice(player, prestigeLevel, talentName);
                }
            }
            case "back_to_main" -> openMainPrestigeMenu(player);
        }
    }


    /**
     * G√®re le d√©verrouillage d'une r√©compense (gratuit)
     */
    private void handleRewardUnlock(Player player, String rewardId) {
        PlayerData playerData = plugin.getPlayerDataManager().getPlayerData(player.getUniqueId());

        // V√©rifier si d√©j√† r√©clam√©e
        if (playerData.hasChosenSpecialReward(rewardId)) {
            player.sendMessage("¬ßc‚ùå Vous avez d√©j√† r√©clam√© cette r√©compense!");
            return;
        }

        // R√©cup√©rer la r√©compense
        PrestigeReward reward = findRewardById(rewardId);
        if (reward == null) {
            player.sendMessage("¬ßc‚ùå R√©compense introuvable!");
            return;
        }

        // Marquer comme choisie et d√©bloqu√©e
        playerData.addChosenSpecialReward(rewardId);
        playerData.unlockPrestigeReward(rewardId);

        // Donner la r√©compense
        plugin.getPrestigeManager().getRewardManager().giveSpecialReward(player, reward);

        // Messages et effets
        player.sendMessage("¬ßa‚úÖ R√©compense d√©bloqu√©e : " + reward.getDisplayName());
        player.playSound(player.getLocation(), Sound.ENTITY_PLAYER_LEVELUP, 1.0f, 1.2f);

        // Sauvegarder
        plugin.getPlayerDataManager().markDirty(player.getUniqueId());

        // Rafra√Æchir l'interface
        player.closeInventory();
        openCombinedMenu(player, 1);
    }

    /**
     * G√®re le choix d'un talent (gratuit, un seul par niveau)
     */
    private void handleTalentChoice(Player player, int prestigeLevel, String talentName) {
        PlayerData playerData = plugin.getPlayerDataManager().getPlayerData(player.getUniqueId());

        // V√©rifier que le niveau est d√©bloqu√©
        if (prestigeLevel > playerData.getPrestigeLevel()) {
            player.sendMessage("¬ßc‚ùå Vous devez atteindre P" + prestigeLevel + " pour choisir ce talent!");
            return;
        }

        // V√©rifier si un talent est d√©j√† choisi pour ce niveau
        String existingTalent = playerData.getChosenPrestigeTalent(prestigeLevel);
        if (existingTalent != null) {
            player.sendMessage("¬ßc‚ùå Vous avez d√©j√† choisi un talent pour P" + prestigeLevel + "!");
            player.sendMessage("¬ß7Utilisez la r√©initialisation des talents pour rechoisir.");
            return;
        }

        // Choisir le talent
        playerData.choosePrestigeTalent(prestigeLevel, talentName);

        // Ajouter le talent aux talents actifs
        PrestigeTalent talent = PrestigeTalent.valueOf(talentName);
        playerData.addPrestigeTalent(talent);

        // Messages et effets
        player.sendMessage("¬ßa‚úÖ Talent choisi : " + talent.getDisplayName());
        player.sendMessage("¬ß7Les bonus sont maintenant actifs!");
        player.playSound(player.getLocation(), Sound.ENTITY_EXPERIENCE_ORB_PICKUP, 1.0f, 1.5f);

        // Sauvegarder
        plugin.getPlayerDataManager().markDirty(player.getUniqueId());

        // Rafra√Æchir l'interface
        player.closeInventory();
        openCombinedMenu(player, 1);
    }

    /**
     * Trouve une r√©compense par son ID
     */
    private PrestigeReward findRewardById(String rewardId) {
        // Extraire le niveau de prestige depuis l'ID (format: "p5_autominer", "p10_title", etc.)
        try {
            String levelStr = rewardId.substring(1, rewardId.indexOf("_"));
            int prestigeLevel = Integer.parseInt(levelStr);

            List<PrestigeReward> rewards = PrestigeReward.SpecialRewards.getSpecialRewardsForPrestige(prestigeLevel);

            for (PrestigeReward reward : rewards) {
                if (reward.getId().equals(rewardId)) {
                    return reward;
                }
            }
        } catch (Exception e) {
            plugin.getPluginLogger().warning("Erreur lors de la recherche de r√©compense: " + rewardId);
        }

        return null;
    }


    /**
     * G√®re la r√©initialisation des talents
     */
    private void handleTalentReset(Player player) {
        PlayerData playerData = plugin.getPlayerDataManager().getPlayerData(player.getUniqueId());

        // V√©rification des beacons
        if (playerData.getBeacons() < 500) {
            player.sendMessage("¬ßc‚ùå Vous n'avez pas assez de beacons! Requis: ¬ße500");
            player.sendMessage("¬ß7Vous avez: ¬ßc" + playerData.getBeacons() + " beacons");
            return;
        }

        // V√©rification qu'il y a des talents √† r√©initialiser
        if (playerData.getPrestigeTalents().isEmpty()) {
            player.sendMessage("¬ßc‚ùå Vous n'avez aucun talent de prestige √† r√©initialiser!");
            return;
        }

        // Confirmation
        player.sendMessage("¬ß6‚ö† CONFIRMATION REQUISE ‚ö†");
        player.sendMessage("¬ß7Cette action va:");
        player.sendMessage("¬ß7‚Ä¢ R√©initialiser TOUS vos talents de prestige");
        player.sendMessage("¬ß7‚Ä¢ Co√ªter ¬ßc500 beacons");
        player.sendMessage("¬ß7‚Ä¢ Les r√©compenses sp√©ciales ne seront PAS r√©cup√©rables");
        player.sendMessage("");
        player.sendMessage("¬ßaTapez ¬ße/prestige confirmer-reset ¬ßapour confirmer");

        player.closeInventory();
        player.playSound(player.getLocation(), Sound.BLOCK_ANVIL_USE, 1.0f, 0.8f);
    }

    /**
     * Confirme la r√©initialisation des talents (appel√©e depuis la commande)
     */
    public void confirmTalentReset(Player player) {
        PlayerData playerData = plugin.getPlayerDataManager().getPlayerData(player.getUniqueId());

        // V√©rifier les beacons
        if (playerData.getBeacons() < 500) {
            player.sendMessage("¬ßc‚ùå Vous n'avez pas assez de beacons! (500 requis)");
            return;
        }

        // Effectuer la r√©initialisation
        playerData.removeBeacon(500);
        playerData.resetPrestigeTalents(); // Nouvelle m√©thode qui garde les r√©compenses

        // Messages et effets
        player.sendMessage("¬ßa‚úÖ Talents de prestige r√©initialis√©s!");
        player.sendMessage("¬ß7Co√ªt: ¬ßc-500 beacons");
        player.sendMessage("¬ß7Vos r√©compenses sp√©ciales sont conserv√©es");
        player.sendMessage("¬ß7Vous pouvez maintenant rechoisir vos talents");

        plugin.getPlayerDataManager().markDirty(player.getUniqueId());
        player.playSound(player.getLocation(), Sound.ENTITY_PLAYER_LEVELUP, 1.0f, 1.2f);

        // Fermer le menu et rouvrir le principal
        player.closeInventory();
        openMainPrestigeMenu(player);
    }


    // =============== M√âTHODES DE CR√âATION D'ITEMS ===============

    private void fillWithGlass(Inventory gui) {
        ItemStack glass = new ItemStack(Material.BLACK_STAINED_GLASS_PANE);
        ItemMeta glassMeta = glass.getItemMeta();
        if (glassMeta != null) {
            glassMeta.setDisplayName(" ");
            glass.setItemMeta(glassMeta);
        }

        for (int i = 0; i < gui.getSize(); i++) {
            if (gui.getItem(i) == null) {
                gui.setItem(i, glass);
            }
        }
    }

    private ItemStack createPrestigeInfoItem(Player player) {
        PlayerData playerData = plugin.getPlayerDataManager().getPlayerData(player.getUniqueId());
        int prestigeLevel = playerData.getPrestigeLevel();

        Material material = prestigeLevel > 0 ? Material.NETHER_STAR : Material.GRAY_DYE;
        ItemStack item = new ItemStack(material);
        ItemMeta meta = item.getItemMeta();

        if (meta != null) {
            meta.setDisplayName("¬ß6üèÜ Votre Prestige");

            List<String> lore = new ArrayList<>();
            lore.add("¬ß7Niveau actuel: " + playerData.getPrestigeDisplayName());
            lore.add("");

            if (prestigeLevel > 0) {
                lore.add("¬ße‚ö° Bonus actifs:");

                // Calculer les bonus totaux
                double moneyBonus = playerData.getPrestigeMoneyGreedBonus();
                double tokenBonus = playerData.getPrestigeTokenGreedBonus();
                double taxReduction = playerData.getPrestigeTaxReduction();
                double sellBonus = playerData.getPrestigeSellBonus();

                if (moneyBonus > 0) {
                    lore.add("¬ß7  ‚Ä¢ ¬ß6Money Greed: ¬ßa+" + String.format("%.1f", moneyBonus * 100) + "%");
                }
                if (tokenBonus > 0) {
                    lore.add("¬ß7  ‚Ä¢ ¬ßbToken Greed: ¬ßa+" + String.format("%.1f", tokenBonus * 100) + "%");
                }
                if (taxReduction > 0) {
                    lore.add("¬ß7  ‚Ä¢ ¬ßcR√©duction Taxe: ¬ßa-" + String.format("%.1f", taxReduction * 100) + "%");
                }
                if (sellBonus > 0) {
                    lore.add("¬ß7  ‚Ä¢ ¬ßePrix Vente: ¬ßa+" + String.format("%.1f", sellBonus * 100) + "%");
                }

                lore.add("");
                lore.add("¬ß7R√©compenses sp√©ciales r√©clam√©es: ¬ße" + playerData.getChosenSpecialRewards().size());
            } else {
                lore.add("¬ß7Atteignez le prestige 1 pour d√©bloquer des bonus!");
            }

            meta.setLore(lore);
            item.setItemMeta(meta);
        }

        return item;
    }

    private ItemStack createCombinedButton() {
        ItemStack item = new ItemStack(Material.ENCHANTED_BOOK);
        ItemMeta meta = item.getItemMeta();

        if (meta != null) {
            meta.setDisplayName("¬ß5‚ö° Talents & R√©compenses");
            meta.setLore(List.of(
                    "¬ß7Consultez et g√©rez vos talents",
                    "¬ß7de prestige et r√©compenses sp√©ciales",
                    "",
                    "¬ß7‚Ä¢ Organisation par niveau de prestige",
                    "¬ß7‚Ä¢ Affichage des bonus par colonne",
                    "¬ß7‚Ä¢ R√©compenses sp√©ciales tous les 5 niveaux",
                    "",
                    "¬ßeCliquez pour ouvrir!"
            ));
            meta.addEnchant(Enchantment.UNBREAKING, 1, true);
            meta.addItemFlags(ItemFlag.HIDE_ENCHANTS);
            meta.getPersistentDataContainer().set(actionKey, PersistentDataType.STRING, "open_combined");
            item.setItemMeta(meta);
        }

        return item;
    }

    private ItemStack createResetTalentsButton(Player player) {
        PlayerData playerData = plugin.getPlayerDataManager().getPlayerData(player.getUniqueId());
        boolean hasEnoughBeacons = playerData.getBeacons() >= 500;
        boolean hasTalents = !playerData.getPrestigeTalents().isEmpty();

        Material material = hasEnoughBeacons && hasTalents ? Material.TNT : Material.BARRIER;
        ItemStack item = new ItemStack(material);
        ItemMeta meta = item.getItemMeta();

        if (meta != null) {
            meta.setDisplayName("¬ßcüîÑ R√©initialiser Talents");

            List<String> lore = new ArrayList<>();
            lore.add("¬ß7Remet √† z√©ro tous vos talents");
            lore.add("¬ß7de prestige pour les r√©attribuer");
            lore.add("");
            lore.add("¬ß7Co√ªt: ¬ße500 beacons");
            lore.add("¬ß7Vos beacons: " + (hasEnoughBeacons ? "¬ßa" : "¬ßc") + playerData.getBeacons());
            lore.add("");

            if (!hasTalents) {
                lore.add("¬ßcAucun talent √† r√©initialiser");
            } else if (!hasEnoughBeacons) {
                lore.add("¬ßcBeacons insuffisants!");
            } else {
                lore.add("¬ß7‚ö† Les r√©compenses sp√©ciales");
                lore.add("¬ß7ne peuvent PAS √™tre r√©clam√©es √† nouveau");
                lore.add("");
                lore.add("¬ßeCliquez pour r√©initialiser");
            }

            meta.setLore(lore);

            if (hasEnoughBeacons && hasTalents) {
                meta.getPersistentDataContainer().set(actionKey, PersistentDataType.STRING, "reset_talents");
            }

            item.setItemMeta(meta);
        }

        return item;
    }

    private ItemStack createPerformPrestigeButton(int nextLevel) {
        ItemStack item = new ItemStack(Material.NETHER_STAR);
        ItemMeta meta = item.getItemMeta();

        if (meta != null) {
            meta.setDisplayName("¬ß6üöÄ Effectuer Prestige " + nextLevel);
            meta.setLore(List.of(
                    "¬ß7Passez au niveau de prestige suivant",
                    "¬ß7et d√©bloquez de nouveaux bonus!",
                    "",
                    "¬ßaConditions remplies!",
                    "",
                    "¬ßeCliquez pour prestigier!"
            ));
            meta.addEnchant(Enchantment.UNBREAKING, 1, true);
            meta.addItemFlags(ItemFlag.HIDE_ENCHANTS);
            meta.getPersistentDataContainer().set(actionKey, PersistentDataType.STRING, "perform_prestige");
            item.setItemMeta(meta);
        }

        return item;
    }

    private ItemStack createLockedPrestigeButton() {
        ItemStack item = new ItemStack(Material.BARRIER);
        ItemMeta meta = item.getItemMeta();

        if (meta != null) {
            meta.setDisplayName("¬ßcüîí Prestige Verrouill√©");
            meta.setLore(List.of(
                    "¬ß7Vous devez remplir les conditions",
                    "¬ß7pour effectuer un prestige",
                    "",
                    "¬ß7Consultez ¬ße/prestige info ¬ß7pour",
                    "¬ß7voir les pr√©requis"
            ));
            item.setItemMeta(meta);
        }

        return item;
    }

    private ItemStack createPageButton(String name, int targetPage) {
        ItemStack item = new ItemStack(Material.ARROW);
        ItemMeta meta = item.getItemMeta();

        if (meta != null) {
            meta.setDisplayName(name);
            meta.setLore(List.of("¬ß7Page " + (targetPage + 1)));
            meta.getPersistentDataContainer().set(actionKey, PersistentDataType.STRING, "page_navigation");
            meta.getPersistentDataContainer().set(NamespacedKey.fromString("page"), PersistentDataType.INTEGER, targetPage);
            item.setItemMeta(meta);
        }

        return item;
    }

    private ItemStack createBackToMainButton() {
        ItemStack item = new ItemStack(Material.BARRIER);
        ItemMeta meta = item.getItemMeta();

        if (meta != null) {
            meta.setDisplayName("¬ßc‚Üê Retour au menu principal");
            meta.getPersistentDataContainer().set(actionKey, PersistentDataType.STRING, "back_to_main");
            item.setItemMeta(meta);
        }

        return item;
    }

    private ItemStack createBackToCombinedButton() {
        ItemStack item = new ItemStack(Material.ARROW);
        ItemMeta meta = item.getItemMeta();

        if (meta != null) {
            meta.setDisplayName("¬ßa‚Üê Retour aux Talents & R√©compenses");
            meta.getPersistentDataContainer().set(actionKey, PersistentDataType.STRING, "page_navigation");
            meta.getPersistentDataContainer().set(NamespacedKey.fromString("page"), PersistentDataType.INTEGER, 0);
            item.setItemMeta(meta);
        }

        return item;
    }

    private ItemStack createHelpItem() {
        ItemStack item = new ItemStack(Material.BOOK);
        ItemMeta meta = item.getItemMeta();

        if (meta != null) {
            meta.setDisplayName("¬ße‚ùì Aide");
            meta.setLore(List.of(
                    "¬ß7Le syst√®me de prestige vous permet",
                    "¬ß7de recommencer avec des bonus permanents",
                    "",
                    "¬ß7‚Ä¢ Talents cycliques automatiques",
                    "¬ß7‚Ä¢ R√©compenses sp√©ciales tous les 5 niveaux",
                    "¬ß7‚Ä¢ Possibilit√© de r√©initialiser les talents",
                    "",
                    "¬ß7Plus d'infos: ¬ße/prestige help"
            ));
            item.setItemMeta(meta);
        }

        return item;
    }

    private ItemStack createCloseItem() {
        ItemStack item = new ItemStack(Material.BARRIER);
        ItemMeta meta = item.getItemMeta();

        if (meta != null) {
            meta.setDisplayName("¬ßc‚úó Fermer");
            item.setItemMeta(meta);
        }

        return item;
    }
}