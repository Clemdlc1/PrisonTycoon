## PrisonTycoon — Document de conception détaillé

Ce document couvre trois volets:
- Partie 1: Système de pets (vision, progression, raretés, bestiaire complet trié par rareté, synergies, économie, équilibrage)
- Partie 2: Nouvelles idées de gameplay et mécaniques (hors pets), avec un focus important sur les métiers
- Partie 3: Pistes d’amélioration du code, performance et maintenabilité (hors pets)


## Partie 1 — Système de pets (vision approfondie)

### 1.1 Principes généraux
- Équipement: jusqu’à 3 pets actifs en même temps.
- Visuel: les pets sont des représentés par des tête via headenum / headutils : les pets équipés suivent le joueur et se place en triangle au dessus de lui.
- Source d’XP: via l’enchantement `PetXP` et via la nourriture.
- Progression: le pet gagne des niveaux; tous les 100 niveaux, l’XP retourne à 0 et le pet gagne +1 «croissance». Cap de croissance: 50.
- Duplicatas: obtenir un pet déjà possédé → +1 croissance (si croissance max: converti en nourriture).
- Nourriture: obtenue dans les caisses et via drops de monstres. Trois tiers: Croquette (+1x), Gourmet (+3x), Festin (+10x).
- Acquisition: «boîtes de pets» lootées dans les caisses (les boîtes s’ouvrent comme un voucher pour donner un pet aléatoire selon des tables de rareté).

### 1.2 Raretés
- Raretés proposées (couleur indicative):
  - Commun (blanc)
  - Rare (violet)
  - Épique (rose)
  - Mythique (doré)

### 1.3 Croissance et formule (sans paliers, sans cap)
- Chaque 100 niveaux → +1 croissance (max croissance 50).
- Formule effet simple et unique: Effet total = Effet de base × Croissance.
- Plus le pet est rare, plus il est long à monter en niveau.

### 1.4 Nourriture, économie et vitesse de progression
- Types de nourriture : Croquette (valeur XP 1x), Gourmet (3x), Festin (10x).

### 1.5 Acquisition
- Boîtes de pets par tiers (Commune/Rare/Mythique) droppées par caisses.

### 1.6 Bestiaire — 4 raretés
Format: Nom — Effet principal — Effet de base (par croissance) en %

Raretés retenues: Commun, Rare, Épique, Mythique.

Commun
Gargouille — +XP joueur — +1.0%
Vouivre — +MoneyGreed — +1.0%
Kelpie — +Pet XP — +1.0%
Cait Sith — +Fortune — +0.5%
Black Shuck — -Usure pioche — +0.2%
Néréide — +Job XP — +1.0%
Bête du Gévaudan — +Gain avant-poste — +0.8%
Rare
Farfadet — +Chance de clés — +0.8%
Griffon — +Tokens — +2.4%
Basilic — +MoneyGreed — +2.0%
Selkie — +Efficacité autominer — +1.8%
Tarasque — -Conso carburant autominer — +1.5%
Épique
Licorne — +Tokens — +3.0%
Sphinx — +Pet XP — +3.0%
Morrigan — +Proc enchants pioche — +0.5%
Cernunnos — +Fortune — +2.0%
Hippogriffe — +Gain avant-poste — +2.0%
Mythique
Fenrir — +Sell — +3.0%
Kraken — +Beacons — +1.0%
Tarasque royale — +Efficacité autominer — +3.0%

Notes:
- Tous les effets s’additionnent linéairement entre pets.

### 1.7 Synergies d’équipe (5 groupes de 3 pets)
Règle: chaque synergie ajoute un bonus linéaire basé sur la somme des croissances des 3 pets (c1+c2+c3).

1) Synergie Commerce (Fenrir + Licorne + Griffon)
   - Bonus: +0.20 Sell et +0.25 TokensGreed par (c1+c2+c3).
2) Synergie Savoirs (Sphinx + Hippogriffe + Kelpie)
   - Bonus: +0.25 Pet XP et +0.20 XP joueur par (c1+c2+c3).
3) Synergie Machineries (Tarasque royale + Tarasque + Black Shuck)
   - Bonus: +0.25 Efficacité autominer et -0.05 Usure pickaxe par (c1+c2+c3).
4) Synergie Richesses (Basilic + Vouivre + Kraken)
   - Bonus: +0.20 Gain avant-poste et +0.10 Beacons par (c1+c2+c3).
5) Synergie Opportunités (Morrigan + Cernunnos + Farfadet)
   - Bonus: +0.05 Proc enchants pickaxe (hors uniques) et +0.15 Chance de clés par (c1+c2+c3).

### 1.8 Boîtes de pets (3 tiers)
- Boîte I (Commune): table orientée Commun, chances réduites pour Rare/Épique/Mythique.
- Boîte II (Améliorée): augmente significativement les chances Rare/Épique, faible pour Mythique.
- Boîte III (Suprême): forte probabilité Épique, chance réelle de Mythique.
- Chaque tier surclasse le précédent en termes de probabilité;

### 1.9 Déblocage des 3 slots de pets
se fera via les quetes plus tard, mets 1 pour l'instant mais crée la méthode pour ajouter plus tard



## Partie 2 — Développement des métiers existants (Mineur, Commerçant, Guerrier)

Objectif: approfondir les 3 métiers déjà en place, sans en ajouter d’autres, et sans mini-événements.

### 2.1 Mineur — Extraction, Prospection, Stabilité
- Talents existants (code): `exp_greed`, `token_greed`, `money_greed` (valeurs croissantes 1→10).
- Interprétation et application:
  - `exp_greed` → augmente `EXPERIENCE_BONUS` (via `GlobalBonusManager`).
  - `token_greed` → augmente `TOKEN_BONUS` (et influence probabilités Greed existantes dans `EnchantmentManager`).
  - `money_greed` → augmente `MONEY_BONUS`/MoneyGreed (non-uniques), soumis aux caps.
- Kits (1–10): paliers cosmétiques + QOL minage (ex: meilleure lisibilité overload mine, notifications de durabilité, HUD léger).
- Progression: XP métier donnée uniquement au métier actif (déjà en place). Afficher dans GUI les valeurs réelles appliquées (post-caps) par talent et niveau.
- Synergies:
  - MineOverload: afficher dans le GUI des info-bulles l’effet réel du bonus quand la mine est en surcharge.
  - Cristaux pickaxe: indiquer la somme des bonus Mineur + Cristaux sur Fortune/Greed (vue récapitulatif).

### 2.2 Commerçant — Négociation, Ventes, Banque
- Talents existants (code): `negotiations`, `vitrines_sup`, `sell_boost`.
- Interprétation et application (sans dépendre de plugins tiers):
  - `sell_boost` → augmente `SELL_BONUS` (caps globaux).
  - `negotiations` → convertir en bonus «banque»: +capacité coffre-fort / -frais / +intérêts (mapper en `GlobalBonusManager` via champ bankBonus détaillé pour affichage), ou bonus sur conversion vente→coins (micro-bonus anti-taxe).
  - `vitrines_sup` → si HDV externe indisponible, afficher «passif inactif» et proposer conversion optionnelle en micro-`TAX_REDUCTION` (ex: +0/1/2%).
- Kits (1–10): items d’info (livrets) indiquant cours des investissements (`BankManager`), UI de synthèse des ventes (historique minute) déjà traquées dans `PlayerData`.
- Synergies:
  - Banque: exposer dans le GUI l’impact réel de SellBoost sur ventes; proposer un «dashboard» ventes/min.

### 2.3 Guerrier — Soldes, Garde, Beacons
- Talents existants (code): `soldes`, `garde`, `beacon_multiplier`.
- Interprétation et application:
  - `soldes` → réduit les prix du marchand PvP (si présent) ou peine de mort d’item (si applicable) via `PVP_MERCHANT_REDUCTION`.
  - `garde` → bonus de gains Outpost (hors combat), capés; l’UI Outpost affiche le multiplicateur courant (somme talents + autres).
  - `beacon_multiplier` → multiplie gains de beacons (cap global), lisible dans bonus détaillés.
- Kits (1–10): affichage stats Outpost (temps de contrôle, gains totaux), totems décoratifs (sans avantage PvP si hors périmètre).
- Synergies:
  - Armes/Armures `ForgeManager`/`WeaponArmorEnchantmentManager`: récap bonus combiné (armure + talents) dans l’UI Guerrier.

### 2.4 QoL GUI & transparence
- Dans `ProfessionGUI`: ajouter une page «Détails talents» par métier, listant pour chaque talent le bonus brut, le cap applicable, et le bonus final «effectif».
- Dans `ProfessionRewardsGUI`: préciser les kits débloqués et leur effet QOL.
- Dans les messages de level-up: afficher le prochain coût/talent conseillé.

### 2.5 Progression & coûts (cohérence)
- Conserver les fonctions existantes de coûts (talent/kit) mais afficher un prévisionnel cumulatif (N prochains niveaux) pour aider le joueur à planifier.
- Respecter le cooldown 24h de changement de métier; indiquer le temps restant dans la GUI.


## Partie 3 — Améliorations code/perf/maintenance (hors pets)

### 3.1 Architecture & modularisation
- Scinder les monolithes:
  - `EnchantmentManager` → classes par enchantement + registre (pattern «strategy»).
  - `CrateType` → tables de loot data-driven (YAML/JSON) pour éviter les longs `switch` et faciliter l’équilibrage.
  - `PlayerData` → agrégats logique (économie, professions, prestige, autominer, réputation) avec services dédiés.
- Registre unifié des bonus dans `GlobalBonusManager` (déjà amorcé): centraliser caps, agrégation et détails sources.

### 3.2 Données & persistance
- DB: indexer colonnes de lookup (joueur, timestamps) pour achats marché noir & gangs; batch async via Hikari.
- Snapshots/deltas pour `PlayerDataManager`: sérialiser les deltas fréquemment, flush complet moins souvent.

### 3.3 Performance runtime
- Caches TTL: généraliser le pattern de `GlobalBonusManager` aux prix de vente (`ConfigManager.getSellPrice`) et listes pondérées de `MineData`.
- Random/Math: utiliser `ThreadLocalRandom`/pré-calculs; éviter `new Random()` fréquent.
- GUI: pré-construire pages «froides», rafraîchir partiellement; batcher les `ItemMeta`.
- Events: `ignoreCancelled=true` partout où pertinent; gardes en tête de handler.

### 3.4 Qualité & reloads
- Validation/invariants: étendre le modèle `WarpData.isValid()` aux structures Mines/Outpost.
- Logs structurés: niveaux (debug/info/warn), métriques légères (durée handlers critiques).
- Reloads chauds: étendre `ConfigManager.reloadConfiguration()` à crates/bonus/coûts/caps.

### 3.5 Sécurité & équilibrage
- Caps centraux: tous multiplicateurs (Sell/Token/XP/Proc) capés dans `GlobalBonusManager` pour éviter double-application.
- Normaliser l’analyse des entrées joueurs (commands/GUI): bornes sur quantités, coûts, niveaux.

### 3.6 Tests & observabilité
- Tests unitaires de formules (coûts upgrades, courbes bonus, caps) en logique pure (sans Bukkit).
- Compteurs clés: impact TPS des gros flux (autominers, crates de masse, overload mines).
- Profilage léger: durée moyenne/percentiles des handlers (minage, enchants) + rapport admin périodique.


## Annexes — Mapping technique (non exhaustif)

- Bonus par catégories (`GlobalBonusManager.BonusCategory`):
  - TOKEN_BONUS ↔ pets Tokens/TokenGreed
  - MONEY_BONUS ↔ MoneyGreed
  - EXPERIENCE_BONUS ↔ XP joueur
  - SELL_BONUS ↔ Sell
  - FORTUNE_BONUS ↔ Fortune
  - BEACON_MULTIPLIER (option) ↔ pets beacons (si ajout)

- Intégration pets ↔ système existant:
  - Application des bonus via `GlobalBonusManager.getTotalBonusMultiplier(player, category)`
  - Chances de proc: interfaces côté `EnchantmentManager` (hors uniques), plafond global proc.
  - Autominer: réduire `calculateFuelConsumption` et moduler simulation `simulateMining` (cap strict).
  - Outpost: bonus hors combat, via `OutpostManager` (tick passif)

- UI/UX:
  - `GUIType.PETS_MENU`: onglets Équipe / Inventaire / Nourriture / Fusions / Synergies.
  - Affichage: croissance (0–50), niveaux (0–∞), paliers, traits, caps, synergies actives.

- Économie & loot:
  - Crates → boîtes de pets (pity system par joueur)
  - Duplicatas → croissance ou nourriture équivalente
  - Nourriture → items consommables avec cooldown

- Équilibrage & caps (exemples indicatifs):
  - Cap Sell total (toutes sources): ~+150% (ajuster)
  - Cap proc enchants non-uniques: ~+15% additif pets (au-delà via autres systèmes, toujours capés)
  - Cap clés via pets: très faible (ex: +3.5% mythique max)
  - Cap autominer pet: -13% (rare) à -15% (mythique) conso max via pets (hors autres sources)


— Fin —


